<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 05 Jul 2025 16:33:09 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: wpIdentity</title>
		<dateCreated>Tue, 22 Aug 2023 14:20:51 GMT</dateCreated>
		<dateModified>Sat, 05 Jul 2025 16:33:09 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 5, 81, 115, 126, 128, 135, 138, 201</expansionState>
		<vertScrollState>110</vertScrollState>
		<windowTop>150</windowTop>
		<windowLeft>709</windowLeft>
		<windowBottom>1237</windowBottom>
		<windowRight>2287</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/wpidentity/">
			<outline text="worknotes.md" created="Sun, 18 Jun 2023 16:13:00 GMT">
				<outline text="#### 7/5/25; 10:11:12 AM by DW" created="Sat, 05 Jul 2025 14:11:11 GMT">
					<outline text="Add metadata to post, basically send through a few bits of info we have in the WordLand's draft object. " created="Sat, 05 Jul 2025 14:11:13 GMT"/>
					<outline text="The values we add to the metadata for the post:" created="Sat, 05 Jul 2025 16:19:37 GMT">
						<outline text="* wordland_apiVersion: the version number of the metadata we include, starting with 0.4.0 today."/>
						<outline text="* wordland_linksTo: the value of the item-level &lt;link&gt; element in WordLand's RSS feed for the site, if there is one, the empty string if not. It's used in linkblog posts. " created="Sat, 05 Jul 2025 16:23:01 GMT"/>
						<outline text="* wordland_idDraft: a unique id for this post in WordLand's database. It is only unique to this instance of the server. "/>
						<outline text="* wordland_markdowntext: WordLand stores the post in Markdown format. We like to include it along with the rendered text whenever we can, encouraging broader use of Markdown. "/>
						<outline text="* wordland_title: the title of the post, the empty string if the post doesn't have a title."/>
						</outline>
					<outline text="There are limits to where this works, I will try to find out exactly where that is. ;-)" created="Sat, 05 Jul 2025 16:26:25 GMT"/>
					</outline>
				<outline text="#### 5/11/25; 11:00:38 AM by DW" created="Sun, 11 May 2025 15:00:38 GMT">
					<outline text="A new endpoint to update a category: updateSiteCategory." created="Sun, 11 May 2025 15:00:39 GMT"/>
					</outline>
				<outline text="#### 5/4/25; 8:58:10 AM by DW" created="Sun, 04 May 2025 12:58:09 GMT">
					<outline text="in api2.js" created="Sun, 04 May 2025 13:11:15 GMT">
						<outline text="* When we startup do an initial websocket checkConnection after 1/10th second. " created="Sun, 04 May 2025 12:58:10 GMT"/>
						<outline text="* Then we check every 10 seconds." created="Sun, 04 May 2025 13:03:42 GMT"/>
						<outline text="* I didn't like the lag at startup, having to wait 10 secs before we start the connection." created="Sun, 04 May 2025 13:04:05 GMT"/>
						<outline text="* All the complexity is for when it doesn't work. What about when it does?" created="Sun, 04 May 2025 13:04:24 GMT"/>
						</outline>
					</outline>
				<outline text="#### 5/1/25; 4:43:06 PM by DW" created="Thu, 01 May 2025 20:43:05 GMT">
					<outline text="Rewrote wsConnectUserToServer in api2.js. It was retrying a failed connection once a second and never terminates. Now it tries once every ten seconds and gives up after 100 tries. I think this is still pretty generous and the number of tries could be reduced without giving up anything. " created="Thu, 01 May 2025 20:43:06 GMT"/>
					</outline>
				<outline text="#### 4/28/25; 9:02:20 AM by DW" created="Mon, 28 Apr 2025 13:02:19 GMT">
					<outline text="Rewrote the websocket code to use the &lt;a href=&quot;https://www.npmjs.com/package/ws&quot;&gt;ws package&lt;/a&gt; instead of the &quot;nodejs-websocket&quot;. As promised by all my chatbot ai friends, it fixed a big problem, and promises to work better with everything. Esp important for networking software. ;-)" created="Mon, 28 Apr 2025 15:27:08 GMT"/>
					<outline text="Fixed a problem in convertSite where the server would crash if it was converting a site that was not running on wordpress.com. The problem is that such sites don't contain an options object. " created="Mon, 28 Apr 2025 13:02:20 GMT"/>
					</outline>
				<outline text="#### 4/27/25; 4:57:44 PM by DW" created="Sun, 27 Apr 2025 20:57:43 GMT">
					<outline text="In webSocketStartup we watch for errors and report them." created="Sun, 27 Apr 2025 20:57:44 GMT"/>
					</outline>
				<outline text="#### 4/24/25; 5:45:59 PM by DW" created="Thu, 24 Apr 2025 21:45:59 GMT">
					<outline text="getSiteCategories now paginates, so if you have 300+ categories, we can handle it. " created="Thu, 24 Apr 2025 21:46:00 GMT"/>
					</outline>
				<outline text="#### 3/26/25; 9:49:16 AM by DW" created="Wed, 26 Mar 2025 13:49:16 GMT">
					<outline text="In uploadImage, check for idSite == &quot;undefined&quot; -- return an error, don't try to upload. " created="Wed, 26 Mar 2025 13:53:07 GMT"/>
					<outline text="But it's even worse than it appears. In api2.js, there is new code for my codebase for doing a POST using jQuery. And it hadn't been tested with errors returned from a POST operation. The bug in the new code was that it always reported &quot;error&quot; even though the server had returned a more meaningful message. It took me a while to look at the client. " created="Wed, 26 Mar 2025 14:21:28 GMT"/>
					</outline>
				<outline text="#### 3/24/25; 5:53:10 PM by DW" created="Mon, 24 Mar 2025 21:53:10 GMT">
					<outline text="We were adding posts and updating posts via HTTP GET and we have to use POST. Hit the limit today on a post I was updating. Made the switch. " created="Mon, 24 Mar 2025 22:01:40 GMT"/>
					</outline>
				<outline text="#### 3/17/25; 12:31:15 PM by DW" created="Mon, 17 Mar 2025 16:31:14 GMT">
					<outline text="Add urlAvatar, urlProfile to the user info record we return via the api." created="Mon, 17 Mar 2025 16:31:15 GMT"/>
					</outline>
				<outline text="#### 3/15/25; by DW" created="Sun, 16 Mar 2025 14:26:01 GMT">
					<outline text="New category endpoints -- wordpressaddcategory, wordpressdeletecategory." created="Sun, 16 Mar 2025 14:26:02 GMT"/>
					</outline>
				<outline text="#### 3/14/25; 10:27:39 AM by DW" created="Fri, 14 Mar 2025 14:27:36 GMT">
					<outline text="config.homePagetable lets you add macros to the home page for the site being served through the home page. " created="Fri, 14 Mar 2025 14:27:39 GMT"/>
					</outline>
				<outline text="#### 3/12/25; 10:07:45 AM by DW" created="Wed, 12 Mar 2025 14:07:44 GMT">
					<outline text="getUsername, as exported on the 10th, doesn't work -- and I never figured out why. instead i created a clone of callWithUsername that can be called by an app that includes wpIdentity, just as it can call it in its http-handling function. remarkably, it does work. i can now move on.  " created="Wed, 12 Mar 2025 14:07:45 GMT"/>
					</outline>
				<outline text="#### 3/10/25; 3:28:48 PM by DW" created="Mon, 10 Mar 2025 19:28:47 GMT">
					<outline text="Exporting getUsername function, it's needed in writersweb. It could have worked with getUserInfo, which is already exported, but we have a cache on getUsername, and rather than replicate the functionality at a higher level, it's best to export it." created="Mon, 10 Mar 2025 19:28:49 GMT"/>
					</outline>
				<outline text="#### 3/9/25; 1:00:40 PM by DW" created="Sun, 09 Mar 2025 17:00:40 GMT">
					<outline text="Update in api2.js. this.getUserInfo assumed that the server had already been called to ask for it, and cached it in wordpressMemory, and that's true in WordLand, but not true in a new app I'm working on. So we have to account for that possibility, and be ready to call the server if it isn't initialized. Fairly sure there's no chance of breakage, because we're just replacing undefined with actual data. " created="Sun, 09 Mar 2025 17:00:41 GMT"/>
					</outline>
				<outline text="#### 3/7/25; 4:18:02 PM by DW" created="Fri, 07 Mar 2025 21:18:01 GMT">
					<outline text="I want to be able to bake wpidentity into an app, starting with writersweb. " created="Fri, 07 Mar 2025 21:18:02 GMT">
						<outline text="1. I will need to call it's httpRequest handler, which is exported, so that's cool." created="Fri, 07 Mar 2025 21:18:54 GMT"/>
						<outline text="2. I will need to be able to get information about a user, providing a token and getting back a struct. " created="Fri, 07 Mar 2025 21:19:16 GMT"/>
						</outline>
					<outline text="Both these functions are already exported. Hmm. " created="Fri, 07 Mar 2025 21:20:24 GMT"/>
					</outline>
				<outline text="#### 2/26/25; 9:49:12 AM by DW" created="Wed, 26 Feb 2025 14:49:12 GMT">
					<outline text="Adding a users table. I want to be able to gather metadata, right now I want to know what browsers people are using, so I know how important it is to get it working in each browser. Apparently there are problems in some versions of Safari, but I only have gotten one report. I need to see what's actually going on, and to have a way to gather other data. " created="Wed, 26 Feb 2025 14:49:13 GMT"/>
					<outline text="See countUserHit function." created="Wed, 26 Feb 2025 15:59:55 GMT"/>
					<outline text="The users table is documented on the &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/docs/storage.md&quot;&gt;docs/storage.md page&lt;/a&gt;." created="Wed, 26 Feb 2025 16:02:59 GMT"/>
					</outline>
				<outline text="#### 2/24/25; 9:26:16 AM by DW" created="Mon, 24 Feb 2025 14:26:16 GMT">
					<outline text="I want separate events for addPost and updatePost operations. " created="Mon, 24 Feb 2025 14:26:17 GMT">
						<outline text="* Previously we were using &quot;publish&quot; for both events. So instead of calling both &quot;publish&quot; we'll just use the names of the functions that implement them." created="Mon, 24 Feb 2025 14:34:55 GMT"/>
						<outline text="* Also want the title of the post to be included with both events. " created="Mon, 24 Feb 2025 14:34:56 GMT"/>
						</outline>
					</outline>
				<outline text="#### 2/23/25; 12:38:27 PM by DW" created="Sun, 23 Feb 2025 17:38:26 GMT">
					<outline text="We now log publish operations. " created="Sun, 23 Feb 2025 17:38:28 GMT"/>
					</outline>
				<outline text="#### 2/22/25; 9:08:07 AM by DW" created="Sat, 22 Feb 2025 14:08:07 GMT">
					<outline text="In readUserFile, we need to send a clear message back to the caller if the file they're looking for simply doesn't exist. That is not actually an error here, it happens with bookmarks.opml the first time a user signs on to WordLand. The change is in readUserFile." created="Sat, 22 Feb 2025 14:08:09 GMT"/>
					</outline>
				<outline text="#### 1/24/25; 8:36:53 AM by DW" created="Fri, 24 Jan 2025 13:36:52 GMT">
					<outline text="If a user has a deleted WordPress website, convertSite will crash, trying to create a data structure for it. " created="Fri, 24 Jan 2025 13:36:53 GMT"/>
					<outline text="Changes in getUserSites and convertSite. " created="Fri, 24 Jan 2025 13:46:26 GMT"/>
					</outline>
				<outline text="#### 12/23/24; 5:22:22 PM by DW" created="Mon, 23 Dec 2024 22:22:21 GMT">
					<outline text="New call -- wordpressgettopusers, returns an array of the top users ranked by number of times their WordLand prefs.json file has been read, which happens when you first load the app. It doesn't measure activity, ie editing and publishing. " created="Mon, 23 Dec 2024 22:22:22 GMT"/>
					</outline>
				<outline text="#### 12/23/24; 12:07:10 PM by DW" created="Mon, 23 Dec 2024 17:07:09 GMT">
					<outline text="The demo app was broken in several ways. It now works properly." created="Mon, 23 Dec 2024 17:07:10 GMT">
						<outline text="* Setting serverAddress and urlChatLogSocket correctly at startup, don't depend on defaults in api2.js." created="Mon, 23 Dec 2024 17:07:16 GMT"/>
						<outline text="* logOffWordpress was missing." created="Mon, 23 Dec 2024 17:12:19 GMT"/>
						<outline text="* viewing the site list was broken because we weren't waiting for the site list to load in myWordpress.startup. Fixed it by reading the site list from the server when displaying the site list. I understand why I didn't want it to wait at startup, it's not something WordLand needs to display until the user asks to see the site list." created="Mon, 23 Dec 2024 17:26:34 GMT"/>
						<outline text="* startTestPrefs call was commented out, uncommented, set number of tests to 5 instead of 60. " created="Mon, 23 Dec 2024 17:28:10 GMT"/>
						<outline text="* There was a problem in saving prefs, something we had fixed in WordLand but the update had not made it into the demo app. " created="Mon, 23 Dec 2024 17:52:42 GMT"/>
						</outline>
					<outline text="Hopefully from this point forward there will be no more breakage. We've got a good debugged app, WordLand, and it has to remain unbroken from here-out, so that bodes well, we hope, ymmv, ianal, mmlm. :-)" created="Mon, 23 Dec 2024 17:53:07 GMT"/>
					</outline>
				<outline text="#### 12/21/24; 11:47:17 AM by DW" created="Sat, 21 Dec 2024 16:47:16 GMT">
					<outline text="Add a log table using my new &lt;a href=&quot;https://github.com/scripting/sqlLog&quot;&gt;sqlLog&lt;/a&gt; package." created="Sat, 21 Dec 2024 16:47:18 GMT"/>
					<outline text="Added config.flLogInstalled, default false. If false we won't call the log package, it should be false if you haven't created a log table in your sql database." created="Sun, 22 Dec 2024 14:52:28 GMT"/>
					<outline text="Now let's add some logging code" created="Sun, 22 Dec 2024 14:30:26 GMT">
						<outline text="* on startup, log config.urlServer" created="Sun, 22 Dec 2024 14:30:52 GMT"/>
						<outline text="* on websocket connect, log username" created="Sun, 22 Dec 2024 14:51:28 GMT"/>
						</outline>
					<outline text="Initially I had logging in writeWholeFile but decided this was too much (for now). " created="Sun, 22 Dec 2024 14:51:41 GMT"/>
					<outline text="May also want to add one for every http request, makes more sense, would require a slight rewrite so we could log the username making the request. " created="Sun, 22 Dec 2024 14:51:58 GMT"/>
					</outline>
				<outline text="#### 11/18/24; 11:34:35 AM by DW" created="Mon, 18 Nov 2024 16:34:34 GMT">
					<outline text="Turned off config.flConvertImagesToGutenberg." created="Mon, 18 Nov 2024 16:34:35 GMT"/>
					<outline text="From the GitHub thread, there's a little bit left to do, but they're going to try to account for images in plain HTML, so let's see how that goes. " created="Mon, 18 Nov 2024 16:34:40 GMT"/>
					<outline text="Basically we have to get the image id to agree with WordPress's idea of what its ID is. " created="Mon, 18 Nov 2024 16:35:15 GMT"/>
					<outline text="Really have to find and read the docs to be sure I understand how it should work." created="Mon, 18 Nov 2024 16:35:36 GMT"/>
					</outline>
				<outline text="#### 11/18/24; 10:23:32 AM by DW" created="Mon, 18 Nov 2024 15:23:32 GMT">
					<outline text="Read authorizedAccounts every minute from the file." created="Mon, 18 Nov 2024 15:23:33 GMT"/>
					<outline text="New config value -- config.authorizedAccountsPath." created="Mon, 18 Nov 2024 15:24:06 GMT"/>
					<outline text="Read the file it points to once a minute, if it exists, we replace config.authorizedAccounts with the JSON structure in the file." created="Mon, 18 Nov 2024 15:37:23 GMT"/>
					<outline text="Makes it so you don't have to reboot to add an authorized user, just edit the contents of the file." created="Mon, 18 Nov 2024 15:37:54 GMT"/>
					<outline text="If there's an error parsing the file, we display the error on the console, so if you make a mistake you see it in the log right away." created="Mon, 18 Nov 2024 15:38:10 GMT"/>
					<outline text="Look in readAuthorizedAccounts." created="Mon, 18 Nov 2024 15:39:49 GMT"/>
					</outline>
				<outline text="#### 11/13/24; 8:32:46 AM by DW" created="Wed, 13 Nov 2024 13:32:46 GMT">
					<outline text="It took three full days to get uploading images to work. A lot of trial and error and guesswork, but the code works now, and today I'm going to clean it up and move on to other things, hopefully." created="Wed, 13 Nov 2024 13:32:47 GMT"/>
					<outline text="Note that because we also provide an API that runs in the browser, no one will have to go through this to get functional code, the problem is solved at least for this context. " created="Wed, 13 Nov 2024 13:33:57 GMT"/>
					</outline>
				<outline text="#### 11/10/24; 12:29:58 PM by DW" created="Sun, 10 Nov 2024 17:29:57 GMT">
					<outline text="Uploading images." created="Sun, 10 Nov 2024 17:29:58 GMT"/>
					</outline>
				<outline text="#### 11/1/24; 10:35:37 AM by DW" created="Sun, 03 Nov 2024 14:34:32 GMT">
					<outline text="Added support for the nextPrevArray used to implement the arrows in WordLand. See getNextPrevArray." created="Sun, 03 Nov 2024 14:34:33 GMT"/>
					<outline text="Released v0.5.5." created="Sun, 03 Nov 2024 15:38:28 GMT"/>
					</outline>
				<outline text="#### 10/31/24; 7:03:56 PM by DW" created="Thu, 31 Oct 2024 23:03:55 GMT">
					<outline text="Increase the default config.maxCtDrafts to 1000. Previously it was 100. I'm hitting that limit when I rebuild the Bookmarks menu or backup my drafts. I don't know if we can have a limit, unless we have a limit of drafts for non-paying users. That comes later. " created="Thu, 31 Oct 2024 23:03:56 GMT"/>
					<outline text="Also changed the default value for options.maxCtUserDraftFiles in api2.j to 1000 to agree. This is passed as a parameter to the server. " created="Thu, 31 Oct 2024 23:08:39 GMT"/>
					</outline>
				<outline text="#### 10/26/24; 9:15:57 AM by DW" created="Sat, 26 Oct 2024 13:15:56 GMT">
					<outline text="Fixed a startup problem for new users. In getRecentUserDrafts we were getting the most recent drafts for all users, but we must restrict it to the user. " created="Sat, 26 Oct 2024 13:15:57 GMT"/>
					</outline>
				<outline text="#### 10/24/24; 9:19:50 AM by DW" created="Thu, 24 Oct 2024 13:19:50 GMT">
					<outline text="whitelist -- so we can start testing with a limited group of users." created="Thu, 24 Oct 2024 13:19:51 GMT">
						<outline text="* two new config values: config.flUseWhitelist, a boolean default false, authorizedAccounts, an array of usernames who are authorized, default empty array." created="Thu, 24 Oct 2024 13:21:53 GMT"/>
						<outline text="* first version, we just add a new api call that allows you to find out if the user is whitelisted. it returns true if the whitelist is not enabled, otherwise search the authorizedAccounts list." created="Thu, 24 Oct 2024 13:46:25 GMT"/>
						<outline text="* core function isUserWhitelisted, also in the api2.js." created="Thu, 24 Oct 2024 14:18:34 GMT"/>
						</outline>
					</outline>
				<outline text="#### 10/21/24; 10:04:54 AM by DW" created="Mon, 21 Oct 2024 14:04:53 GMT">
					<outline text="More categories work." created="Mon, 21 Oct 2024 14:04:54 GMT">
						<outline text="* We weren't transmitting the categories back to wordpress when creating or updating a wordpress post. " created="Mon, 21 Oct 2024 14:05:00 GMT"/>
						<outline text="* When asked for a list of categories for a site, do not include &quot;uncategorized.&quot; It's not something the user can choose, nor should they be concerned about it. Not sure what they intended us to do here, but we have to work around it in every instance, so we might as well cut it out at the beginning. " created="Mon, 21 Oct 2024 15:33:55 GMT"/>
						</outline>
					</outline>
				<outline text="#### 10/20/24; 10:38:13 AM by DW" created="Sun, 20 Oct 2024 14:38:12 GMT">
					<outline text="adding support for categories." created="Sun, 20 Oct 2024 14:38:13 GMT"/>
					<outline text="convertCategory converts a category from WP format to our API's format." created="Sun, 20 Oct 2024 14:38:29 GMT"/>
					</outline>
				<outline text="#### 10/17/24; 12:30:49 PM by DW" created="Thu, 17 Oct 2024 16:30:48 GMT">
					<outline text="Fixed a bug in readDraft, it would crash if the draft didn't exist. " created="Thu, 17 Oct 2024 16:30:49 GMT"/>
					</outline>
				<outline text="#### 10/12/24; 10:06:11 AM by DW" created="Sat, 12 Oct 2024 14:06:11 GMT">
					<outline text="Going to start posting worknotes here again." created="Sat, 12 Oct 2024 14:06:12 GMT"/>
					<outline text="How to debug this locally. This is what I always forget how to do so I'm documenting it somewhere I think I'll look for the info. If only I could tell ChatGPT to remember this for me. Someday soon of course. ;-) " created="Sat, 12 Oct 2024 14:06:30 GMT">
						<outline text="1. Create localStorage.wordpressMemory in the JS debugger on the client machine you're using for testing." created="Sat, 12 Oct 2024 14:07:07 GMT"/>
						<outline text="2. One value must be set -- accessToken -- which you should copy from a client system you're using to access the app." created="Sat, 12 Oct 2024 14:07:30 GMT">
							<outline text="* localStorage.wordpressMemory = {&quot;accessToken&quot;: &quot;asdfasdfasdfsf&quot;}" created="Sat, 12 Oct 2024 14:08:56 GMT"/>
							</outline>
						<outline text="3. You should start with a working config.json from the server, and modify it to correspond to the local equivalents. " created="Sat, 12 Oct 2024 14:09:56 GMT"/>
						</outline>
					<outline text="Changing type of &lt;i&gt;filecontents&lt;/i&gt; column from text to longtext. " created="Sat, 12 Oct 2024 16:28:38 GMT">
						<outline text="* alter table wpstorage modify column filecontents longtext;"/>
						<outline text="* one of the RSS feeds we generate got too big for a text, ie 64K." created="Sat, 12 Oct 2024 16:29:19 GMT"/>
						</outline>
					</outline>
				<outline text="#### 5/25/24; 10:36:42 AM by DW" created="Sat, 25 May 2024 14:36:42 GMT">
					<outline text="Added websockets support and goodnight kisses. " created="Sat, 25 May 2024 14:36:43 GMT"/>
					</outline>
				<outline text="#### 5/17/24; 4:55:01 PM by DW" created="Fri, 17 May 2024 20:55:00 GMT">
					<outline text="Added a whenPublished property to the struct returned by addPost and updatePost. " created="Fri, 17 May 2024 20:55:01 GMT"/>
					</outline>
				<outline text="#### 5/13/24; 9:38:56 AM by DW" created="Mon, 13 May 2024 13:38:55 GMT">
					<outline text="Changed the name of the project from wordpressIdentity to wpIdentity, so it agrees with the name of the NPM package. " created="Mon, 13 May 2024 13:38:56 GMT"/>
					<outline text="Fixed a bug in the glossary code, we were failing if there is no glossary.json file for the user. But it's okay to not have a glossary." created="Mon, 13 May 2024 14:14:16 GMT"/>
					</outline>
				<outline text="#### 5/12/24; 9:02:36 AM by DW" created="Sun, 12 May 2024 13:02:35 GMT">
					<outline text="new entrypoint -- writeUniqueFile, explained in a comment at the head of the function in source.opml" created="Sun, 12 May 2024 13:02:36 GMT">
						<outline text="writeWholeFile is the general-purpose routine, this is for files that can only have one instance per path/type/etc" created="Fri, 05 Apr 2024 16:31:36 GMT"/>
						<outline text="examples include the user's prefs.json file for a specific app, or the user's glossary.json file. " created="Sun, 12 May 2024 12:47:26 GMT"/>
						<outline text="these files are a lot simpler to work with than the draft.json files." created="Sun, 12 May 2024 12:47:53 GMT"/>
						<outline text="we could manage these files ourselves at a higher level, but that would mean we would have to remember the id of the glossary.json file, in order to save it." created="Sun, 12 May 2024 12:48:09 GMT"/>
						<outline text="it's simpler to just provide a new entrypoint for these files that finds the id before writing it, the info is after all, in the database. ;-)" created="Sun, 12 May 2024 12:48:48 GMT"/>
						<outline text="this could be done on the client, but that means two round trips for the data. this is a little more efficient. " created="Sun, 12 May 2024 12:58:22 GMT"/>
						</outline>
					</outline>
				<outline text="#### 5/10/24; 8:53:59 AM by DW" created="Fri, 10 May 2024 12:53:58 GMT">
					<outline text="Adding an &quot;id&quot; column to the database, and changing the queries accordingly." created="Fri, 10 May 2024 12:53:59 GMT"/>
					<outline text="I believe things will work much better with this approach, basically one row in the database can transition from being a draft to being published without moving. It'll keep the same id. That means you will be able to have more than one unpublished draft. I expect there will be other flexibilities. " created="Fri, 10 May 2024 12:54:29 GMT"/>
					<outline text="The id is the key." created="Fri, 10 May 2024 12:55:35 GMT"/>
					</outline>
				<outline text="#### 5/9/24; 11:01:19 AM by DW" created="Thu, 09 May 2024 15:01:18 GMT">
					<outline text="I finally got to the bottom of the problem with http post returning. I'm going to fix it, and probably should eventually visit all the code that uses davehttp, because I have replicated the problem far and wide." created="Thu, 09 May 2024 15:01:19 GMT"/>
					<outline text="First, the code I use to call the server uses jQuery in such a way that errors are not reported. If we were seeing the errors we would have been able to find this much more quickly. I'm fixed it in api2.js here. " created="Thu, 09 May 2024 15:02:14 GMT"/>
					<outline text="Second, the server returns the wrong type in returnData in wpidentity.js. It was returning &quot;application/javascript&quot; and should have been returning &quot;text/json&quot;." created="Thu, 09 May 2024 15:03:01 GMT"/>
					</outline>
				<outline text="#### 4/30/24; 10:43:14 AM by DW" created="Tue, 30 Apr 2024 14:43:14 GMT">
					<outline text="Add param to getRecentUserDrafts to let the caller restrict returns to a specific site. Useful for building feeds. " created="Tue, 30 Apr 2024 14:43:15 GMT"/>
					<outline text="If config.flServePublicUserFiles is true, we will serve files from user storage database." created="Tue, 30 Apr 2024 14:44:25 GMT"/>
					</outline>
				<outline text="#### 4/29/24; 12:12:53 PM by DW" created="Mon, 29 Apr 2024 16:12:53 GMT">
					<outline text="Update: Changed the way this works, the RSS is generated in the app, and we keep it here in user storage. Eventually public files will be availble via HTTP." created="Mon, 29 Apr 2024 20:18:30 GMT">
						<outline text="* Start work on RSS feed for each user." created="Mon, 29 Apr 2024 16:12:53 GMT"/>
						<outline text="* My feed would be at https://word.social/feed?username=scripting" created="Mon, 29 Apr 2024 16:13:05 GMT"/>
						<outline text="* I checked that FeedLand doesn't have a call for /feed. If it did, we would consume it before it saw it. " created="Mon, 29 Apr 2024 16:13:46 GMT"/>
						</outline>
					</outline>
				<outline text="#### 4/27/24; 10:02:23 AM by DW" created="Sat, 27 Apr 2024 14:02:23 GMT">
					<outline text="New call --  /wordpressgetrecentuserdrafts." created="Sat, 27 Apr 2024 14:02:24 GMT"/>
					</outline>
				<outline text="#### 4/26/24; 10:06:14 AM by DW" created="Fri, 26 Apr 2024 14:06:13 GMT">
					<outline text="The problem with POST was that it works, but we're not getting any returned data. For the application we have right now that's not a deal-stopper. But it will have to be fixed. " created="Fri, 26 Apr 2024 14:06:14 GMT"/>
					<outline text="See note in WORD worknotes for today for explanation with glossary." created="Fri, 26 Apr 2024 14:06:57 GMT"/>
					</outline>
				<outline text="#### 4/18/24; 5:29:13 PM by DW" created="Thu, 18 Apr 2024 21:29:13 GMT">
					<outline text="Markdown processing as we save to WordPress. " created="Thu, 18 Apr 2024 21:29:14 GMT"/>
					<outline text="Look in processPostText." created="Thu, 18 Apr 2024 21:33:40 GMT"/>
					</outline>
				<outline text="#### 4/15/24; 12:05:13 PM by DW" created="Mon, 15 Apr 2024 16:05:12 GMT">
					<outline text="Process emoji shortcodes. " created="Mon, 15 Apr 2024 16:05:13 GMT"/>
					</outline>
				<outline text="#### 4/13/24; 1:41:39 PM by DW" created="Sat, 13 Apr 2024 17:41:39 GMT">
					<outline text="By handling &quot;/&quot; in our handleHttpRequest function, we broke FeedLand." created="Sat, 13 Apr 2024 17:41:39 GMT"/>
					<outline text="I completely forgot that FeedLand includes this package, and that all HTTP requests go through it first, before anyone else gets it." created="Sat, 13 Apr 2024 17:42:05 GMT"/>
					<outline text="In that context it was meant to only handle authorization events, it certainly wasn't meant to handle requests for the home page." created="Sat, 13 Apr 2024 17:42:27 GMT"/>
					<outline text="Imagine my surprise when I went to feedland.social and was greeted by the home page text of an app that is not released. Oy." created="Sat, 13 Apr 2024 17:43:03 GMT"/>
					<outline text="So what's the fix? " created="Sat, 13 Apr 2024 17:43:35 GMT"/>
					<outline text="The first thing to do is a new release with the code that handles &quot;/&quot; commented out. " created="Sat, 13 Apr 2024 17:47:20 GMT"/>
					<outline text="Now the fix the other way --" created="Sat, 13 Apr 2024 18:22:21 GMT">
						<outline text="take the default values of urlServer and urlServerHomePageSource out of config, in wpidentity.js, below" created="Sat, 13 Apr 2024 18:22:26 GMT"/>
						<outline text="if you want us to handle &quot;/&quot; for the app, set urlServerHomePageSource in your config.json file for your app" created="Sat, 13 Apr 2024 18:22:51 GMT"/>
						</outline>
					<outline text="Renamed these" created="Sat, 13 Apr 2024 18:30:09 GMT">
						<outline text="deletefile ==&gt; wordpressdeletefile" created="Sat, 13 Apr 2024 18:30:16 GMT"/>
						<outline text="readwholefile ==&gt; wordpressreadwholefile" created="Sat, 13 Apr 2024 18:30:25 GMT"/>
						<outline text="writewholefile ==&gt; wordpresswritewholefile" created="Sat, 13 Apr 2024 18:30:28 GMT"/>
						</outline>
					</outline>
				<outline text="#### 4/12/24; 12:12:29 PM by DW" created="Thu, 11 Apr 2024 15:29:15 GMT">
					<outline text="#### Put the API into a wrapper, so it's easy to spot the WordPress calls in client code. " created="Thu, 11 Apr 2024 15:29:16 GMT">
						<outline text="Left the original not-wrapped api file in place, it's used in FeedLand and possibly other places." created="Fri, 12 Apr 2024 15:06:53 GMT"/>
						<outline text="The new api is in api2.js. Yes, I hate that too, but I don't see another way to do it. ;-)" created="Fri, 12 Apr 2024 15:07:13 GMT"/>
						</outline>
					<outline text="#### Got wpidentity.scripting.com running again. " created="Thu, 11 Apr 2024 16:19:38 GMT"/>
					<outline text="#### Wrote code for storage" created="Fri, 12 Apr 2024 16:11:05 GMT">
						<outline text="The demo app maintains a file for each user called demo/prefs.json." created="Fri, 12 Apr 2024 16:11:22 GMT"/>
						<outline text="Just three values in it, a count, a date, and a slogan. Updated every minute. " created="Fri, 12 Apr 2024 16:11:39 GMT"/>
						</outline>
					</outline>
				<outline text="#### 3/28/24; 11:36:57 AM by DW" created="Thu, 28 Mar 2024 15:36:56 GMT">
					<outline text="#### re writeUserDataFile below.." created="Thu, 28 Mar 2024 15:43:31 GMT">
						<outline text="I couldn't get anything back from the server via POST, so I'm trying GET. " created="Thu, 28 Mar 2024 15:36:58 GMT"/>
						<outline text="It worked. I've been over it on both ends, can't see any difference between it and daveappserver which is what we use in feedland and drummer. " created="Thu, 28 Mar 2024 15:42:21 GMT"/>
						<outline text="So I'm just going to continue with calling GET, and trust that the next person to pass this way will figure out what I did wrong. ;-)" created="Thu, 28 Mar 2024 15:42:46 GMT"/>
						</outline>
					</outline>
				<outline text="#### 3/25/24; 10:08:19 AM by DW" created="Mon, 25 Mar 2024 14:08:19 GMT">
					<outline text="Add a cache for usernames." created="Mon, 25 Mar 2024 14:08:19 GMT"/>
					</outline>
				<outline text="#### 3/24/24; 10:55:17 AM by DW" created="Sun, 24 Mar 2024 14:55:16 GMT">
					<outline text="Moved these notes to docs/storage.md." created="Fri, 12 Apr 2024 16:26:23 GMT"/>
					</outline>
				<outline text="#### 3/23/24; 7:30:58 PM by DW" created="Sat, 23 Mar 2024 23:30:58 GMT">
					<outline text="Export getUserInfo, which takes an accessToken and calls back with user info." created="Sat, 23 Mar 2024 23:30:58 GMT"/>
					</outline>
				<outline text="#### 10/31/23; 10:25:25 AM by DW" created="Wed, 01 Nov 2023 14:25:22 GMT">
					<outline text="Allow the caller to handle wordpress login." created="Wed, 01 Nov 2023 14:25:32 GMT"/>
					</outline>
				<outline text="#### 9/14/23; 8:28:29 AM by DW" created="Thu, 14 Sep 2023 12:28:29 GMT">
					<outline text="I wanted to set categories for posts via addPost and updatePost, but found the categories have to already exist before using them, it's not as low-tech as I imagined. So for now we'll have to punt on setting categories through these calls." created="Thu, 14 Sep 2023 12:28:30 GMT"/>
					</outline>
				<outline text="#### 9/13/23; 12:56:32 PM by DW" created="Wed, 13 Sep 2023 16:56:27 GMT">
					<outline text="We now summarize the various types: site, post, user, mediaobject, etc to a simpler package as we have done with other apps." created="Wed, 13 Sep 2023 16:56:33 GMT"/>
					<outline text="Now we have a proper foundation to build on for scripting in Drummer. " created="Wed, 13 Sep 2023 16:57:27 GMT"/>
					</outline>
				<outline text="#### 9/11/23; 12:05:47 PM by DW" created="Mon, 11 Sep 2023 16:05:47 GMT">
					<outline text="When calling back to the app, instead of calling the parameter accesstoken, call it wordpressaccesstoken, to distinguish it from other apps, such as github. " created="Mon, 11 Sep 2023 16:05:47 GMT"/>
					</outline>
				<outline text="#### 9/10/23; 1:02:07 PM by DW" created="Sun, 10 Sep 2023 17:02:05 GMT">
					<outline text="Getting ready to include this in daveappserver. " created="Sun, 10 Sep 2023 17:02:08 GMT"/>
					<outline text="The HTTP requests should all have &quot;wordpress&quot; in their names. " created="Sun, 10 Sep 2023 17:02:18 GMT"/>
					<outline text="Should be able to get by with changes only in this project, because the api.js code is here. " created="Sun, 10 Sep 2023 17:02:35 GMT"/>
					</outline>
				<outline text="#### 9/5/23; 10:26:37 AM by DW" created="Tue, 05 Sep 2023 14:26:35 GMT">
					<outline text="Turned into a package so I can include it in other apps, probably FeedLand and Drummer." created="Tue, 05 Sep 2023 14:26:37 GMT"/>
					<outline text="Rewrite the readme.md file for this repo to put the whole thing to bed and get ready for the next thing." created="Tue, 05 Sep 2023 15:29:29 GMT"/>
					</outline>
				<outline text="#### 9/5/23; 9:25:58 AM by DW" created="Tue, 05 Sep 2023 13:25:58 GMT">
					<outline text="New functions to delete a post and get the user's subscriptions. " created="Tue, 05 Sep 2023 13:25:59 GMT"/>
					</outline>
				<outline text="#### 9/4/23; 5:33:32 PM by DW" created="Mon, 04 Sep 2023 21:33:27 GMT">
					<outline text="If you pass a &lt;i&gt;urlapphomepage&lt;/i&gt; parameter to the /connect call, we'll redirect back to that url instead of the default." created="Mon, 04 Sep 2023 21:33:32 GMT"/>
					<outline text="This means that one wpidentity server can support lots of apps. " created="Mon, 04 Sep 2023 21:34:15 GMT"/>
					</outline>
				<outline text="#### 9/3/23; 10:16:21 AM by DW" created="Sun, 03 Sep 2023 14:16:20 GMT">
					<outline text="I took a detour to build a &quot;blog browser&quot; based on the client app here, which was not intended to be anything so robust, it's just meant to be example code." created="Sun, 03 Sep 2023 14:16:21 GMT"/>
					<outline text="So I split it off into its own project, and refocused the client app here to its much more humble beginnings. " created="Sun, 03 Sep 2023 14:17:04 GMT"/>
					</outline>
				<outline text="#### 8/29/23; 12:14:59 PM by DW" created="Tue, 29 Aug 2023 16:14:56 GMT">
					<outline text="More verbs" created="Tue, 29 Aug 2023 16:15:00 GMT">
						<outline text="testGetSiteInfo (9969399)" created="Tue, 29 Aug 2023 16:15:04 GMT"/>
						<outline text="testGetSiteMedialist (9969399)" created="Tue, 29 Aug 2023 16:15:04 GMT"/>
						<outline text="testAddPost (9969399) -- this is the biggie of course, and it &lt;a href=&quot;https://unberkeley.wordpress.com/2023/08/29/so-youd-like-a-test-post-2/&quot;&gt;worked&lt;/a&gt; the first time. ;-)" created="Tue, 29 Aug 2023 17:03:11 GMT"/>
						<outline text="testUpdatePost (9969399, 4594) -- and this works too, changes the content without touching the title and other properties."/>
						</outline>
					</outline>
				<outline text="#### 8/28/23; 7:45:13 PM by DW" created="Mon, 28 Aug 2023 22:49:42 GMT">
					<outline text="Let's add some verbs." created="Mon, 28 Aug 2023 22:49:44 GMT"/>
					<outline text="The docs we need are here." created="Mon, 28 Aug 2023 22:49:48 GMT">
						<outline text="https://github.com/Automattic/wp-calypso/tree/trunk/packages/wpcom.js" created="Mon, 28 Aug 2023 22:49:54 GMT"/>
						</outline>
					<outline text="This is how you get the info about a post. Type this into the client console.." created="Mon, 28 Aug 2023 23:43:51 GMT">
						<outline text="testGetPost (9969399, 4588)" created="Mon, 28 Aug 2023 23:44:00 GMT"/>
						</outline>
					<outline text="The verbs I just implemented --" created="Mon, 28 Aug 2023 23:44:07 GMT">
						<outline text="getSitePosts (token, params.idsite, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
						<outline text="getSiteUsers (token, params.idsite, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
						<outline text="getPost (token, params.idsite, params.idpost, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
						</outline>
					</outline>
				<outline text="#### 8/28/23; 10:59:21 AM by DW" created="Mon, 28 Aug 2023 14:59:20 GMT">
					<outline text="No server changes. On the client, we now &lt;a href=&quot;https://imgs.scripting.com/2023/08/28/sitelist.png&quot;&gt;display a list&lt;/a&gt; of your sites with creation and modification dates after you sign on. " created="Mon, 28 Aug 2023 16:38:00 GMT"/>
					</outline>
				<outline text="#### 8/27/23; 10:17:33 AM by DW" created="Sat, 26 Aug 2023 22:00:21 GMT">
					<outline text="Now I &lt;i&gt;really really&lt;/i&gt; have it working. :smile: " created="Sat, 26 Aug 2023 18:18:40 GMT"/>
					<outline text="After getting getUserInfo to work, I thought let's quickly test getting a list of user sites, but that didn't work because i didn't get a powerful enough token. That led me back to the authentication docs, and i don't see anything there about scopes. So now I'm back to zero, I have to find docs. I consulted ChatGPT of course. " created="Sun, 27 Aug 2023 14:15:55 GMT"/>
					<outline text="And then I found these docs, which were *exactly* what I needed. " created="Sun, 27 Aug 2023 14:15:55 GMT">
						<outline text="https://developer.wordpress.com/docs/oauth2/" created="Sun, 27 Aug 2023 14:15:56 GMT"/>
						<outline text="https://github.com/Automattic/wp-calypso/tree/trunk/packages/wpcom.js/docs" created="Sun, 27 Aug 2023 15:41:19 GMT"/>
						</outline>
					<outline text="If you're trying to figure out how the wordpress.com api works, this is the place to start. "/>
					<outline text="Added a new config value -- config.scopes, defaults to &quot;global&quot;. With that I was able to define the /getusersites endpoint. And it works. This is a big part of what I was trying to get to." created="Sun, 27 Aug 2023 14:55:24 GMT"/>
					<outline text="Run the &lt;a href=&quot;http://scripting.com/code/wpidentity/client/&quot;&gt;example client&lt;/a&gt; and if you're already signed in, sign out and in again to get the more powerful token and in the JavaScript console enter: " created="Sun, 27 Aug 2023 14:57:32 GMT">
						<outline text="&lt;code&gt;testGetUserSites ()&lt;/code&gt;"/>
						</outline>
					<outline text="You get a lot of data for that request. In the next iteration I hope to provide a way to browse it. " created="Sun, 27 Aug 2023 15:18:11 GMT"/>
					</outline>
				<outline text="#### 8/26/23; 12:14:10 PM by DW" created="Sat, 26 Aug 2023 16:14:07 GMT">
					<outline text="Now I &lt;i&gt;really&lt;/i&gt; have it working. :smile: " created="Sat, 26 Aug 2023 18:18:40 GMT"/>
					<outline text="What I didn't know about the last version is that the accessToken was getting mangled by URL-encoding it. " created="Sat, 26 Aug 2023 18:18:49 GMT"/>
					<outline text="I hadn't actually used the accessToken until today and when I did, I got an error from wordpress.com saying that it wasn't a valid token. " created="Sat, 26 Aug 2023 18:19:40 GMT"/>
					<outline text="After some thought and working it out with ChatGPT (my virtual programming partner, &lt;a href=&quot;https://chat.openai.com/share/7ecef75d-7fb4-475c-940e-7834258da3e5&quot;&gt;transcript included&lt;/a&gt;) I send the token back and forth by base64-ing, and url-safing it, and only doing it via HTTPS. And it works. I got a nice structure of information about me back from the server. " created="Sat, 26 Aug 2023 18:20:11 GMT"/>
					<outline text="Next session I'm going to try getting a list of my blogs, and then a list of posts, etc. The model here is the davetwitter package I build all my apps on. Not going to go nearly as far, at least not at first, but enough so that I can do a nice little editor for WordPress writing. " created="Sat, 26 Aug 2023 18:21:44 GMT"/>
					<outline text="To test, go to the &lt;a href=&quot;http://scripting.com/code/wpidentity/client/&quot;&gt;client test page&lt;/a&gt;. Sign in, then open the JavaScript console and type: " created="Sat, 26 Aug 2023 18:23:08 GMT">
						<outline text="&lt;code&gt;testGetUserInfo ()&lt;/code&gt;"/>
						</outline>
					<outline text="If it worked you should see some info about yourself. If it didn't please report an &lt;a href=&quot;https://github.com/scripting/wordpressIdentity/issues&quot;&gt;issue&lt;/a&gt;. " created="Sat, 26 Aug 2023 18:24:12 GMT"/>
					</outline>
				<outline text="#### 8/22/23; 10:21:35 AM by DW" created="Sat, 12 Aug 2023 22:34:42 GMT">
					<outline text="Started." created="Sat, 12 Aug 2023 22:34:44 GMT"/>
					<outline text="A8C docs are here -- " created="Sat, 26 Aug 2023 16:14:11 GMT">
						<outline text="https://developer.wordpress.com/docs/wpcc/" created="Sat, 26 Aug 2023 16:14:25 GMT"/>
						</outline>
					<outline text="A8C examples --" created="Sat, 26 Aug 2023 16:18:18 GMT">
						<outline text="https://github.com/Automattic/wpcom-connect-examples" created="Sat, 26 Aug 2023 16:18:22 GMT"/>
						</outline>
					<outline text="WPCOM docs --" created="Sun, 27 Aug 2023 14:15:30 GMT">
						<outline text="https://github.com/Automattic/wp-calypso/tree/trunk/packages/wpcom.js" created="Sun, 27 Aug 2023 14:15:36 GMT"/>
						</outline>
					<outline text="Repo is here --" created="Sat, 26 Aug 2023 16:14:28 GMT">
						<outline text="https://github.com/scripting/wordpressIdentity" created="Sat, 26 Aug 2023 16:14:31 GMT"/>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;wpidentity&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Implements OAuth identity, a simple verb set with wordpress.com for Node.js apps, and a storage system for drafts and other user data. It's used in FeedLand for WordPress identity and it's the backend of WordLand.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.24&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/wpidentity.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;wpidentity.js&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;wpidentity.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;wpcom&quot;: &quot;*&quot;," created="Sat, 26 Aug 2023 16:21:40 GMT"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;," created="Tue, 22 Aug 2023 15:21:53 GMT"/>
						<outline text="&quot;daverss&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davesql&quot;: &quot;*&quot;,"/>
						<outline text="&quot;sqllog&quot;: &quot;*&quot;,"/>
						<outline text="&quot;marked&quot;: &quot;3.0.8&quot;,"/>
						<outline text="&quot;node-emoji&quot;: &quot;1.11.0&quot;,"/>
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;" isComment="true"/>
						<outline text="&quot;ws&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="wpidentity.js">
				<outline text="var myProductName = &quot;wpidentity&quot;, myVersion = &quot;0.5.24&quot;; "/>
				<outline text="" created="Sat, 12 Aug 2023 22:37:22 GMT"/>
				<outline text="exports.start = start; "/>
				<outline text="exports.handleHttpRequest = handleHttpRequest; "/>
				<outline text="exports.getUserInfo = getUserInfo; //3/23/24 by DW" created="Sat, 23 Mar 2024 23:31:46 GMT"/>
				<outline text="exports.getUsername = getUsername; //3/10/25 by DW" isComment="true" created="Mon, 10 Mar 2025 19:30:07 GMT"/>
				<outline text="exports.callWithUsername = callWithUsernameForClient; //3/12/25 by DW" created="Wed, 12 Mar 2025 13:11:32 GMT"/>
				<outline text="" created="Tue, 05 Sep 2023 14:34:40 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const request = require (&quot;request&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const wpcom = require (&quot;wpcom&quot;); //8/26/23 by DW"/>
				<outline text="const davesql = require (&quot;davesql&quot;); //3/24/24 by DW"/>
				<outline text="const emoji = require (&quot;node-emoji&quot;);  //4/15/24 by DW"/>
				<outline text="const marked = require (&quot;marked&quot;);  //4/18/24 by DW"/>
				<outline text="const rss = require (&quot;daverss&quot;); //4/29/24 by DW"/>
				<outline text="const websocket = require (&quot;ws&quot;); //4/28/25 by DW"/>
				<outline text="const websocket = require (&quot;nodejs-websocket&quot;); //5/24/24 by DW " isComment="true"/>
				<outline text="const log = require (&quot;sqllog&quot;); //12/21/24 by DW"/>
				<outline text="" created="Tue, 22 Aug 2023 15:11:42 GMT"/>
				<outline text="var config = { ">
					<outline text="myRandomNumber: utils.random (1, 1000000000)," created="Tue, 22 Aug 2023 21:45:33 GMT"/>
					<outline text="urlMyHomePage: &quot;http://scripting.com/code/wpidentity/client/&quot;," created="Tue, 22 Aug 2023 22:13:05 GMT"/>
					<outline text="" created="Tue, 22 Aug 2023 15:32:36 GMT"/>
					<outline text="urlRequestToken: &quot;https://public-api.wordpress.com/oauth2/token&quot;," created="Tue, 22 Aug 2023 15:32:36 GMT"/>
					<outline text="urlAuthorize: &quot;https://public-api.wordpress.com/oauth2/authorize&quot;," created="Tue, 22 Aug 2023 15:32:45 GMT"/>
					<outline text="urlAuthenticate: &quot;https://public-api.wordpress.com/oauth2/authenticate&quot;," created="Tue, 22 Aug 2023 15:33:00 GMT"/>
					<outline text="urlRedirect: &quot;http://localhost:1408/callbackFromWordpress&quot;," created="Tue, 22 Aug 2023 15:35:26 GMT"/>
					<outline text="" created="Sun, 27 Aug 2023 14:48:34 GMT"/>
					<outline text="scope: &quot;global&quot;, //default -- 8/27/23 by DW" created="Sun, 27 Aug 2023 14:48:35 GMT"/>
					<outline text="" created="Sun, 24 Mar 2024 15:48:24 GMT"/>
					<outline text="mysqlVersion: undefined, //3/24/24 by DW" created="Sat, 18 Nov 2023 17:00:00 GMT"/>
					<outline text="flStorageEnabled: false, //3/24/24 by DW" created="Sat, 18 Nov 2023 17:00:00 GMT"/>
					<outline text="" created="Mon, 25 Mar 2024 14:05:56 GMT"/>
					<outline text="ctUsernameCacheSecs: 60, //3/25/24 by DW" created="Mon, 25 Mar 2024 14:05:57 GMT"/>
					<outline text="maxCtDrafts: 1000, //4/27/24 by DW &amp; 10/31/24 by DW" created="Sat, 27 Apr 2024 14:03:28 GMT"/>
					<outline text="" created="Mon, 25 Mar 2024 16:09:09 GMT"/>
					<outline text="urlServerHomePageSource: &quot;http://scripting.com/code/wordsocial/index.html&quot;, //3/25/24 by DW" isComment="true" created="Mon, 25 Mar 2024 15:28:22 GMT"/>
					<outline text="urlServer: &quot;https://word.social/&quot; //3/25/24 by DW" isComment="true" created="Mon, 25 Mar 2024 16:09:10 GMT"/>
					<outline text="" created="Tue, 30 Apr 2024 14:42:33 GMT"/>
					<outline text="flServePublicUserFiles: false, //4/30/24 by DW" created="Tue, 30 Apr 2024 14:45:05 GMT"/>
					<outline text="urlPublicUserFiles: &quot;https://wordland.social/&quot;, //5/16/24 by DW" created="Thu, 16 May 2024 14:21:04 GMT"/>
					<outline text="maxCtFiles: 100, //5/16/24 by DW" created="Thu, 16 May 2024 15:55:09 GMT"/>
					<outline text="" created="Fri, 24 May 2024 15:51:24 GMT"/>
					<outline text="flWebsocketEnabled: true, //5/24/24 by DW" created="Fri, 24 May 2024 15:51:26 GMT"/>
					<outline text="websocketPort: 1622," created="Fri, 24 May 2024 15:52:24 GMT"/>
					<outline text="urlSocketServer: &quot;wss://wordland.social/&quot;," created="Sat, 25 May 2024 12:34:22 GMT"/>
					<outline text="" created="Thu, 24 Oct 2024 13:20:42 GMT"/>
					<outline text="flUseWhitelist: false, //10/24/24 by DW" created="Thu, 24 Oct 2024 13:20:42 GMT"/>
					<outline text="authorizedAccounts: new Array ()," created="Thu, 24 Oct 2024 13:20:54 GMT"/>
					<outline text="authorizedAccountsPath: &quot;data/authorizedAccounts.json&quot;, //11/18/24 by DW" created="Mon, 18 Nov 2024 15:24:50 GMT"/>
					<outline text="" created="Wed, 13 Nov 2024 16:16:54 GMT"/>
					<outline text="flDeleteTempFiles: true, //11/13/24 by DW" created="Wed, 13 Nov 2024 16:16:54 GMT"/>
					<outline text="flConvertImagesToGutenberg: false, //11/16/24 by DW &amp; 11/18/24 by DW" created="Sat, 16 Nov 2024 15:19:24 GMT"/>
					<outline text="" created="Sun, 22 Dec 2024 14:49:09 GMT"/>
					<outline text="flLogInstalled: false, //12/21/24 by DW" created="Sun, 22 Dec 2024 14:49:09 GMT"/>
					<outline text="" created="Mon, 24 Feb 2025 23:18:48 GMT"/>
					<outline text="sysopUsername: undefined, //2/24/25 by DW" created="Mon, 24 Feb 2025 23:18:49 GMT"/>
					<outline text="" created="Fri, 14 Mar 2025 14:27:16 GMT"/>
					<outline text="homePagetable: undefined, //3/14/25 by DW" created="Fri, 14 Mar 2025 14:27:16 GMT"/>
					<outline text="" created="Sat, 05 Jul 2025 15:19:29 GMT"/>
					<outline text="postMetadataPrefix: &quot;wordland&quot; //7/5/25 by DW" created="Sat, 05 Jul 2025 15:19:29 GMT"/>
					<outline text="};"/>
					</outline>
				<outline text="" created="Thu, 27 Feb 2025 15:21:08 GMT"/>
				<outline text="var stats = {" created="Thu, 27 Feb 2025 14:59:25 GMT">
					<outline text="ctHits: 0," created="Thu, 27 Feb 2025 14:59:46 GMT"/>
					<outline text="whenLastHit: undefined," created="Thu, 27 Feb 2025 14:59:51 GMT"/>
					<outline text="whenFirstHit: undefined," created="Thu, 27 Feb 2025 14:59:57 GMT"/>
					<outline text="userAgents: {" created="Thu, 27 Feb 2025 15:01:27 GMT">
						<outline text="}" created="Thu, 27 Feb 2025 15:01:32 GMT"/>
						</outline>
					<outline text="};" created="Thu, 27 Feb 2025 14:59:42 GMT"/>
					</outline>
				<outline text="" created="Mon, 18 Nov 2024 15:26:13 GMT"/>
				<outline text="function base64UrlEncode (theData) {" created="Sat, 26 Aug 2023 17:45:27 GMT">
					<outline text="var base64 = Buffer.from (theData).toString ('base64');"/>
					<outline text="return (base64.replace ('+', '-').replace ('/', '_').replace (/=+$/, ''));"/>
					<outline text="}" created="Sat, 26 Aug 2023 17:45:41 GMT"/>
					</outline>
				<outline text="function base64UrlDecode (theData) {" created="Sat, 26 Aug 2023 17:46:35 GMT">
					<outline text="theData = theData.replace ('-', '+').replace ('_', '/');"/>
					<outline text="while (theData.length % 4) {">
						<outline text="theData += '=';"/>
						<outline text="}"/>
						</outline>
					<outline text="return (Buffer.from (theData, 'base64').toString ('utf-8'));"/>
					<outline text="}" created="Sat, 26 Aug 2023 17:46:55 GMT"/>
					</outline>
				<outline text="function readConfig (f, config, callback) {" created="Mon, 08 Mar 2021 15:19:44 GMT">
					<outline text="fs.readFile (f, function (err, jsontext) {" created="Mon, 08 Mar 2021 15:19:57 GMT">
						<outline text="if (!err) {" created="Mon, 08 Mar 2021 15:20:27 GMT">
							<outline text="try {" created="Mon, 08 Mar 2021 15:20:49 GMT">
								<outline text="var jstruct = JSON.parse (jsontext);" created="Mon, 08 Mar 2021 15:21:07 GMT"/>
								<outline text="for (var x in jstruct) {" created="Mon, 08 Mar 2021 15:21:14 GMT">
									<outline text="config [x] = jstruct [x];" created="Mon, 08 Mar 2021 15:21:20 GMT"/>
									<outline text="}" created="Mon, 08 Mar 2021 15:21:25 GMT"/>
									</outline>
								<outline text="}" created="Mon, 08 Mar 2021 15:20:58 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Mon, 08 Mar 2021 15:20:59 GMT">
								<outline text="console.log (&quot;Error reading &quot; + f);" created="Mon, 08 Mar 2021 15:20:35 GMT"/>
								<outline text="}" created="Mon, 08 Mar 2021 15:21:03 GMT"/>
								</outline>
							<outline text="}" created="Mon, 08 Mar 2021 15:20:30 GMT"/>
							</outline>
						<outline text="callback ();" created="Mon, 08 Mar 2021 15:22:15 GMT"/>
						<outline text="});" created="Mon, 08 Mar 2021 15:20:25 GMT"/>
						</outline>
					<outline text="}" created="Mon, 08 Mar 2021 15:19:56 GMT"/>
					</outline>
				<outline text="function addToLog (eventName, err, eventData, callback) { //12/21/24 by DW" created="Sun, 22 Dec 2024 14:48:09 GMT">
					<outline text="if (config.flLogInstalled) {" created="Sun, 22 Dec 2024 14:49:52 GMT">
						<outline text="log.addToLog (eventName, err, eventData, callback);" created="Sun, 22 Dec 2024 14:50:05 GMT"/>
						<outline text="}" created="Sun, 22 Dec 2024 14:49:58 GMT"/>
						</outline>
					<outline text="}" created="Sun, 22 Dec 2024 14:48:56 GMT"/>
					</outline>
				<outline text="function getUsername (token, callback) { //3/24/24 by DW" created="Sun, 24 Mar 2024 16:01:25 GMT">
					<outline text="console.log (&quot;getUsername: token == &quot; + token); //3/12/25 by DW" isComment="true" created="Wed, 12 Mar 2025 12:09:48 GMT"/>
					<outline text="if (utils.secondsSince (whenLastUsernameCacheStart) &gt; config.ctUsernameCacheSecs) {" created="Mon, 25 Mar 2024 14:05:12 GMT">
						<outline text="usernameCache = new Object ();" created="Mon, 25 Mar 2024 14:05:42 GMT"/>
						<outline text="}" created="Mon, 25 Mar 2024 14:05:35 GMT"/>
						</outline>
					<outline text="if (usernameCache [token] !== undefined) {" created="Mon, 25 Mar 2024 14:06:39 GMT">
						<outline text="callback (undefined, usernameCache [token]);" created="Mon, 25 Mar 2024 14:06:59 GMT"/>
						<outline text="}" created="Mon, 25 Mar 2024 14:06:49 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 25 Mar 2024 14:06:50 GMT">
						<outline text="getUserInfo (token, function (err, theUser) {" created="Sun, 24 Mar 2024 16:01:59 GMT">
							<outline text="if (err) {" created="Sun, 24 Mar 2024 16:02:57 GMT">
								<outline text="callback (err);" created="Sun, 24 Mar 2024 16:03:00 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:03:03 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 24 Mar 2024 16:03:04 GMT">
								<outline text="const username = theUser.username;" created="Mon, 25 Mar 2024 14:07:45 GMT"/>
								<outline text="usernameCache [token] = username;" created="Mon, 25 Mar 2024 14:07:36 GMT"/>
								<outline text="callback (undefined, username);" created="Sun, 24 Mar 2024 16:03:08 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:03:07 GMT"/>
								</outline>
							<outline text="});" created="Sun, 24 Mar 2024 16:02:18 GMT"/>
							</outline>
						<outline text="}" created="Mon, 25 Mar 2024 14:06:51 GMT"/>
						</outline>
					<outline text="}" created="Sun, 24 Mar 2024 16:01:36 GMT"/>
					</outline>
				<outline text="function callWithUsernameForClient (theRequest, callback) { //3/12/25 by DW -- special function for apps that include wpidentity">
					<outline text="const params = theRequest.params;"/>
					<outline text="function returnError (err) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (503, &quot;text/plain&quot;, err.message);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function isUserWhitelisted (token, callback) {" created="Wed, 12 Mar 2025 13:09:08 GMT">
						<outline text="callback (undefined, true);" created="Wed, 12 Mar 2025 13:09:20 GMT"/>
						<outline text="}" created="Wed, 12 Mar 2025 13:09:19 GMT"/>
						</outline>
					<outline text="function tokenRequired (callback) {" created="Sat, 26 Aug 2023 22:05:46 GMT">
						<outline text="const token = (params.token === undefined) ? undefined : base64UrlDecode (params.token);" created="Sat, 26 Aug 2023 22:04:27 GMT"/>
						<outline text="if (token === undefined) {" created="Sat, 26 Aug 2023 22:06:00 GMT">
							<outline text="const message = &quot;Can't get the info because the user must be logged in.&quot;;" created="Sat, 26 Aug 2023 22:06:28 GMT"/>
							<outline text="returnError ({message});" created="Sat, 26 Aug 2023 22:06:21 GMT"/>
							<outline text="}" created="Sat, 26 Aug 2023 22:06:06 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 26 Aug 2023 22:06:06 GMT">
							<outline text="isUserWhitelisted (token, function (err, flWhitelisted) { //10/24/24 by DW" created="Thu, 24 Oct 2024 14:19:44 GMT">
								<outline text="if (err) {" created="Thu, 24 Oct 2024 14:20:26 GMT">
									<outline text="returnError (err);" created="Sat, 26 Aug 2023 22:06:21 GMT"/>
									<outline text="}" created="Thu, 24 Oct 2024 14:20:29 GMT"/>
									</outline>
								<outline text="else {" created="Thu, 24 Oct 2024 14:20:38 GMT">
									<outline text="callback (token);" created="Sat, 26 Aug 2023 22:06:09 GMT"/>
									<outline text="}" created="Thu, 24 Oct 2024 14:20:47 GMT"/>
									</outline>
								<outline text="});" created="Thu, 24 Oct 2024 14:20:03 GMT"/>
								</outline>
							<outline text="}" created="Sat, 26 Aug 2023 22:06:11 GMT"/>
							</outline>
						<outline text="}" created="Sat, 26 Aug 2023 22:05:55 GMT"/>
						</outline>
					<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="returnError (err);" created="Sat, 26 Aug 2023 22:06:21 GMT"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="callback (username);" created="Mon, 24 Feb 2025 23:37:19 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 26 Aug 2023 16:30:01 GMT"/>
				<outline text="//wordpress" created="Tue, 09 Apr 2024 17:11:25 GMT">
					<outline text="function connectWithWordpress (callback) {" isComment="true" created="Tue, 22 Aug 2023 15:29:45 GMT">
						<outline text="var params = {">
							<outline text="client_id: config.clientId,"/>
							<outline text="redirect_uri: config.urlRedirect," created="Tue, 22 Aug 2023 15:35:04 GMT"/>
							<outline text="response_type: &quot;code&quot;," created="Tue, 22 Aug 2023 15:33:59 GMT"/>
							<outline text="scope: &quot;global,auth,user,read,posts,follow,activity,likes&quot;," created="Sat, 26 Aug 2023 22:23:40 GMT"/>
							<outline text="state: config.myRandomNumber" created="Tue, 22 Aug 2023 15:34:15 GMT"/>
							<outline text="};"/>
							</outline>
						<outline text="var apiUrl = config.urlAuthenticate + &quot;?&quot; + utils.buildParamList (params);"/>
						<outline text="request (apiUrl, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;connectWithWordpress: err.message == &quot; + err.message);"/>
								<outline text="callback (err);" created="Mon, 08 Nov 2021 17:33:37 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;connectWithWordpress: body == &quot; + body);" isComment="true"/>
								<outline text="callback (undefined, body);" created="Mon, 08 Nov 2021 17:38:59 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 22 Aug 2023 15:29:51 GMT"/>
						</outline>
					<outline text="function requestTokenFromWordpress (theCode, callback) {" created="Tue, 22 Aug 2023 16:24:37 GMT">
						<outline text="var theRequest = {">
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="url: config.urlRequestToken," created="Tue, 22 Aug 2023 16:28:05 GMT"/>
							<outline text="form: {" created="Tue, 22 Aug 2023 16:35:36 GMT">
								<outline text="client_id: config.clientId,"/>
								<outline text="client_secret: config.clientSecret,"/>
								<outline text="redirect_uri: config.urlRedirect," created="Tue, 22 Aug 2023 15:35:04 GMT"/>
								<outline text="code: theCode," created="Tue, 22 Aug 2023 16:26:34 GMT"/>
								<outline text="scope: config.scope," isComment="true" created="Sat, 26 Aug 2023 22:23:40 GMT"/>
								<outline text="grant_type: &quot;authorization_code&quot;" created="Tue, 22 Aug 2023 15:33:59 GMT"/>
								<outline text="}" created="Tue, 22 Aug 2023 16:35:47 GMT"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="callback (err);" created="Mon, 08 Nov 2021 17:33:37 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {" created="Tue, 22 Aug 2023 16:40:37 GMT">
									<outline text="const data = JSON.parse (body);" created="Tue, 22 Aug 2023 16:40:51 GMT"/>
									<outline text="callback (undefined, data);" created="Tue, 22 Aug 2023 16:41:07 GMT"/>
									<outline text="}" created="Tue, 22 Aug 2023 16:40:40 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Tue, 22 Aug 2023 16:40:41 GMT">
									<outline text="callback (err);" created="Tue, 22 Aug 2023 16:40:45 GMT"/>
									<outline text="}" created="Tue, 22 Aug 2023 16:40:48 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 22 Aug 2023 16:25:05 GMT"/>
						</outline>
					<outline text="function convertDate (theDate) {" created="Wed, 13 Sep 2023 16:26:39 GMT">
						<outline text="if (theDate === undefined) {" created="Wed, 13 Sep 2023 16:35:24 GMT">
							<outline text="return (undefined);" created="Wed, 13 Sep 2023 16:34:19 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 16:35:33 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 13 Sep 2023 16:35:34 GMT">
							<outline text="const d = new Date (theDate);" created="Wed, 13 Sep 2023 16:26:55 GMT"/>
							<outline text="if (isNaN (d)) {" created="Wed, 13 Sep 2023 16:34:01 GMT">
								<outline text="return (undefined);" created="Wed, 13 Sep 2023 16:34:19 GMT"/>
								<outline text="}" created="Wed, 13 Sep 2023 16:34:10 GMT"/>
								</outline>
							<outline text="return (d);" created="Wed, 13 Sep 2023 16:27:35 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 16:35:36 GMT"/>
							</outline>
						<outline text="}" created="Wed, 13 Sep 2023 16:26:48 GMT"/>
						</outline>
					<outline text="function convertString (theString) {" created="Wed, 13 Sep 2023 16:47:47 GMT">
						<outline text="if (theString === undefined) {" created="Wed, 13 Sep 2023 16:35:24 GMT">
							<outline text="return (undefined);" created="Wed, 13 Sep 2023 16:34:19 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 16:35:33 GMT"/>
							</outline>
						<outline text="if (theString.length == 0) {" created="Wed, 13 Sep 2023 16:48:16 GMT">
							<outline text="return (undefined);" created="Wed, 13 Sep 2023 16:48:24 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 16:48:31 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 13 Sep 2023 16:48:46 GMT">
							<outline text="return (s);" created="Wed, 13 Sep 2023 16:48:40 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 16:48:48 GMT"/>
							</outline>
						<outline text="}" created="Wed, 13 Sep 2023 16:48:01 GMT"/>
						</outline>
					<outline text="function convertPost (item) { //convert a post received from WordPress to the struct defined by our API -- 9/12/23 by DW" created="Tue, 12 Sep 2023 16:31:46 GMT">
						<outline text="function getCatArray () {" created="Tue, 12 Sep 2023 16:42:00 GMT">
							<outline text="var catarray = new Array ();" created="Tue, 12 Sep 2023 16:42:27 GMT"/>
							<outline text="for (var x in item.categories) {" created="Sat, 02 Sep 2023 15:48:12 GMT">
								<outline text="catarray.push (x);" created="Sat, 02 Sep 2023 15:48:25 GMT"/>
								<outline text="}" created="Sat, 02 Sep 2023 15:49:09 GMT"/>
								</outline>
							<outline text="return (catarray);" created="Tue, 12 Sep 2023 16:44:11 GMT"/>
							<outline text="}" created="Tue, 12 Sep 2023 16:42:14 GMT"/>
							</outline>
						<outline text="function getCatstring () {" created="Tue, 12 Sep 2023 16:42:00 GMT">
							<outline text="var catstring = &quot;&quot;;" created="Tue, 12 Sep 2023 16:42:27 GMT"/>
							<outline text="for (var x in item.categories) {" created="Sat, 02 Sep 2023 15:48:12 GMT">
								<outline text="catstring += &quot;,&quot; + x;" created="Sat, 02 Sep 2023 15:48:25 GMT"/>
								<outline text="}" created="Sat, 02 Sep 2023 15:49:09 GMT"/>
								</outline>
							<outline text="if (catstring.length &gt; 0) {" created="Tue, 12 Sep 2023 16:43:12 GMT">
								<outline text="catstring = utils.stringDelete (catstring, 1, 1);" created="Tue, 12 Sep 2023 16:43:52 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 16:43:20 GMT"/>
								</outline>
							<outline text="return (catstring);" created="Tue, 12 Sep 2023 16:44:11 GMT"/>
							<outline text="}" created="Tue, 12 Sep 2023 16:42:14 GMT"/>
							</outline>
						<outline text="function getMetadataObject (theArray) { //7/5/25 by DW" created="Sat, 05 Jul 2025 16:02:15 GMT">
							<outline text="var theObject = new Object ();" created="Sat, 05 Jul 2025 16:02:40 GMT"/>
							<outline text="theArray.forEach (function (item) {" created="Sat, 05 Jul 2025 16:02:50 GMT">
								<outline text="theObject [item.key] = item.value;" created="Sat, 05 Jul 2025 16:03:04 GMT"/>
								<outline text="});" created="Sat, 05 Jul 2025 16:02:55 GMT"/>
								</outline>
							<outline text="return (theObject);" created="Sat, 05 Jul 2025 16:02:41 GMT"/>
							<outline text="}" created="Sat, 05 Jul 2025 16:02:36 GMT"/>
							</outline>
						<outline text="return ({" created="Tue, 12 Sep 2023 15:40:49 GMT">
							<outline text="idPost: item.ID," created="Tue, 12 Sep 2023 15:41:45 GMT"/>
							<outline text="idSite: item.site_ID," created="Tue, 12 Sep 2023 15:41:50 GMT"/>
							<outline text="title: item.title," created="Tue, 12 Sep 2023 16:09:16 GMT"/>
							<outline text="guid: item.guid," created="Tue, 12 Sep 2023 16:09:16 GMT"/>
							<outline text="content: item.content," created="Tue, 12 Sep 2023 16:09:16 GMT"/>
							<outline text="type: item.type," created="Tue, 12 Sep 2023 16:09:25 GMT"/>
							<outline text="categories: getCatArray ()," created="Tue, 12 Sep 2023 16:44:56 GMT"/>
							<outline text="metadata: getMetadataObject (item.metadata), //7/5/25 by DW" created="Sat, 05 Jul 2025 15:32:20 GMT"/>
							<outline text="url: item.URL," created="Tue, 12 Sep 2023 16:10:00 GMT"/>
							<outline text="urlShort: item.short_URL," created="Tue, 12 Sep 2023 16:10:06 GMT"/>
							<outline text="whenCreated: convertDate (item.date)," created="Tue, 12 Sep 2023 15:42:07 GMT"/>
							<outline text="author: {" created="Tue, 12 Sep 2023 16:05:44 GMT">
								<outline text="id: item.author.ID," created="Tue, 12 Sep 2023 16:05:53 GMT"/>
								<outline text="username: item.author.login," created="Tue, 12 Sep 2023 16:06:04 GMT"/>
								<outline text="name: item.author.name" created="Tue, 12 Sep 2023 16:06:38 GMT"/>
								<outline text="}," created="Tue, 12 Sep 2023 16:05:49 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 15:41:20 GMT"/>
							</outline>
						<outline text="}" created="Tue, 12 Sep 2023 16:32:21 GMT"/>
						</outline>
					<outline text="function convertUser (theUser) {" created="Tue, 12 Sep 2023 17:18:14 GMT">
						<outline text="return ({" created="Tue, 12 Sep 2023 17:18:42 GMT">
							<outline text="idUser: theUser.ID," created="Tue, 12 Sep 2023 17:19:12 GMT"/>
							<outline text="name: theUser.display_name," created="Tue, 12 Sep 2023 17:20:15 GMT"/>
							<outline text="username: theUser.username," created="Tue, 12 Sep 2023 17:20:15 GMT"/>
							<outline text="email: theUser.email," created="Tue, 12 Sep 2023 17:20:25 GMT"/>
							<outline text="idPrimaryBlog: theUser.primary_blog," created="Tue, 12 Sep 2023 17:20:42 GMT"/>
							<outline text="urlAvatar: theUser.avatar_URL, //3/17/25 by DW" created="Mon, 17 Mar 2025 16:14:47 GMT"/>
							<outline text="urlPrimaryBlog: theUser.primary_blog_url," created="Tue, 12 Sep 2023 17:22:51 GMT"/>
							<outline text="urlProfile: theUser.profile_URL, //3/17/25 by DW" created="Mon, 17 Mar 2025 16:14:47 GMT"/>
							<outline text="whenStarted: convertDate (theUser.date)," created="Tue, 12 Sep 2023 17:21:11 GMT"/>
							<outline text="ctSites: theUser.site_count" created="Tue, 12 Sep 2023 17:21:11 GMT"/>
							<outline text="});" created="Tue, 12 Sep 2023 17:19:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 12 Sep 2023 17:18:23 GMT"/>
						</outline>
					<outline text="function convertSite (theSite) {" created="Tue, 12 Sep 2023 17:18:14 GMT">
						<outline text="Changes" isComment="true" created="Mon, 28 Apr 2025 12:51:56 GMT">
							<outline text="4/28/25; 8:52:00 AM by DW" created="Mon, 28 Apr 2025 12:51:59 GMT">
								<outline text="We don't get the options object if it's a site that's not on wordpress.com? So we don't know when the site was created. " created="Mon, 28 Apr 2025 12:52:00 GMT"/>
								</outline>
							</outline>
						<outline text="const flDeleted = theSite.is_deleted; //1/24/25 by DW" created="Fri, 24 Jan 2025 13:42:25 GMT"/>
						<outline text="var whenCreated = undefined, ctPosts = undefined; //4/28/25 by DW" created="Mon, 28 Apr 2025 12:59:34 GMT"/>
						<outline text="if (!flDeleted) {" created="Mon, 28 Apr 2025 13:00:53 GMT">
							<outline text="if (theSite.options !== undefined) { //4/28/25 by DW" created="Mon, 28 Apr 2025 12:54:02 GMT">
								<outline text="whenCreated = convertDate (theSite.options.created_at);" created="Mon, 28 Apr 2025 13:00:27 GMT"/>
								<outline text="ctPosts = theSite.options.post_count;" created="Tue, 12 Sep 2023 18:02:17 GMT"/>
								<outline text="}" created="Mon, 28 Apr 2025 12:54:13 GMT"/>
								</outline>
							<outline text="}" created="Mon, 28 Apr 2025 13:01:02 GMT"/>
							</outline>
						<outline text="return ({" created="Tue, 12 Sep 2023 17:18:42 GMT">
							<outline text="idSite: theSite.ID," created="Tue, 12 Sep 2023 17:19:12 GMT"/>
							<outline text="urlSite: theSite.URL," created="Tue, 12 Sep 2023 17:20:42 GMT"/>
							<outline text="description: theSite.description," created="Tue, 12 Sep 2023 17:59:07 GMT"/>
							<outline text="name: theSite.name," created="Tue, 12 Sep 2023 17:59:34 GMT"/>
							<outline text="whenCreated, //4/28/25 by DW" created="Tue, 12 Sep 2023 18:01:55 GMT"/>
							<outline text="whenCreated: (flDeleted) ? undefined : convertDate (theSite.options.created_at), //1/24/25 by DW" isComment="true" created="Tue, 12 Sep 2023 18:01:55 GMT"/>
							<outline text="flDeleted, //1/24/25 by DW" created="Fri, 24 Jan 2025 13:43:58 GMT"/>
							<outline text="ctPosts //4/28/25 by DW" created="Tue, 12 Sep 2023 18:02:17 GMT"/>
							<outline text="ctPosts: theSite.options.post_count" isComment="true" created="Tue, 12 Sep 2023 18:02:17 GMT"/>
							<outline text="});" created="Tue, 12 Sep 2023 17:19:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 12 Sep 2023 17:18:23 GMT"/>
						</outline>
					<outline text="function convertSubscription (theSubscription) {" created="Tue, 12 Sep 2023 17:18:14 GMT">
						<outline text="return ({" created="Tue, 12 Sep 2023 17:18:42 GMT">
							<outline text="id: theSubscription.ID," created="Tue, 12 Sep 2023 17:19:12 GMT"/>
							<outline text="idWpBlog: (theSubscription.blog_ID == &quot;0&quot;) ? undefined : theSubscription.blog_ID," created="Wed, 13 Sep 2023 15:58:03 GMT"/>
							<outline text="feedUrl: theSubscription.URL, " created="Tue, 12 Sep 2023 17:20:42 GMT"/>
							<outline text="whenSubscribed: convertDate (theSubscription.date_subscribed)" created="Wed, 13 Sep 2023 16:01:48 GMT"/>
							<outline text="});" created="Tue, 12 Sep 2023 17:19:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 12 Sep 2023 17:18:23 GMT"/>
						</outline>
					<outline text="function convertMediaObject (theObject) {" created="Tue, 12 Sep 2023 17:18:14 GMT">
						<outline text="return ({" created="Tue, 12 Sep 2023 17:18:42 GMT">
							<outline text="id: theObject.ID," created="Tue, 12 Sep 2023 17:19:12 GMT"/>
							<outline text="url: theObject.URL," created="Wed, 13 Sep 2023 16:44:54 GMT"/>
							<outline text="whenCreated: theObject.date," created="Wed, 13 Sep 2023 16:45:07 GMT"/>
							<outline text="idPost: theObject.post_ID," created="Wed, 13 Sep 2023 16:45:19 GMT"/>
							<outline text="idAuthor: theObject.author_ID," created="Wed, 13 Sep 2023 16:45:33 GMT"/>
							<outline text="type: theObject.mime_type," created="Wed, 13 Sep 2023 16:45:58 GMT"/>
							<outline text="title: theObject.title," created="Wed, 13 Sep 2023 16:46:07 GMT"/>
							<outline text="file: theObject.file, //11/13/24 by DW" created="Wed, 13 Sep 2023 16:46:07 GMT"/>
							<outline text="guid: theObject.guid, //11/13/24 by DW" created="Wed, 13 Sep 2023 16:46:07 GMT"/>
							<outline text="description: convertString (theObject.description)," created="Wed, 13 Sep 2023 16:46:23 GMT"/>
							<outline text="alt: convertString (theObject.alt)," created="Wed, 13 Sep 2023 16:46:40 GMT"/>
							<outline text="height: theObject.height," created="Wed, 13 Sep 2023 16:46:51 GMT"/>
							<outline text="width: theObject.width" created="Wed, 13 Sep 2023 16:46:57 GMT"/>
							<outline text="});" created="Tue, 12 Sep 2023 17:19:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 12 Sep 2023 17:18:23 GMT"/>
						</outline>
					<outline text="function convertCategory (theCategory) { //10/20/24 by DW" created="Sun, 20 Oct 2024 14:10:08 GMT">
						<outline text="return ({" created="Sun, 20 Oct 2024 14:11:44 GMT">
							<outline text="id: theCategory.ID, //a number" created="Sun, 20 Oct 2024 14:11:50 GMT"/>
							<outline text="slug: theCategory.slug, //it's a unique identifier that's text, derived from the name of the category" created="Sun, 20 Oct 2024 14:15:42 GMT"/>
							<outline text="name: theCategory.name," created="Sun, 20 Oct 2024 14:14:42 GMT"/>
							<outline text="description: theCategory.description," created="Sun, 20 Oct 2024 14:14:19 GMT"/>
							<outline text="feedUrl: theCategory.feed_url," created="Sun, 20 Oct 2024 14:14:29 GMT"/>
							<outline text="idParent: (theCategory.parent == 0) ? undefined : theCategory.parent," created="Sun, 20 Oct 2024 14:15:05 GMT"/>
							<outline text="ctPosts: theCategory.post_count" created="Sun, 20 Oct 2024 14:15:55 GMT"/>
							<outline text="});" created="Sun, 20 Oct 2024 14:11:47 GMT"/>
							</outline>
						<outline text="}" created="Sun, 20 Oct 2024 14:10:21 GMT"/>
						</outline>
					<outline text="function getUserInfo (accessToken, callback) { //8/26/23 by DW" created="Sat, 26 Aug 2023 16:23:29 GMT">
						<outline text="Changes" isComment="true" created="Tue, 12 Sep 2023 15:44:12 GMT">
							<outline text="9/12/23; 1:16:00 PM by DW" created="Tue, 12 Sep 2023 15:44:14 GMT">
								<outline text="Return an abbreviated struct, not all the info that WordPress returns." created="Tue, 12 Sep 2023 15:44:15 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;getUserInfo: token == &quot; + accessToken); //3/12/25 by DW" isComment="true" created="Wed, 12 Mar 2025 12:09:48 GMT"/>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="wp.me ().get (function (err, theInfo) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="callback (undefined, convertUser (theInfo));" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 17:16:26 GMT"/>
							</outline>
						<outline text="}" created="Sat, 26 Aug 2023 16:23:56 GMT"/>
						</outline>
					<outline text="function getUserSites (accessToken, callback) { //8/26/23 by DW" created="Sat, 26 Aug 2023 16:23:29 GMT">
						<outline text="Changes" isComment="true" created="Tue, 12 Sep 2023 15:44:12 GMT">
							<outline text="9/12/23; 1:42:40 PM by DW" created="Tue, 12 Sep 2023 15:44:14 GMT">
								<outline text="Return an abbreviated struct for a site, not all the info that WordPress returns." created="Tue, 12 Sep 2023 15:44:15 GMT"/>
								</outline>
							</outline>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="wp.me ().sites (function (err, theSiteList) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="var theList = new Array ();" created="Tue, 12 Sep 2023 15:40:55 GMT"/>
								<outline text="theSiteList.sites.forEach (function (item) {" created="Tue, 12 Sep 2023 17:56:13 GMT">
									<outline text="if (!item.is_deleted) { //1/24/25 by DW" created="Fri, 24 Jan 2025 13:40:45 GMT">
										<outline text="theList.push (convertSite (item));" created="Tue, 12 Sep 2023 15:40:49 GMT"/>
										<outline text="}" created="Fri, 24 Jan 2025 13:41:01 GMT"/>
										</outline>
									<outline text="});" created="Tue, 12 Sep 2023 17:56:28 GMT"/>
									</outline>
								<outline text="callback (undefined, theList);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 17:43:03 GMT"/>
							</outline>
						<outline text="}" created="Sat, 26 Aug 2023 16:23:56 GMT"/>
						</outline>
					<outline text="function getSitePosts (accessToken, idSite, callback) { //9/12/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="Changes" isComment="true" created="Tue, 12 Sep 2023 15:44:12 GMT">
							<outline text="9/12/23; 11:44:15 AM by DW" created="Tue, 12 Sep 2023 15:44:14 GMT">
								<outline text="Return an abbreviated list of posts, not all the info that WordPress returns." created="Tue, 12 Sep 2023 15:44:15 GMT"/>
								</outline>
							</outline>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="site.postsList (function (err, thePosts) { //9/12/23 by DW" created="Tue, 12 Sep 2023 15:38:54 GMT">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="var theList = new Array ();" created="Tue, 12 Sep 2023 15:40:55 GMT"/>
								<outline text="thePosts.posts.forEach (function (item) {" created="Tue, 12 Sep 2023 15:40:05 GMT">
									<outline text="theList.push (convertPost (item));" created="Tue, 12 Sep 2023 15:40:49 GMT"/>
									<outline text="theList.push ({" isComment="true" created="Tue, 12 Sep 2023 15:40:49 GMT">
										<outline text="idPost: item.ID," created="Tue, 12 Sep 2023 15:41:45 GMT"/>
										<outline text="idSite: item.site_ID," created="Tue, 12 Sep 2023 15:41:50 GMT"/>
										<outline text="title: item.title," created="Tue, 12 Sep 2023 16:09:16 GMT"/>
										<outline text="guid: item.guid," created="Tue, 12 Sep 2023 16:09:16 GMT"/>
										<outline text="content: item.content," created="Tue, 12 Sep 2023 16:09:16 GMT"/>
										<outline text="type: item.type," created="Tue, 12 Sep 2023 16:09:25 GMT"/>
										<outline text="url: item.URL," created="Tue, 12 Sep 2023 16:10:00 GMT"/>
										<outline text="urlShort: item.short_URL," created="Tue, 12 Sep 2023 16:10:06 GMT"/>
										<outline text="whenCreated: new Date (item.date)," created="Tue, 12 Sep 2023 15:42:07 GMT"/>
										<outline text="author: {" created="Tue, 12 Sep 2023 16:05:44 GMT">
											<outline text="id: item.author.ID," created="Tue, 12 Sep 2023 16:05:53 GMT"/>
											<outline text="username: item.author.login," created="Tue, 12 Sep 2023 16:06:04 GMT"/>
											<outline text="name: item.author.name" created="Tue, 12 Sep 2023 16:06:38 GMT"/>
											<outline text="}" created="Tue, 12 Sep 2023 16:05:49 GMT"/>
											</outline>
										<outline text="});" created="Tue, 12 Sep 2023 15:41:20 GMT"/>
										</outline>
									<outline text="});" created="Tue, 12 Sep 2023 15:40:25 GMT"/>
									</outline>
								<outline text="callback (undefined, theList);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 15:39:10 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function getSiteUsers (accessToken, idSite, callback) { //8/28/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="site.usersList (function (err, theUsers) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="var theList = new Array ();" created="Tue, 12 Sep 2023 15:40:55 GMT"/>
								<outline text="theUsers.users.forEach (function (item) {" created="Tue, 12 Sep 2023 17:56:13 GMT">
									<outline text="theList.push (convertUser (item));" created="Tue, 12 Sep 2023 15:40:49 GMT"/>
									<outline text="});" created="Tue, 12 Sep 2023 17:56:28 GMT"/>
									</outline>
								<outline text="callback (undefined, theList);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 16:34:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function getSiteInfo (accessToken, idSite, callback) { //8/29/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="site.get (function (err, theInfo) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="callback (undefined, convertSite (theInfo));" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Wed, 13 Sep 2023 16:38:36 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function getSiteMedialist (accessToken, idSite, callback) { //8/29/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="site.mediaList (function (err, theMedialist) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="var theList = new Array ();" created="Tue, 12 Sep 2023 15:40:55 GMT"/>
								<outline text="theMedialist.media.forEach (function (item) {" created="Tue, 12 Sep 2023 17:56:13 GMT">
									<outline text="theList.push (convertMediaObject (item));" created="Tue, 12 Sep 2023 15:40:49 GMT"/>
									<outline text="});" created="Tue, 12 Sep 2023 17:56:28 GMT"/>
									</outline>
								<outline text="callback (undefined, theList);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 16:34:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function getPost (accessToken, idSite, idPost, callback) { //9/12/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="Changes" isComment="true" created="Tue, 12 Sep 2023 15:44:12 GMT">
							<outline text="9/12/23; 12:34:36 PM by DW" created="Tue, 12 Sep 2023 15:44:14 GMT">
								<outline text="Return an abbreviated post, not all the info that WordPress returns." created="Tue, 12 Sep 2023 15:44:15 GMT"/>
								</outline>
							</outline>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="const post = site.post (idPost);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="post.get (function (err, thePost) { //9/12/23 by DW">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="callback (undefined, convertPost (thePost));" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 16:34:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function getObjectFromJsontext (jsontext, callback) {" created="Tue, 29 Aug 2023 17:13:21 GMT">
						<outline text="var theObject;" created="Tue, 29 Aug 2023 16:55:10 GMT"/>
						<outline text="try {" created="Tue, 29 Aug 2023 16:55:11 GMT">
							<outline text="theObject = JSON.parse (jsontext);" created="Tue, 29 Aug 2023 16:55:31 GMT"/>
							<outline text="}" created="Tue, 29 Aug 2023 16:55:14 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Tue, 29 Aug 2023 16:55:15 GMT">
							<outline text="const message = &quot;Can't add or update the post because the JSON text is not valid.&quot;;" created="Tue, 29 Aug 2023 16:55:55 GMT"/>
							<outline text="callback ({message});" created="Tue, 29 Aug 2023 16:55:48 GMT"/>
							<outline text="return (undefined);" created="Tue, 29 Aug 2023 16:57:35 GMT"/>
							<outline text="}" created="Tue, 29 Aug 2023 16:55:18 GMT"/>
							</outline>
						<outline text="return (theObject);" created="Tue, 29 Aug 2023 17:14:56 GMT"/>
						<outline text="}" created="Tue, 29 Aug 2023 17:13:44 GMT"/>
						</outline>
					<outline text="function getCategoriesObject (jstruct) {" created="Wed, 13 Sep 2023 21:56:44 GMT">
						<outline text="if (jstruct.categories === undefined) {" created="Wed, 13 Sep 2023 21:56:56 GMT">
							<outline text="return (undefined);" created="Wed, 13 Sep 2023 21:57:05 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 21:57:08 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 13 Sep 2023 21:57:09 GMT">
							<outline text="var catstruct = new Object ();" created="Wed, 13 Sep 2023 21:58:03 GMT"/>
							<outline text="jstruct.categories.forEach (function (item, ix) {" created="Wed, 13 Sep 2023 21:57:19 GMT">
								<outline text="catstruct [item] = {" created="Wed, 13 Sep 2023 21:57:29 GMT">
									<outline text="ID: ix + 1" created="Wed, 13 Sep 2023 21:58:34 GMT"/>
									<outline text="};" created="Wed, 13 Sep 2023 21:58:30 GMT"/>
									</outline>
								<outline text="});" created="Wed, 13 Sep 2023 21:57:27 GMT"/>
								</outline>
							<outline text="return (catstruct);" created="Wed, 13 Sep 2023 21:58:11 GMT"/>
							<outline text="}" created="Wed, 13 Sep 2023 21:57:11 GMT"/>
							</outline>
						<outline text="}" created="Wed, 13 Sep 2023 21:56:48 GMT"/>
						</outline>
					<outline text="function getSiteCategories (accessToken, idSite, callback) { //10/19/24 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="Changes" isComment="true" created="Tue, 12 Sep 2023 15:44:12 GMT">
							<outline text="4/24/25; 5:09:40 PM by DW" created="Thu, 24 Apr 2025 21:09:39 GMT">
								<outline text="Handle pagination. " created="Thu, 24 Apr 2025 21:09:40 GMT"/>
								</outline>
							<outline text="10/21/24; 11:32:17 AM by DW" created="Mon, 21 Oct 2024 15:32:17 GMT">
								<outline text="Don't return uncategorized. Our users are selecting from the other categories." created="Mon, 21 Oct 2024 15:32:18 GMT"/>
								</outline>
							<outline text="10/19/24; 6:34:17 PM by DW" created="Tue, 12 Sep 2023 15:44:14 GMT">
								<outline text="Return the categories for a post. " created="Tue, 12 Sep 2023 15:44:15 GMT"/>
								</outline>
							</outline>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="const catsPerPage = 100; " created="Thu, 24 Apr 2025 21:10:53 GMT"/>
						<outline text="var returnedCats = new Array ();" created="Sun, 20 Oct 2024 14:39:24 GMT"/>
						<outline text="function nextPage (ixCat) {" created="Thu, 24 Apr 2025 21:10:53 GMT">
							<outline text="const options = {" created="Thu, 24 Apr 2025 21:12:18 GMT">
								<outline text="number: catsPerPage," created="Thu, 24 Apr 2025 21:12:26 GMT"/>
								<outline text="offset: ixCat" created="Thu, 24 Apr 2025 21:12:40 GMT"/>
								<outline text="};" created="Thu, 24 Apr 2025 21:12:23 GMT"/>
								</outline>
							<outline text="site.categoriesList (options, function (err, data) { " created="Tue, 12 Sep 2023 15:38:54 GMT">
								<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
									<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
									<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
									<outline text="data.categories.forEach (function (item) {" created="Sun, 20 Oct 2024 14:39:40 GMT">
										<outline text="if (item.slug != &quot;uncategorized&quot;) { //10/21/24 by DW" created="Mon, 21 Oct 2024 15:33:19 GMT">
											<outline text="returnedCats.push (convertCategory (item));" created="Sun, 20 Oct 2024 14:39:56 GMT"/>
											<outline text="}" created="Mon, 21 Oct 2024 15:33:28 GMT"/>
											</outline>
										<outline text="});" created="Sun, 20 Oct 2024 14:39:51 GMT"/>
										</outline>
									<outline text="if (data.categories.length === catsPerPage) {" created="Thu, 24 Apr 2025 21:15:10 GMT">
										<outline text="nextPage (ixCat + catsPerPage);" created="Thu, 24 Apr 2025 21:15:24 GMT"/>
										<outline text="}" created="Thu, 24 Apr 2025 21:15:12 GMT"/>
										</outline>
									<outline text="else {" created="Thu, 24 Apr 2025 21:15:13 GMT">
										<outline text="callback (undefined, returnedCats);" created="Sat, 19 Oct 2024 22:36:46 GMT"/>
										<outline text="}" created="Thu, 24 Apr 2025 21:15:15 GMT"/>
										</outline>
									<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
									</outline>
								<outline text="});" created="Tue, 12 Sep 2023 15:39:10 GMT"/>
								</outline>
							<outline text="}" created="Thu, 24 Apr 2025 21:11:48 GMT"/>
							</outline>
						<outline text="nextPage (0);" created="Thu, 24 Apr 2025 21:11:54 GMT"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function getSiteCategories (accessToken, idSite, callback) { //10/19/24 by DW" isComment="true" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="Changes" isComment="true" created="Tue, 12 Sep 2023 15:44:12 GMT">
							<outline text="10/21/24; 11:32:17 AM by DW" created="Mon, 21 Oct 2024 15:32:17 GMT">
								<outline text="Don't return uncategorized. Our users are selecting from the other categories." created="Mon, 21 Oct 2024 15:32:18 GMT"/>
								</outline>
							<outline text="10/19/24; 6:34:17 PM by DW" created="Tue, 12 Sep 2023 15:44:14 GMT">
								<outline text="Return the categories for a post. " created="Tue, 12 Sep 2023 15:44:15 GMT"/>
								</outline>
							</outline>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="site.categoriesList (function (err, theCategories) { " created="Tue, 12 Sep 2023 15:38:54 GMT">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="var returnedCats = new Array ();" created="Sun, 20 Oct 2024 14:39:24 GMT"/>
								<outline text="theCategories.categories.forEach (function (item) {" created="Sun, 20 Oct 2024 14:39:40 GMT">
									<outline text="if (item.slug != &quot;uncategorized&quot;) { //10/21/24 by DW" created="Mon, 21 Oct 2024 15:33:19 GMT">
										<outline text="returnedCats.push (convertCategory (item));" created="Sun, 20 Oct 2024 14:39:56 GMT"/>
										<outline text="}" created="Mon, 21 Oct 2024 15:33:28 GMT"/>
										</outline>
									<outline text="});" created="Sun, 20 Oct 2024 14:39:51 GMT"/>
									</outline>
								<outline text="callback (undefined, returnedCats);" created="Sat, 19 Oct 2024 22:36:46 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Tue, 12 Sep 2023 15:39:10 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="function addSiteCategory (accessToken, idSite, jsontext, callback) { //3/15/25 by DW">
						<outline text="Changes" isComment="true" created="Sat, 15 Mar 2025 15:24:33 GMT">
							<outline text="3/15/25; 11:24:36 AM by DW" created="Sat, 15 Mar 2025 15:24:35 GMT">
								<outline text="This is what's in jsontext." created="Sat, 15 Mar 2025 15:27:17 GMT">
									<outline text="{">
										<outline text="name: &quot;Tech News&quot;,"/>
										<outline text="slug: &quot;tech-news&quot;,"/>
										<outline text="description: &quot;Latest updates from the tech industry&quot;,"/>
										<outline text="parent: 0 // Use an existing category ID if needed"/>
										<outline text="}"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="const jstruct = getObjectFromJsontext (jsontext, callback);" created="Tue, 29 Aug 2023 17:15:15 GMT"/>
						<outline text="if (jstruct === undefined) {" created="Tue, 29 Aug 2023 17:15:31 GMT">
							<outline text="return;" created="Tue, 29 Aug 2023 17:15:37 GMT"/>
							<outline text="}" created="Tue, 29 Aug 2023 17:15:36 GMT"/>
							</outline>
						<outline text="const wp = wpcom (accessToken);"/>
						<outline text="const site = wp.site (idSite);" isComment="true"/>
						<outline text="" created="Sat, 15 Mar 2025 15:46:11 GMT"/>
						<outline text="const theRequest = {" created="Sat, 15 Mar 2025 15:46:33 GMT">
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="path: `/sites/${idSite}/categories/new`,"/>
							<outline text="body: jstruct"/>
							<outline text="}" created="Sat, 15 Mar 2025 15:46:40 GMT"/>
							</outline>
						<outline text="wp.req.post (theRequest, function (err, theCategory) {">
							<outline text="if (err) {" created="Sat, 15 Mar 2025 15:23:25 GMT">
								<outline text="callback (err);" created="Sat, 15 Mar 2025 15:23:29 GMT"/>
								<outline text="}" created="Sat, 15 Mar 2025 15:23:32 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 15 Mar 2025 15:23:33 GMT">
								<outline text="callback (undefined, convertCategory (theCategory));" created="Sat, 15 Mar 2025 15:23:42 GMT"/>
								<outline text="}" created="Sat, 15 Mar 2025 15:23:34 GMT"/>
								</outline>
							<outline text="});" created="Sat, 15 Mar 2025 15:47:34 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function deleteSiteCategory (accessToken, idSite, slug, callback) { //3/15/25 by DW">
						<outline text="const theRequest = {">
							<outline text="url: `https://public-api.wordpress.com/rest/v1.1/sites/${idSite}/categories/slug:${slug}/delete`,"/>
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="headers: {">
								<outline text="'Authorization': `Bearer ${accessToken}`"/>
								<outline text="},"/>
								</outline>
							<outline text="json: true"/>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="callback (err);" created="Mon, 08 Nov 2021 17:33:37 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if ((response.statusCode &gt;= 200) &amp;&amp; (response.statusCode &lt;= 299)) {" created="Fri, 15 Sep 2023 15:08:11 GMT">
									<outline text="callback (undefined, body);" created="Tue, 22 Aug 2023 16:41:07 GMT"/>
									<outline text="}" created="Fri, 15 Sep 2023 15:08:21 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 15 Sep 2023 15:08:22 GMT">
									<outline text="const message = &quot;Couldn't read HTML page because status code == &quot; + response.statusCode;" created="Thu, 13 Jun 2024 14:03:37 GMT"/>
									<outline text="callback ({message});" created="Mon, 10 Jun 2024 19:04:25 GMT"/>
									<outline text="}" created="Fri, 15 Sep 2023 15:08:24 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function updateSiteCategory (accessToken, idSite, slug, jsontext, callback) { //5/11/25 by DW">
						<outline text="const jstruct = getObjectFromJsontext (jsontext, callback);" created="Tue, 29 Aug 2023 17:15:15 GMT"/>
						<outline text="if (jstruct === undefined) {" created="Tue, 29 Aug 2023 17:15:31 GMT">
							<outline text="return;" created="Tue, 29 Aug 2023 17:15:37 GMT"/>
							<outline text="}" created="Tue, 29 Aug 2023 17:15:36 GMT"/>
							</outline>
						<outline text="const wp = wpcom (accessToken);"/>
						<outline text="const theRequest = {" created="Sat, 15 Mar 2025 15:46:33 GMT">
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="path: `/sites/${idSite}/categories/slug:${slug}`," created="Sun, 11 May 2025 15:11:42 GMT"/>
							<outline text="path: `/sites/${idSite}/categories/${idCategory}`," isComment="true" created="Sun, 11 May 2025 15:11:42 GMT"/>
							<outline text="body: jstruct"/>
							<outline text="}" created="Sat, 15 Mar 2025 15:46:40 GMT"/>
							</outline>
						<outline text="wp.req.post (theRequest, function (err, theCategory) {">
							<outline text="if (err) {" created="Sat, 15 Mar 2025 15:23:25 GMT">
								<outline text="callback (err);" created="Sat, 15 Mar 2025 15:23:29 GMT"/>
								<outline text="}" created="Sat, 15 Mar 2025 15:23:32 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 15 Mar 2025 15:23:33 GMT">
								<outline text="callback (undefined, convertCategory (theCategory));" created="Sat, 15 Mar 2025 15:23:42 GMT"/>
								<outline text="}" created="Sat, 15 Mar 2025 15:23:34 GMT"/>
								</outline>
							<outline text="});" created="Sat, 15 Mar 2025 15:47:34 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function uploadImage (accessToken, base64Data, filename, mimeType, idSite, callback) { //11/10/24 by DW" created="Sun, 10 Nov 2024 16:20:19 GMT">
						<outline text="" created="Wed, 26 Mar 2025 13:58:16 GMT"/>
						<outline text="if ((idSite == undefined) || (idSite == &quot;undefined&quot;)) { //3/26/25 by DW" created="Wed, 26 Mar 2025 13:51:49 GMT">
							<outline text="const message = &quot;Can't upload the image because no site was specified.&quot;;" created="Wed, 26 Mar 2025 13:52:10 GMT"/>
							<outline text="callback ({message});" created="Wed, 26 Mar 2025 13:52:30 GMT"/>
							<outline text="return;" created="Wed, 26 Mar 2025 13:52:37 GMT"/>
							<outline text="}" created="Wed, 26 Mar 2025 13:51:59 GMT"/>
							</outline>
						<outline text="" created="Wed, 26 Mar 2025 13:51:50 GMT"/>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="" created="Tue, 12 Nov 2024 22:21:53 GMT"/>
						<outline text="const imageBuffer = Buffer.from (base64Data, &quot;base64&quot;);"/>
						<outline text="" created="Wed, 13 Nov 2024 16:18:29 GMT"/>
						<outline text="function writeBufferToTempFile (callback) {" created="Mon, 11 Nov 2024 22:33:38 GMT">
							<outline text="const f = &quot;data/tmp/&quot; + idSite + &quot;/&quot; + filename;" created="Mon, 11 Nov 2024 22:34:28 GMT"/>
							<outline text="utils.sureFilePath (f, function () {" created="Mon, 11 Nov 2024 22:50:21 GMT">
								<outline text="fs.writeFile (f, imageBuffer, function (err) {" created="Mon, 11 Nov 2024 22:35:42 GMT">
									<outline text="if (err) {" created="Mon, 11 Nov 2024 22:36:30 GMT">
										<outline text="callback (err);" created="Mon, 11 Nov 2024 22:36:51 GMT"/>
										<outline text="}" created="Mon, 11 Nov 2024 22:36:32 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 11 Nov 2024 22:36:33 GMT">
										<outline text="callback (undefined, f);" created="Mon, 11 Nov 2024 22:36:59 GMT"/>
										<outline text="}" created="Mon, 11 Nov 2024 22:36:34 GMT"/>
										</outline>
									<outline text="});" created="Mon, 11 Nov 2024 22:36:02 GMT"/>
									</outline>
								<outline text="});" created="Mon, 11 Nov 2024 22:50:23 GMT"/>
								</outline>
							<outline text="}" created="Mon, 11 Nov 2024 22:34:17 GMT"/>
							</outline>
						<outline text="" created="Mon, 11 Nov 2024 22:33:38 GMT"/>
						<outline text="writeBufferToTempFile (function (err, relpath) {" created="Mon, 11 Nov 2024 22:33:38 GMT">
							<outline text="if (err) {" created="Mon, 11 Nov 2024 22:37:39 GMT">
								<outline text="callback (err);" created="Mon, 11 Nov 2024 22:37:42 GMT"/>
								<outline text="}" created="Mon, 11 Nov 2024 22:37:46 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 11 Nov 2024 22:37:46 GMT">
								<outline text="const fileStream = fs.createReadStream (relpath);"/>
								<outline text="fileStream.on (&quot;close&quot;, function () {">
									<outline text="if (config.flDeleteTempFiles) {" created="Wed, 13 Nov 2024 16:16:28 GMT">
										<outline text="fs.unlink (relpath, function (err) {">
											<outline text="});"/>
											</outline>
										<outline text="}" created="Wed, 13 Nov 2024 16:16:37 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="const theImage = {" created="Sun, 10 Nov 2024 16:21:46 GMT">
									<outline text="file: fileStream,"/>
									<outline text="filename,"/>
									<outline text="&quot;Content-Type&quot;: mimeType"/>
									<outline text="};" created="Sun, 10 Nov 2024 16:21:52 GMT"/>
									</outline>
								<outline text="site.addMediaFiles (theImage, function (err, data) {" created="Sun, 10 Nov 2024 16:22:30 GMT">
									<outline text="if (err) {" created="Sun, 10 Nov 2024 16:23:20 GMT">
										<outline text="callback (err);" created="Sun, 10 Nov 2024 16:23:22 GMT"/>
										<outline text="}" created="Sun, 10 Nov 2024 16:23:27 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 10 Nov 2024 16:23:28 GMT">
										<outline text="if (data.media.length == 0) {" created="Wed, 13 Nov 2024 15:59:34 GMT">
											<outline text="const message = &quot;No media files were uploaded.&quot;;" created="Wed, 13 Nov 2024 16:00:18 GMT"/>
											<outline text="callback ({message});" created="Wed, 13 Nov 2024 16:00:41 GMT"/>
											<outline text="}" created="Wed, 13 Nov 2024 16:00:06 GMT"/>
											</outline>
										<outline text="else {" created="Wed, 13 Nov 2024 16:00:07 GMT">
											<outline text="callback (undefined, convertMediaObject (data.media [0]));" created="Sun, 10 Nov 2024 16:23:50 GMT"/>
											<outline text="}" created="Wed, 13 Nov 2024 16:00:09 GMT"/>
											</outline>
										<outline text="}" created="Sun, 10 Nov 2024 16:23:29 GMT"/>
										</outline>
									<outline text="});" created="Sun, 10 Nov 2024 16:23:03 GMT"/>
									</outline>
								<outline text="}" created="Mon, 11 Nov 2024 22:37:48 GMT"/>
								</outline>
							<outline text="});" created="Mon, 11 Nov 2024 22:37:35 GMT"/>
							</outline>
						<outline text="}" created="Sun, 10 Nov 2024 16:21:33 GMT"/>
						</outline>
					<outline text="function uploadImage (accessToken, imageBuffer, imageName, mimeType, idSite, callback) { //11/10/24 by DW" isComment="true" created="Sun, 10 Nov 2024 16:20:19 GMT">
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="" created="Mon, 11 Nov 2024 22:33:37 GMT"/>
						<outline text="function writeBufferToTempFile (callback) {" created="Mon, 11 Nov 2024 22:33:38 GMT">
							<outline text="const f = &quot;data/tmp/1200.png&quot;;" created="Mon, 11 Nov 2024 22:34:28 GMT"/>
							<outline text="" created="Tue, 12 Nov 2024 16:30:37 GMT"/>
							<outline text="console.log (&quot;writeBufferToTempFile: imageBuffer.length == &quot; + imageBuffer.length);" created="Tue, 12 Nov 2024 16:30:38 GMT"/>
							<outline text="console.log (&quot;writeBufferToTempFile: Buffer.isBuffer (imageBuffer) == &quot; + Buffer.isBuffer (imageBuffer));" created="Tue, 12 Nov 2024 16:30:38 GMT"/>
							<outline text="" created="Tue, 12 Nov 2024 16:37:02 GMT"/>
							<outline text="if (typeof imageBuffer === &quot;string&quot;) {">
								<outline text="imageBuffer = Buffer.from (imageBuffer, &quot;binary&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="" created="Tue, 12 Nov 2024 16:30:38 GMT"/>
							<outline text="utils.sureFilePath (f, function () {" created="Mon, 11 Nov 2024 22:50:21 GMT">
								<outline text="fs.writeFile (f, imageBuffer, function (err) {" created="Mon, 11 Nov 2024 22:35:42 GMT">
									<outline text="if (err) {" created="Mon, 11 Nov 2024 22:36:30 GMT">
										<outline text="callback (err);" created="Mon, 11 Nov 2024 22:36:51 GMT"/>
										<outline text="}" created="Mon, 11 Nov 2024 22:36:32 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 11 Nov 2024 22:36:33 GMT">
										<outline text="callback (undefined, f);" created="Mon, 11 Nov 2024 22:36:59 GMT"/>
										<outline text="}" created="Mon, 11 Nov 2024 22:36:34 GMT"/>
										</outline>
									<outline text="});" created="Mon, 11 Nov 2024 22:36:02 GMT"/>
									</outline>
								<outline text="});" created="Mon, 11 Nov 2024 22:50:23 GMT"/>
								</outline>
							<outline text="}" created="Mon, 11 Nov 2024 22:34:17 GMT"/>
							</outline>
						<outline text="" created="Mon, 11 Nov 2024 22:33:38 GMT"/>
						<outline text="writeBufferToTempFile (function (err, relpath) {" created="Mon, 11 Nov 2024 22:33:38 GMT">
							<outline text="if (err) {" created="Mon, 11 Nov 2024 22:37:39 GMT">
								<outline text="callback (err);" created="Mon, 11 Nov 2024 22:37:42 GMT"/>
								<outline text="}" created="Mon, 11 Nov 2024 22:37:46 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 11 Nov 2024 22:37:46 GMT">
								<outline text="const fileStream = fs.createReadStream (relpath);"/>
								<outline text="fileStream.on (&quot;close&quot;, function () {">
									<outline text="fs.unlink (relpath, function (err) {">
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="const theImage = {" created="Sun, 10 Nov 2024 16:21:46 GMT">
									<outline text="file: fileStream,"/>
									<outline text="filename: imageName,"/>
									<outline text="'Content-Type': mimeType"/>
									<outline text="};" created="Sun, 10 Nov 2024 16:21:52 GMT"/>
									</outline>
								<outline text="site.addMediaFiles (theImage, function (err, data) {" created="Sun, 10 Nov 2024 16:22:30 GMT">
									<outline text="if (err) {" created="Sun, 10 Nov 2024 16:23:20 GMT">
										<outline text="callback (err);" created="Sun, 10 Nov 2024 16:23:22 GMT"/>
										<outline text="}" created="Sun, 10 Nov 2024 16:23:27 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 10 Nov 2024 16:23:28 GMT">
										<outline text="callback (undefined, convertMediaObject (data));" created="Sun, 10 Nov 2024 16:23:50 GMT"/>
										<outline text="}" created="Sun, 10 Nov 2024 16:23:29 GMT"/>
										</outline>
									<outline text="});" created="Sun, 10 Nov 2024 16:23:03 GMT"/>
									</outline>
								<outline text="}" created="Mon, 11 Nov 2024 22:37:48 GMT"/>
								</outline>
							<outline text="});" created="Mon, 11 Nov 2024 22:37:35 GMT"/>
							</outline>
						<outline text="}" created="Sun, 10 Nov 2024 16:21:33 GMT"/>
						</outline>
					</outline>
				<outline text="//storage" created="Fri, 24 May 2024 15:48:31 GMT">
					<outline text="var usernameCache = new Object ();" created="Mon, 25 Mar 2024 14:03:52 GMT"/>
					<outline text="var whenLastUsernameCacheStart = new Date ();" created="Mon, 25 Mar 2024 14:04:23 GMT"/>
					<outline text="" created="Fri, 24 May 2024 15:49:35 GMT"/>
					<outline text="function getSpecialDataFile (token, fname, callback) {" created="Tue, 09 Apr 2024 17:11:25 GMT">
						<outline text="getUsername (token, function (err, username) {" created="Tue, 09 Apr 2024 17:12:13 GMT">
							<outline text="if (err) {" created="Tue, 09 Apr 2024 17:13:07 GMT">
								<outline text="callback (err);" created="Tue, 09 Apr 2024 17:13:10 GMT"/>
								<outline text="}" created="Tue, 09 Apr 2024 17:13:13 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 09 Apr 2024 17:13:13 GMT">
								<outline text="const flprivate = true;" created="Tue, 09 Apr 2024 17:13:40 GMT"/>
								<outline text="readUserFile (username, fname, flprivate, 0, 0, function (err, theFile) {" created="Tue, 09 Apr 2024 17:10:47 GMT">
									<outline text="if (err) {" created="Tue, 09 Apr 2024 17:14:13 GMT">
										<outline text="callback (err);" created="Tue, 09 Apr 2024 17:14:17 GMT"/>
										<outline text="}" created="Tue, 09 Apr 2024 17:14:20 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 09 Apr 2024 17:14:21 GMT">
										<outline text="console.log (&quot;getSpecialDataFile: fname == &quot; + fname + &quot;, theFile == &quot; + utils.jsonStringify (theFile));" isComment="true" created="Tue, 09 Apr 2024 17:14:28 GMT"/>
										<outline text="var flerror = false;" created="Tue, 09 Apr 2024 17:51:41 GMT"/>
										<outline text="try {" created="Tue, 09 Apr 2024 17:51:41 GMT">
											<outline text="theData = JSON.parse (theFile.filecontents);" created="Tue, 09 Apr 2024 17:51:45 GMT"/>
											<outline text="}" created="Tue, 09 Apr 2024 17:52:04 GMT"/>
											</outline>
										<outline text="catch (err) {" created="Tue, 09 Apr 2024 17:52:05 GMT">
											<outline text="callback (err);" created="Tue, 09 Apr 2024 17:52:10 GMT"/>
											<outline text="flerror = true;" created="Tue, 09 Apr 2024 17:52:47 GMT"/>
											<outline text="}" created="Tue, 09 Apr 2024 17:52:15 GMT"/>
											</outline>
										<outline text="if (!flerror) {" created="Tue, 09 Apr 2024 17:51:41 GMT">
											<outline text="console.log (&quot;getSpecialDataFile: fname == &quot; + fname + &quot;, theData == &quot; + utils.jsonStringify (theData));" isComment="true" created="Tue, 09 Apr 2024 17:14:28 GMT"/>
											<outline text="callback (undefined, theData);" created="Tue, 09 Apr 2024 17:15:07 GMT"/>
											<outline text="}" created="Tue, 09 Apr 2024 17:53:04 GMT"/>
											</outline>
										<outline text="}" created="Tue, 09 Apr 2024 17:14:23 GMT"/>
										</outline>
									<outline text="});" created="Tue, 09 Apr 2024 17:12:36 GMT"/>
									</outline>
								<outline text="}" created="Tue, 09 Apr 2024 17:13:15 GMT"/>
								</outline>
							<outline text="});" created="Tue, 09 Apr 2024 17:13:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 09 Apr 2024 17:56:00 GMT"/>
						</outline>
					<outline text="function emojiProcess (s) {">
						<outline text="function addSpan (code, name) {">
							<outline text="return (&quot;&lt;span class=\&quot;spEmoji\&quot;&gt;&quot; + code + &quot;&lt;/span&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (emoji.emojify (s, undefined, addSpan));"/>
						<outline text="}"/>
						</outline>
					<outline text="function markdownProcess (s) {">
						<outline text="Changes" isComment="true" created="Fri, 19 Apr 2024 15:14:13 GMT">
							<outline text="11/16/24; 11:17:33 AM by DW" created="Sat, 16 Nov 2024 16:17:33 GMT">
								<outline text="Hold on we're supposed to be processing markdown text here. " created="Sat, 16 Nov 2024 16:17:34 GMT"/>
								<outline text="Turning it back on. Geez." created="Sat, 16 Nov 2024 16:17:45 GMT"/>
								</outline>
							<outline text="4/19/24; 11:30:21 AM by DW" created="Fri, 19 Apr 2024 15:14:14 GMT">
								<outline text="This is why Markdown can't work within something generated by MediumEditor. " created="Fri, 19 Apr 2024 15:14:16 GMT">
									<outline text="MediumEditor generates a series of &lt;p&gt;." created="Fri, 19 Apr 2024 15:30:45 GMT"/>
									<outline text="Markdown can't go into them, that's the rule of mixed markdown and html." created="Fri, 19 Apr 2024 15:30:59 GMT"/>
									<outline text="So everything is within a &lt;p&gt; that means Markdown text will not be processed. " created="Fri, 19 Apr 2024 15:31:12 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="s = marked (s);" created="Fri, 19 Apr 2024 15:13:35 GMT"/>
						<outline text="return (s);" created="Fri, 19 Apr 2024 15:13:44 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="function processMarkdownImages (markdowntext) { //11/16/24 by DW" created="Sat, 16 Nov 2024 15:14:53 GMT">
						<outline text="Changes" isComment="true" created="Sat, 16 Nov 2024 15:18:41 GMT">
							<outline text="11/16/24; 10:18:43 AM by DW" created="Sat, 16 Nov 2024 15:18:42 GMT">
								<outline text="We convert markdown images to Gutenberg blocks describing an image." created="Sat, 16 Nov 2024 15:18:43 GMT"/>
								</outline>
							</outline>
						<outline text="if (config.flConvertImagesToGutenberg) {" created="Sat, 16 Nov 2024 15:17:58 GMT">
							<outline text="const imageRegex = /!\[([^\]]*)\]\(([^)]+)\)/g;"/>
							<outline text="function processOneImage (alttext, url) {" created="Sat, 16 Nov 2024 15:16:42 GMT">
								<outline text="const templatetext = &quot;&lt;!-- wp:image {\&quot;id\&quot;:4375, \&quot;sizeSlug\&quot;: \&quot;large\&quot;} --&gt;\n&lt;figure class=\&quot;wp-block-image size-large is-resized\&quot;&gt;&lt;a href=\&quot;[%url%]\&quot;&gt;&lt;img src=\&quot;[%url%]\&quot; alt=\&quot;[%alttext%]\&quot; class=\&quot;wp-image-4375\&quot; style=\&quot;width:86px;height:auto\&quot;/&gt;&lt;/a&gt;&lt;/figure&gt;\n&lt;!-- /wp:image --&gt;&quot;" created="Sat, 16 Nov 2024 14:58:13 GMT"/>
								<outline text="const newtext = utils.multipleReplaceAll (templatetext, {alttext, url}, false, &quot;[%&quot;, &quot;%]&quot;);"/>
								<outline text="return (newtext);" created="Sat, 16 Nov 2024 14:58:13 GMT"/>
								<outline text="}" created="Sat, 16 Nov 2024 15:16:52 GMT"/>
								</outline>
							<outline text="const newMarkdowntext = markdowntext.replace (imageRegex, function (match, altText, url) {" created="Sat, 16 Nov 2024 14:44:42 GMT">
								<outline text="return (processOneImage (altText, url));"/>
								<outline text="});" created="Sat, 16 Nov 2024 14:45:08 GMT"/>
								</outline>
							<outline text="return (newMarkdowntext);" created="Sat, 16 Nov 2024 15:35:23 GMT"/>
							<outline text="}" created="Sat, 16 Nov 2024 15:18:16 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 16 Nov 2024 15:18:20 GMT">
							<outline text="return (markdowntext);" created="Sat, 16 Nov 2024 15:18:22 GMT"/>
							<outline text="}" created="Sat, 16 Nov 2024 15:18:26 GMT"/>
							</outline>
						<outline text="}" created="Sat, 16 Nov 2024 15:15:26 GMT"/>
						</outline>
					<outline text="function processPostText (token, theText, callback) {" created="Tue, 09 Apr 2024 17:11:25 GMT">
						<outline text="theText = emojiProcess (theText); //4/15/24 by DW" created="Mon, 15 Apr 2024 16:02:31 GMT"/>
						<outline text="theText = processMarkdownImages (theText); //11/16/24 by DW" created="Mon, 15 Apr 2024 16:02:31 GMT"/>
						<outline text="theText = markdownProcess (theText); //4/18/24 by DW" created="Mon, 15 Apr 2024 16:02:31 GMT"/>
						<outline text="getSpecialDataFile (token, &quot;glossary.json&quot;, function (err, theGlossary) {" created="Tue, 09 Apr 2024 17:57:42 GMT">
							<outline text="if (!err) {" created="Mon, 13 May 2024 14:12:26 GMT">
								<outline text="theText = utils.multipleReplaceAll (theText, theGlossary, false);"/>
								<outline text="}" created="Mon, 13 May 2024 14:12:32 GMT"/>
								</outline>
							<outline text="callback (undefined, theText);" created="Mon, 13 May 2024 14:12:26 GMT"/>
							<outline text="});" created="Tue, 09 Apr 2024 17:58:00 GMT"/>
							</outline>
						<outline text="}" created="Tue, 09 Apr 2024 17:12:11 GMT"/>
						</outline>
					<outline text="function logPublish (verb, theData) { //2/23/25 by DW" created="Sun, 23 Feb 2025 17:22:13 GMT">
						<outline text="const eventData = {" created="Sat, 21 Dec 2024 17:22:36 GMT">
							<outline text="title: theData.title," created="Sun, 23 Feb 2025 17:27:11 GMT"/>
							<outline text="author: theData.author.username," created="Sun, 23 Feb 2025 17:25:40 GMT"/>
							<outline text="url: theData.url," created="Sun, 23 Feb 2025 17:26:12 GMT"/>
							<outline text="whenCreated: theData.whenCreated" isComment="true" created="Sun, 23 Feb 2025 17:26:44 GMT"/>
							<outline text="};" created="Sat, 21 Dec 2024 17:22:45 GMT"/>
							</outline>
						<outline text="addToLog (verb + &quot;Post&quot;, undefined, eventData);" created="Sat, 21 Dec 2024 16:51:17 GMT"/>
						<outline text="}" created="Sun, 23 Feb 2025 17:22:28 GMT"/>
						</outline>
					<outline text="" created="Sat, 05 Jul 2025 14:24:29 GMT"/>
					<outline text="function getMetadataForPost (theDraft) { //7/5/25 by DW -- xxx" created="Sat, 05 Jul 2025 14:24:29 GMT">
						<outline text="Changes" isComment="true" created="Sat, 05 Jul 2025 14:32:52 GMT">
							<outline text="7/5/25; 10:32:56 AM by DW" created="Sat, 05 Jul 2025 14:32:56 GMT">
								<outline text="Create a metadata object suitable for including in the post structure to be sent to wordpress." created="Sat, 05 Jul 2025 14:32:56 GMT"/>
								<outline text="It looks something like this" created="Sat, 05 Jul 2025 14:33:22 GMT">
									<outline text="metadata: [">
										<outline text="{">
											<outline text="key: &quot;source_app&quot;,"/>
											<outline text="value: &quot;wpidentity&quot;"/>
											<outline text="},"/>
											</outline>
										<outline text="{">
											<outline text="key: &quot;post_type&quot;,"/>
											<outline text="value: &quot;generated&quot;"/>
											<outline text="}"/>
											</outline>
										<outline text="]"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="var theMetadata = {" created="Sat, 05 Jul 2025 14:25:44 GMT">
							<outline text="apiVersion: &quot;0.4.0&quot;," created="Sat, 05 Jul 2025 14:39:10 GMT"/>
							<outline text="title: theDraft.title," created="Sat, 05 Jul 2025 14:44:41 GMT"/>
							<outline text="linksTo: &quot;&quot;," created="Sat, 05 Jul 2025 16:31:25 GMT"/>
							<outline text="markdowntext: &quot;&quot;," created="Sat, 05 Jul 2025 16:31:45 GMT"/>
							<outline text="idDraft: theDraft.idDraft," created="Sat, 05 Jul 2025 14:29:00 GMT"/>
							<outline text="};" created="Sat, 05 Jul 2025 14:25:52 GMT"/>
							</outline>
						<outline text="if (theDraft.linkblogLink !== undefined) {" created="Sat, 05 Jul 2025 14:27:45 GMT">
							<outline text="theMetadata.linksTo = theDraft.linkblogLink;" created="Sat, 05 Jul 2025 14:28:20 GMT"/>
							<outline text="}" created="Sat, 05 Jul 2025 14:31:27 GMT"/>
							</outline>
						<outline text="if (theDraft.contentType == &quot;markdown&quot;) {" created="Sat, 05 Jul 2025 14:27:45 GMT">
							<outline text="theMetadata.markdowntext = theDraft.content;" created="Sat, 05 Jul 2025 14:28:20 GMT"/>
							<outline text="}" created="Sat, 05 Jul 2025 14:28:05 GMT"/>
							</outline>
						<outline text="" created="Sat, 05 Jul 2025 14:34:13 GMT"/>
						<outline text="var theArray = new Array ();" created="Sat, 05 Jul 2025 14:34:14 GMT"/>
						<outline text="for (var key in theMetadata) {" created="Sat, 05 Jul 2025 14:40:22 GMT">
							<outline text="theArray.push ({" created="Sat, 05 Jul 2025 14:40:37 GMT">
								<outline text="key: config.postMetadataPrefix + &quot;_&quot; + key, //wordlandTitle for example" created="Sat, 05 Jul 2025 14:41:50 GMT"/>
								<outline text="value: theMetadata [key]" created="Sat, 05 Jul 2025 14:42:01 GMT"/>
								<outline text="});" created="Sat, 05 Jul 2025 14:41:46 GMT"/>
								</outline>
							<outline text="}" created="Sat, 05 Jul 2025 14:40:31 GMT"/>
							</outline>
						<outline text="" created="Sat, 05 Jul 2025 14:46:25 GMT"/>
						<outline text="console.log (&quot;getMetadataForPost: theArray == &quot; + utils.jsonStringify (theArray));" created="Sat, 05 Jul 2025 14:46:25 GMT"/>
						<outline text="" created="Sat, 05 Jul 2025 14:46:25 GMT"/>
						<outline text="return (theArray);" created="Sat, 05 Jul 2025 14:25:54 GMT"/>
						<outline text="}" created="Sat, 05 Jul 2025 14:24:51 GMT"/>
						</outline>
					<outline text="" created="Tue, 09 Apr 2024 17:11:25 GMT"/>
					<outline text="function addPost (accessToken, idSite, jsontext, callback) { //8/29/23 by DW" created="Tue, 29 Aug 2023 16:23:18 GMT">
						<outline text="Changes" isComment="true" created="Tue, 29 Aug 2023 16:44:10 GMT">
							<outline text="5/13/24; 10:20:55 AM by DW" created="Mon, 13 May 2024 14:20:54 GMT">
								<outline text="We weren't calling processPostText. " created="Mon, 13 May 2024 14:20:55 GMT"/>
								</outline>
							<outline text="9/13/23; 11:13:55 AM by DW" created="Wed, 13 Sep 2023 15:13:53 GMT">
								<outline text="Convert the external format to the one required by the WordPress api. " created="Wed, 13 Sep 2023 15:13:56 GMT"/>
								<outline text="We hard-code a lot of options that maybe we'll want to allow the caller to specify later, but for now I don't know what the call those options, so we'll come back to this." created="Wed, 13 Sep 2023 15:20:12 GMT"/>
								</outline>
							<outline text="8/29/23; 12:44:12 PM by DW" created="Tue, 29 Aug 2023 16:44:11 GMT">
								<outline text="thePost should contain values like title, content, status, date, categories..." created="Tue, 29 Aug 2023 16:44:13 GMT"/>
								<outline text="I got a good list from ChatGPT but haven't yet found the place where they're defined by WordPress." created="Tue, 29 Aug 2023 16:44:50 GMT"/>
								</outline>
							</outline>
						<outline text="const jstruct = getObjectFromJsontext (jsontext, callback);" created="Tue, 29 Aug 2023 17:15:15 GMT"/>
						<outline text="if (jstruct === undefined) {" created="Tue, 29 Aug 2023 17:15:31 GMT">
							<outline text="return;" created="Tue, 29 Aug 2023 17:15:37 GMT"/>
							<outline text="}" created="Tue, 29 Aug 2023 17:15:36 GMT"/>
							</outline>
						<outline text="" created="Wed, 13 Sep 2023 15:14:46 GMT"/>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="" created="Wed, 13 Sep 2023 15:16:37 GMT"/>
						<outline text="processPostText (accessToken, jstruct.content, function (err, theProcessedContent) { //5/13/24 by DW" created="Mon, 13 May 2024 14:21:28 GMT">
							<outline text="const thePost = {" created="Wed, 13 Sep 2023 15:16:37 GMT">
								<outline text="title: jstruct.title," created="Wed, 13 Sep 2023 15:16:55 GMT"/>
								<outline text="content: theProcessedContent, //5/13/24 by DW" created="Wed, 13 Sep 2023 15:16:55 GMT"/>
								<outline text="categories: jstruct.categories, //10/21/24 by DW" created="Wed, 13 Sep 2023 21:54:34 GMT"/>
								<outline text="categories: getCategoriesObject (jstruct), //9/14/23 by DW" isComment="true" created="Tue, 29 Aug 2023 16:50:37 GMT"/>
								<outline text="" created="Sat, 22 Mar 2025 16:23:10 GMT"/>
								<outline text="excerpt: jstruct.excerpt, //3/22/25 by DW"/>
								<outline text="featured_image: jstruct.idFeaturedImage, //3/22/25 by DW"/>
								<outline text="" created="Sat, 22 Mar 2025 16:23:11 GMT"/>
								<outline text="status: &quot;publish&quot;," created="Tue, 29 Aug 2023 16:49:42 GMT"/>
								<outline text="date: new Date ().toGMTString ()," created="Tue, 29 Aug 2023 16:49:59 GMT"/>
								<outline text="format: &quot;standard&quot;," created="Tue, 29 Aug 2023 16:50:27 GMT"/>
								<outline text="comment_status: &quot;open&quot;," created="Tue, 29 Aug 2023 16:51:09 GMT"/>
								<outline text="" created="Sat, 05 Jul 2025 14:43:10 GMT"/>
								<outline text="metadata: getMetadataForPost (jstruct) //7/5/25 by DW" created="Sat, 05 Jul 2025 14:43:10 GMT"/>
								<outline text="};" created="Wed, 13 Sep 2023 15:16:50 GMT"/>
								</outline>
							<outline text="console.log (&quot;addPost: thePost == &quot; + utils.jsonStringify (thePost)); //5/8/24 by DW" isComment="true" created="Wed, 08 May 2024 21:30:30 GMT"/>
							<outline text="site.addPost (thePost, function (err, theNewPost) {">
								<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
									<outline text="console.log (&quot;addPost: err.message == &quot; + err.message); //5/8/24 by DW" created="Wed, 08 May 2024 21:30:30 GMT"/>
									<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
									<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
									<outline text="var theConvertedPost = convertPost (theNewPost); //5/17/24 by DW" created="Fri, 17 May 2024 20:51:29 GMT"/>
									<outline text="theConvertedPost.whenPublished = new Date ();" created="Fri, 17 May 2024 20:51:53 GMT"/>
									<outline text="console.log (&quot;addPost: theConvertedPost == &quot; + utils.jsonStringify (theConvertedPost)); //5/8/24 by DW" created="Wed, 08 May 2024 21:30:30 GMT"/>
									<outline text="logPublish (&quot;add&quot;, theConvertedPost); //2/23/25 by DW" created="Sun, 23 Feb 2025 17:28:17 GMT"/>
									<outline text="callback (undefined, theConvertedPost);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
									<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 13 Sep 2023 15:26:59 GMT"/>
								</outline>
							<outline text="});" created="Mon, 13 May 2024 14:21:30 GMT"/>
							</outline>
						<outline text="}" created="Tue, 29 Aug 2023 16:23:49 GMT"/>
						</outline>
					<outline text="function updatePost (accessToken, idSite, idPost, jsontext, callback) { //8/29/23 by DW" created="Tue, 29 Aug 2023 17:12:16 GMT">
						<outline text="const jstruct = getObjectFromJsontext (jsontext, callback);" created="Tue, 29 Aug 2023 17:15:15 GMT"/>
						<outline text="if (jstruct === undefined) {" created="Tue, 29 Aug 2023 17:15:31 GMT">
							<outline text="return;" created="Tue, 29 Aug 2023 17:15:37 GMT"/>
							<outline text="}" created="Tue, 29 Aug 2023 17:15:36 GMT"/>
							</outline>
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="const post = site.post (idPost);" created="Tue, 29 Aug 2023 17:16:24 GMT"/>
						<outline text="" created="Wed, 13 Sep 2023 15:43:22 GMT"/>
						<outline text="processPostText (accessToken, jstruct.content, function (err, theProcessedContent) {" created="Tue, 09 Apr 2024 17:16:08 GMT">
							<outline text="const thePost = {" created="Wed, 13 Sep 2023 15:43:22 GMT">
								<outline text="title: jstruct.title," created="Wed, 13 Sep 2023 15:43:35 GMT"/>
								<outline text="content: theProcessedContent," created="Wed, 13 Sep 2023 15:43:42 GMT"/>
								<outline text="categories: jstruct.categories, //10/21/24 by DW" created="Wed, 13 Sep 2023 21:54:34 GMT"/>
								<outline text="categories: getCategoriesObject (jstruct), //9/14/23 by DW" isComment="true" created="Wed, 13 Sep 2023 21:54:34 GMT"/>
								<outline text="" created="Sat, 22 Mar 2025 16:23:10 GMT"/>
								<outline text="excerpt: jstruct.excerpt, //3/22/25 by DW"/>
								<outline text="featured_image: jstruct.idFeaturedImage, //3/22/25 by DW"/>
								<outline text="" created="Sat, 22 Mar 2025 16:23:11 GMT"/>
								<outline text="status: &quot;publish&quot;," created="Wed, 13 Sep 2023 15:43:47 GMT"/>
								<outline text="" created="Sat, 05 Jul 2025 14:44:04 GMT"/>
								<outline text="metadata: getMetadataForPost (jstruct) //7/5/25 by DW" created="Sat, 05 Jul 2025 14:43:10 GMT"/>
								<outline text="};" created="Wed, 13 Sep 2023 15:43:29 GMT"/>
								</outline>
							<outline text="post.update (thePost, function (err, theNewPost) {">
								<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
									<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
									<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
									<outline text="var theConvertedPost = convertPost (theNewPost); //5/17/24 by DW" created="Fri, 17 May 2024 20:51:29 GMT"/>
									<outline text="theConvertedPost.whenPublished = new Date ();" created="Fri, 17 May 2024 20:51:53 GMT"/>
									<outline text="console.log (&quot;updatePost: theConvertedPost == &quot; + utils.jsonStringify (theConvertedPost)); //5/8/24 by DW" created="Wed, 08 May 2024 21:30:30 GMT"/>
									<outline text="logPublish (&quot;update&quot;, theConvertedPost); //2/23/25 by DW" created="Sun, 23 Feb 2025 17:28:17 GMT"/>
									<outline text="callback (undefined, theConvertedPost);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
									<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 13 Sep 2023 15:33:06 GMT"/>
								</outline>
							<outline text="});" created="Tue, 09 Apr 2024 17:16:28 GMT"/>
							</outline>
						<outline text="}" created="Tue, 29 Aug 2023 17:12:51 GMT"/>
						</outline>
					<outline text="function deletePost (accessToken, idSite, idPost, callback) { //9/4/23 by DW" created="Tue, 29 Aug 2023 17:12:16 GMT">
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="const site = wp.site (idSite);" created="Mon, 28 Aug 2023 22:56:55 GMT"/>
						<outline text="const post = site.post (idPost);" created="Tue, 29 Aug 2023 17:16:24 GMT"/>
						<outline text="post.delete (function (err, theDeletedPost) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="callback (undefined, convertPost (theDeletedPost));" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Thu, 14 Sep 2023 12:47:05 GMT"/>
							</outline>
						<outline text="}" created="Tue, 29 Aug 2023 17:12:51 GMT"/>
						</outline>
					<outline text="function getSubscriptions (accessToken, callback) { //9/5/23 by DW" created="Tue, 05 Sep 2023 13:06:28 GMT">
						<outline text="const wp = wpcom (accessToken);" created="Sat, 26 Aug 2023 16:24:49 GMT"/>
						<outline text="wp.req.get (&quot;/read/following/mine&quot;, {}, function (err, theSubscriptionList) {">
							<outline text="if (err) {" created="Tue, 12 Sep 2023 15:39:29 GMT">
								<outline text="callback (err);" created="Tue, 12 Sep 2023 15:39:31 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:35 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Sep 2023 15:39:36 GMT">
								<outline text="var theList = new Array ();" created="Tue, 12 Sep 2023 15:40:55 GMT"/>
								<outline text="theSubscriptionList.subscriptions.forEach (function (item) {" created="Tue, 12 Sep 2023 17:56:13 GMT">
									<outline text="theList.push (convertSubscription (item));" created="Tue, 12 Sep 2023 15:40:49 GMT"/>
									<outline text="});" created="Tue, 12 Sep 2023 17:56:28 GMT"/>
									</outline>
								<outline text="callback (undefined, theList);" created="Tue, 12 Sep 2023 16:17:40 GMT"/>
								<outline text="}" created="Tue, 12 Sep 2023 15:39:38 GMT"/>
								</outline>
							<outline text="});" created="Wed, 13 Sep 2023 16:04:09 GMT"/>
							</outline>
						<outline text="}" created="Tue, 05 Sep 2023 13:06:56 GMT"/>
						</outline>
					<outline text="" created="Sun, 24 Mar 2024 16:01:26 GMT"/>
					<outline text="function startStorage (theDatabase, callback) { //3/24/24 by DW" created="Sun, 24 Mar 2024 15:02:59 GMT">
						<outline text="function getMysqlVersion (callback) {" created="Sat, 18 Nov 2023 16:56:16 GMT">
							<outline text="const sqltext = &quot;select version () as version;&quot;;" created="Sun, 05 Nov 2023 12:30:42 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="var theVersion = undefined;" created="Sat, 18 Nov 2023 17:05:16 GMT"/>
								<outline text="if (!err) {">
									<outline text="if (result.length &gt; 0) {" created="Sun, 05 Nov 2023 12:32:52 GMT">
										<outline text="theVersion = result [0].version;" created="Sat, 18 Nov 2023 17:06:11 GMT"/>
										<outline text="console.log (&quot;getMysqlVersion: theVersion == &quot; + theVersion);" created="Sun, 24 Mar 2024 15:46:30 GMT"/>
										<outline text="}" created="Sun, 05 Nov 2023 12:33:03 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="callback (undefined, theVersion);" created="Sat, 18 Nov 2023 17:08:19 GMT"/>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sat, 18 Nov 2023 16:56:24 GMT"/>
							</outline>
						<outline text="davesql.start (config.database, function () {">
							<outline text="getMysqlVersion (function (err, mysqlVersion) { //11/18/23 by DW, 2/1/24; 11:22:16 AM by DW" created="Sat, 18 Nov 2023 16:59:03 GMT">
								<outline text="config.flStorageEnabled = true;" created="Sun, 24 Mar 2024 15:47:41 GMT"/>
								<outline text="config.mysqlVersion = mysqlVersion;" created="Sat, 18 Nov 2023 17:00:00 GMT"/>
								<outline text="if (callback !== undefined) {" created="Sun, 24 Mar 2024 14:49:05 GMT">
									<outline text="callback (undefined, config);" created="Sun, 24 Mar 2024 14:49:21 GMT"/>
									<outline text="}" created="Sun, 24 Mar 2024 14:49:11 GMT"/>
									</outline>
								<outline text="});" created="Sat, 18 Nov 2023 16:59:27 GMT"/>
								</outline>
							<outline text="});" created="Wed, 14 Jul 2021 13:51:16 GMT"/>
							</outline>
						<outline text="}" created="Sun, 24 Mar 2024 15:03:12 GMT"/>
						</outline>
					<outline text="function convertStorageItem (item) { //5/16/24 by DW -- convert database item to the item struct defined by the API" created="Thu, 16 May 2024 19:33:32 GMT">
						<outline text="if (item.idSite == 0) {" created="Thu, 16 May 2024 19:33:51 GMT">
							<outline text="item.idSite = undefined;" created="Thu, 16 May 2024 19:34:32 GMT"/>
							<outline text="}" created="Thu, 16 May 2024 19:34:41 GMT"/>
							</outline>
						<outline text="if (item.idPost == 0) {" created="Thu, 16 May 2024 19:33:51 GMT">
							<outline text="item.idPost = undefined;" created="Thu, 16 May 2024 19:34:32 GMT"/>
							<outline text="}" created="Thu, 16 May 2024 19:34:41 GMT"/>
							</outline>
						<outline text="return (item);" created="Thu, 16 May 2024 19:40:14 GMT"/>
						<outline text="}" created="Thu, 16 May 2024 19:33:38 GMT"/>
						</outline>
					<outline text="function readUserFile (username, relpath, flprivate, idsite, idpost, callback) {" created="Tue, 09 Apr 2024 17:09:40 GMT">
						<outline text="Changes" isComment="true" created="Sat, 22 Feb 2025 14:27:27 GMT">
							<outline text="2/22/25; 9:27:30 AM by DW" created="Sat, 22 Feb 2025 14:27:29 GMT">
								<outline text="Send back a value in the error object that indicates clearly that the error was that the file doesn't exist. " created="Sat, 22 Feb 2025 14:27:31 GMT"/>
								<outline text="I don't want to be looking for a string, because that would break if the error message ever changed. " created="Sat, 22 Feb 2025 14:27:59 GMT"/>
								</outline>
							</outline>
						<outline text="const privateval = (flprivate) ? 1 : 0;" created="Sun, 24 Mar 2024 17:36:51 GMT"/>
						<outline text="var sqltext = &quot;select * from wpstorage where username = &quot; + davesql.encode (username) + &quot; and relpath = &quot; + davesql.encode (relpath) + &quot; and flprivate = &quot; + davesql.encode (privateval)"/>
						<outline text="if (idsite !== undefined) { //4/5/24 by DW" created="Fri, 05 Apr 2024 16:40:58 GMT">
							<outline text="sqltext += &quot; and idsite = &quot; + davesql.encode (idsite);" created="Fri, 05 Apr 2024 16:41:32 GMT"/>
							<outline text="}" created="Fri, 05 Apr 2024 16:41:19 GMT"/>
							</outline>
						<outline text="if (idpost !== undefined) {" created="Fri, 05 Apr 2024 16:40:58 GMT">
							<outline text="sqltext += &quot; and idpost = &quot; + davesql.encode (idpost);" created="Fri, 05 Apr 2024 16:41:32 GMT"/>
							<outline text="}" created="Fri, 05 Apr 2024 16:41:19 GMT"/>
							</outline>
						<outline text="sqltext += &quot;;&quot;;" created="Fri, 05 Apr 2024 16:40:58 GMT"/>
						<outline text="" created="Fri, 05 Apr 2024 16:40:58 GMT"/>
						<outline text="console.log (&quot;readUserFile: sqltext == &quot; + sqltext); //4/14/24 by DW" isComment="true" created="Thu, 21 Sep 2023 19:49:29 GMT"/>
						<outline text="console.log (&quot;readUserFile: username == &quot; + username + &quot;, relpath == &quot; + relpath); //9/21/23 by DW" isComment="true" created="Thu, 21 Sep 2023 19:49:29 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
								<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
								<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
								<outline text="if (result.length == 0) {">
									<outline text="const message = &quot;Can't find the file &quot; + relpath + &quot; for the user &quot; + username + &quot;.&quot;;" created="Tue, 19 Sep 2023 20:59:50 GMT"/>
									<outline text="const code = 404; //2/22/25 by DW" created="Sat, 22 Feb 2025 14:26:51 GMT"/>
									<outline text="callback ({message, code});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Fri, 22 Apr 2022 13:57:05 GMT">
									<outline text="const theFileRec = result [0];" created="Wed, 20 Sep 2023 20:48:01 GMT"/>
									<outline text="const theReturnedData = {" isComment="true" created="Wed, 20 Sep 2023 20:48:48 GMT">
										<outline text="filedata: theFileRec.filecontents.toString ()," created="Mon, 19 Apr 2021 13:40:09 GMT"/>
										<outline text="filestats: {" created="Mon, 19 Apr 2021 13:41:55 GMT">
											<outline text="relpath: theFileRec.relpath," created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="type: theFileRec.type," created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="username: theFileRec.username," created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="flprivate: theFileRec.flprivate," created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="ctSaves: theFileRec.ctSaves," created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="whenCreated: theFileRec.whenCreated," created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="whenUpdated: theFileRec.whenUpdated" created="Wed, 20 Sep 2023 20:49:48 GMT"/>
											<outline text="}" created="Wed, 20 Sep 2023 20:49:28 GMT"/>
											</outline>
										<outline text="};" created="Wed, 20 Sep 2023 20:48:56 GMT"/>
										</outline>
									<outline text="callback (undefined, theFileRec);" created="Sat, 07 May 2022 14:03:25 GMT"/>
									<outline text="}" created="Fri, 22 Apr 2022 13:57:08 GMT"/>
									</outline>
								<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
								</outline>
							<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
							</outline>
						<outline text="}" created="Tue, 09 Apr 2024 17:09:58 GMT"/>
						</outline>
					<outline text="function readWholeFile (token, relpath, flprivate, idsite, idpost, callback) { //3/24/24 by DW" created="Wed, 20 Sep 2023 14:48:33 GMT">
						<outline text="Changes" isComment="true" created="Fri, 29 Mar 2024 13:29:17 GMT">
							<outline text="4/5/24; 12:31:36 PM by DW" created="Fri, 05 Apr 2024 16:31:35 GMT">
								<outline text="New optional params, idsite and idpost." created="Fri, 05 Apr 2024 16:31:36 GMT"/>
								</outline>
							<outline text="3/29/24; 9:29:20 AM by DW" created="Fri, 29 Mar 2024 13:29:19 GMT">
								<outline text="Just returning the content of the record from the database, no funny structures." created="Fri, 29 Mar 2024 13:29:20 GMT"/>
								</outline>
							</outline>
						<outline text="getUsername (token, function (err, username) {" created="Sun, 24 Mar 2024 16:05:49 GMT">
							<outline text="if (err) {" created="Sun, 24 Mar 2024 16:05:54 GMT">
								<outline text="callback (err);" created="Sun, 24 Mar 2024 16:06:01 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:06:05 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 24 Mar 2024 16:06:05 GMT">
								<outline text="readUserFile (username, relpath, flprivate, idsite, idpost, callback);" created="Tue, 09 Apr 2024 17:10:47 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:06:07 GMT"/>
								</outline>
							<outline text="});" created="Sun, 24 Mar 2024 16:05:51 GMT"/>
							</outline>
						<outline text="}" created="Wed, 20 Sep 2023 14:48:51 GMT"/>
						</outline>
					<outline text="function writeWholeFile (token, relpath, type, flprivate, filecontents, idsite, idpost, iddraft, callback) { ">
						<outline text="const now = new Date ();"/>
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="function getEncodedValues (jstruct) {" created="Sat, 11 May 2024 13:37:45 GMT">
									<outline text="var values = davesql.encodeValues (jstruct);" created="Sat, 11 May 2024 13:28:39 GMT"/>
									<outline text="values = utils.stringMid (values, 1, values.length - 1); //remove extraneous semicolon at the end" created="Fri, 10 May 2024 14:38:29 GMT"/>
									<outline text="return (values);" created="Sat, 11 May 2024 13:38:15 GMT"/>
									<outline text="}" created="Sat, 11 May 2024 13:37:55 GMT"/>
									</outline>
								<outline text="function getValuesForUpdating (theValues) { //this could go into the davesql package" created="Sat, 11 May 2024 14:25:46 GMT">
									<outline text="var s = &quot;&quot;;" created="Sat, 11 May 2024 14:26:09 GMT"/>
									<outline text="for (var x in theValues) {">
										<outline text="if (s.length &gt; 0) {" created="Sat, 11 May 2024 14:27:16 GMT">
											<outline text="s += &quot;, &quot;;" created="Sat, 11 May 2024 14:27:28 GMT"/>
											<outline text="}" created="Sat, 11 May 2024 14:27:27 GMT"/>
											</outline>
										<outline text="s += x + &quot;=&quot; + davesql.encode (theValues [x]);" created="Sat, 11 May 2024 14:27:16 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="return (s);" created="Sat, 11 May 2024 14:26:09 GMT"/>
									<outline text="}" created="Sat, 11 May 2024 14:26:05 GMT"/>
									</outline>
								<outline text="function setUrlpublic () { //5/16/24 by DW" created="Thu, 16 May 2024 14:25:13 GMT">
									<outline text="if (!flprivate) { //5/16/24 by DW" created="Thu, 16 May 2024 14:23:16 GMT">
										<outline text="if (idsite !== undefined) {" created="Thu, 16 May 2024 14:30:06 GMT">
											<outline text="fileRec.urlPublic = config.urlPublicUserFiles + username + &quot;/&quot; + idsite + &quot;/&quot; + relpath" created="Thu, 16 May 2024 14:23:32 GMT"/>
											<outline text="}" created="Thu, 16 May 2024 14:30:11 GMT"/>
											</outline>
										<outline text="}" created="Thu, 16 May 2024 14:23:23 GMT"/>
										</outline>
									<outline text="}" created="Thu, 16 May 2024 14:25:22 GMT"/>
									</outline>
								<outline text="function logWrite (verb) { //12/21/24 by DW" created="Sat, 21 Dec 2024 17:21:54 GMT">
									<outline text="const eventData = {" created="Sat, 21 Dec 2024 17:22:36 GMT">
										<outline text="username, relpath, iddraft" created="Sat, 21 Dec 2024 17:23:01 GMT"/>
										<outline text="};" created="Sat, 21 Dec 2024 17:22:45 GMT"/>
										</outline>
									<outline text="addToLog (verb + &quot;File&quot;, undefined, eventData);" created="Sat, 21 Dec 2024 16:51:17 GMT"/>
									<outline text="}" created="Sat, 21 Dec 2024 17:22:04 GMT"/>
									</outline>
								<outline text="const privateval = (flprivate) ? 1 : 0;"/>
								<outline text="var fileRec = {">
									<outline text="username, "/>
									<outline text="relpath, "/>
									<outline text="type,"/>
									<outline text="flprivate: privateval,"/>
									<outline text="filecontents,"/>
									<outline text="whenUpdated: now"/>
									<outline text="};"/>
									</outline>
								<outline text="if (idsite !== undefined) {">
									<outline text="fileRec.idSite = idsite;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (idpost !== undefined) {">
									<outline text="fileRec.idPost = idpost;"/>
									<outline text="}"/>
									</outline>
								<outline text="" created="Fri, 10 May 2024 14:07:10 GMT"/>
								<outline text="if (iddraft !== undefined) { //5/11/24 by DW" created="Sat, 11 May 2024 13:35:25 GMT">
									<outline text="const sqltext = &quot;update wpstorage set &quot; + getValuesForUpdating (fileRec) + &quot;, ctSaves = ctSaves + 1 where id = &quot; + davesql.encode (iddraft) + &quot;;&quot;;" created="Sat, 02 Mar 2024 14:45:09 GMT"/>
									<outline text="davesql.runSqltext (sqltext, function (err, result) {">
										<outline text="if (err) {">
											<outline text="callback (err);"/>
											<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
											</outline>
										<outline text="else {">
											<outline text="if (result.affectedRows == 0) {" created="Sat, 11 May 2024 14:36:43 GMT">
												<outline text="const message = &quot;Can't update the file because there is no record with id == &quot; + iddraft;" created="Sat, 11 May 2024 14:37:59 GMT"/>
												<outline text="callback ({message});" created="Sat, 11 May 2024 14:37:52 GMT"/>
												<outline text="}" created="Sat, 11 May 2024 14:37:37 GMT"/>
												</outline>
											<outline text="else {" created="Sat, 11 May 2024 14:37:38 GMT">
												<outline text="fileRec.id = iddraft;" created="Fri, 10 May 2024 15:17:56 GMT"/>
												<outline text="setUrlpublic (); //5/16/24 by DW"/>
												<outline text="logWrite (&quot;update&quot;); //12/21/24 by DW" created="Sat, 21 Dec 2024 17:21:22 GMT"/>
												<outline text="callback (undefined, fileRec);"/>
												<outline text="}" created="Sat, 11 May 2024 14:37:39 GMT"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Sat, 11 May 2024 13:35:38 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 11 May 2024 13:35:39 GMT">
									<outline text="fileRec.whenCreated = now;" created="Sat, 11 May 2024 13:45:22 GMT"/>
									<outline text="fileRec.ctSaves = 1;"/>
									<outline text="const onDuplicatePart = &quot;on duplicate key update type = values (type), filecontents = values (filecontents), whenUpdated = &quot; + davesql.encode (now) + &quot;, ctSaves = ctSaves + 1&quot;;" created="Fri, 10 May 2024 14:07:10 GMT"/>
									<outline text="const sqltext = &quot;insert into wpstorage &quot; + getEncodedValues (fileRec) + &quot; &quot; + onDuplicatePart + &quot;;&quot;;"/>
									<outline text="davesql.runSqltext (sqltext, function (err, result) {">
										<outline text="if (err) {">
											<outline text="callback (err);"/>
											<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
											</outline>
										<outline text="else {">
											<outline text="fileRec.id = result.insertId;" created="Fri, 10 May 2024 15:17:56 GMT"/>
											<outline text="setUrlpublic (); //5/16/24 by DW"/>
											<outline text="logWrite (&quot;create&quot;); //12/21/24 by DW" created="Sat, 21 Dec 2024 17:21:22 GMT"/>
											<outline text="callback (undefined, fileRec);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}" created="Sat, 11 May 2024 13:35:40 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="}" created="Fri, 10 May 2024 14:04:22 GMT"/>
						</outline>
					<outline text="function writeUniqueFile (token, relpath, type, flprivate, filecontents, idsite, idpost, callback) { //5/12/24 by DW" created="Wed, 20 Sep 2023 14:48:33 GMT">
						<outline text="Changes" isComment="true" created="Fri, 05 Apr 2024 16:31:33 GMT">
							<outline text="5/12/24; 8:46:30 AM by DW" created="Fri, 05 Apr 2024 16:31:35 GMT">
								<outline text="writeWholeFile is the general-purpose routine, this is for files that can only have one instance per path/type/etc" created="Fri, 05 Apr 2024 16:31:36 GMT"/>
								<outline text="examples include the user's prefs.json file for a specific app, or the user's glossary.json file. " created="Sun, 12 May 2024 12:47:26 GMT"/>
								<outline text="these files are a lot simpler to work with than the draft.json files." created="Sun, 12 May 2024 12:47:53 GMT"/>
								<outline text="we could manage these files ourselves at a higher level, but that would mean we would have to remember the id of the glossary.json file, in order to save it." created="Sun, 12 May 2024 12:48:09 GMT"/>
								<outline text="it's simpler to just provide a new entrypoint for these files that finds the id before writing it, the info is after all, in the database. ;-)" created="Sun, 12 May 2024 12:48:48 GMT"/>
								<outline text="this could be done on the client, but that means two round trips for the data. this is a little more efficient. " created="Sun, 12 May 2024 12:58:22 GMT"/>
								</outline>
							</outline>
						<outline text="readWholeFile (token, relpath, flprivate, idsite, idpost, function (err, theOriginalFile) {" created="Tue, 19 Sep 2023 20:45:16 GMT">
							<outline text="const id = (err) ? undefined : theOriginalFile.id; //if id is undefined, treat it as a new file" created="Sun, 12 May 2024 12:51:06 GMT"/>
							<outline text="writeWholeFile (token, relpath, type, flprivate, filecontents, idsite, idpost, id, callback);" created="Sun, 12 May 2024 12:52:00 GMT"/>
							<outline text="});" created="Tue, 19 Sep 2023 20:45:52 GMT"/>
							</outline>
						<outline text="}" created="Wed, 20 Sep 2023 14:48:51 GMT"/>
						</outline>
					<outline text="function deleteFile (token, relpath, flprivate, callback) { //3/26/24 by DW" created="Tue, 26 Mar 2024 18:00:07 GMT">
						<outline text="Changes" isComment="true" created="Fri, 10 May 2024 16:19:34 GMT">
							<outline text="5/10/24; 12:19:38 PM by DW" created="Fri, 10 May 2024 16:19:37 GMT">
								<outline text="Shouldn't this function take an idsite and idpost params?" created="Fri, 10 May 2024 16:19:38 GMT"/>
								<outline text="Or possibly an id??" created="Fri, 10 May 2024 16:20:15 GMT"/>
								</outline>
							</outline>
						<outline text="const now = new Date ();" created="Tue, 19 Sep 2023 20:57:09 GMT"/>
						<outline text="getUsername (token, function (err, username) {" created="Sun, 24 Mar 2024 16:03:47 GMT">
							<outline text="if (err) {" created="Sun, 24 Mar 2024 16:04:32 GMT">
								<outline text="callback (err);" created="Sun, 24 Mar 2024 16:04:35 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:04:39 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 24 Mar 2024 16:04:39 GMT">
								<outline text="const privateval = (flprivate) ? 1 : 0;" created="Sun, 24 Mar 2024 17:36:51 GMT"/>
								<outline text="const sqltext = &quot;delete from wpstorage where username = &quot; + davesql.encode (username) + &quot; and relpath = &quot; + davesql.encode (relpath) + &quot; and flprivate = &quot; + davesql.encode (privateval) + &quot;;&quot;;"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
										<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
										<outline text="if (result.length == 0) {">
											<outline text="const message = &quot;Can't find the file &quot; + relpath + &quot; for the user &quot; + username + &quot;.&quot;;" created="Tue, 19 Sep 2023 20:59:50 GMT"/>
											<outline text="callback ({message});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="else {" created="Fri, 22 Apr 2022 13:57:05 GMT">
											<outline text="callback (undefined, true);" created="Sat, 07 May 2022 14:03:25 GMT"/>
											<outline text="}" created="Fri, 22 Apr 2022 13:57:08 GMT"/>
											</outline>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
										</outline>
									<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
									</outline>
								<outline text="}" created="Sun, 24 Mar 2024 16:04:41 GMT"/>
								</outline>
							<outline text="});" created="Sun, 24 Mar 2024 16:03:56 GMT"/>
							</outline>
						<outline text="}" created="Tue, 26 Mar 2024 18:00:31 GMT"/>
						</outline>
					<outline text="function getRecentUserDrafts (token, maxCtDraftsParam, idSiteParam, callback) { //4/27/24 by DW" created="Sat, 27 Apr 2024 13:21:23 GMT">
						<outline text="Changes" isComment="true" created="Sat, 27 Apr 2024 13:22:51 GMT">
							<outline text="10/26/24; 8:50:09 AM by DW" created="Sat, 26 Oct 2024 12:50:08 GMT">
								<outline text="We were getting the most recent drafts for all users, but we must restrict it to the user. " created="Sat, 26 Oct 2024 12:50:09 GMT"/>
								</outline>
							<outline text="5/8/24; 5:21:12 PM by DW" created="Wed, 08 May 2024 21:21:12 GMT">
								<outline text="Changed the ordering to order by whenUpdated. There's only one draft that hasn't been saved, at least right now. " created="Wed, 08 May 2024 21:21:12 GMT"/>
								</outline>
							<outline text="4/30/24; 10:04:43 AM by DW" created="Tue, 30 Apr 2024 14:04:43 GMT">
								<outline text="New optional param, idSiteParam. If provided we only return drafts from a single site. Useful for building feeds. " created="Tue, 30 Apr 2024 14:04:44 GMT"/>
								</outline>
							<outline text="4/27/24; 9:26:03 AM by DW" created="Sat, 27 Apr 2024 13:26:02 GMT">
								<outline text="get draft.json files for a specific user in reverse chronologic order" created="Sat, 27 Apr 2024 13:26:03 GMT">
									<outline text="select username, relpath, flprivate, idsite, idpost, type, whenCreated, whenUpdated, ctsaves from wpstorage where relpath = 'draft.json' order by whenCreated desc limit 10;" isComment="true"/>
									</outline>
								</outline>
							</outline>
						<outline text="const now = new Date ();" created="Tue, 19 Sep 2023 20:57:09 GMT"/>
						<outline text="getUsername (token, function (err, username) {" created="Sun, 24 Mar 2024 16:03:47 GMT">
							<outline text="if (err) {" created="Sun, 24 Mar 2024 16:04:32 GMT">
								<outline text="callback (err);" created="Sun, 24 Mar 2024 16:04:35 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:04:39 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 24 Mar 2024 16:04:39 GMT">
								<outline text="var sitepart = &quot;&quot;;" created="Tue, 30 Apr 2024 14:09:11 GMT"/>
								<outline text="if (idSiteParam !== undefined) {" created="Tue, 30 Apr 2024 14:09:17 GMT">
									<outline text="sitepart = &quot; and idsite = &quot; + davesql.encode (idSiteParam) + &quot; &quot;;" created="Tue, 30 Apr 2024 14:09:32 GMT"/>
									<outline text="}" created="Tue, 30 Apr 2024 14:09:28 GMT"/>
									</outline>
								<outline text="const maxCtDrafts = Math.min (config.maxCtDrafts, maxCtDraftsParam);" created="Sat, 27 Apr 2024 14:04:29 GMT"/>
								<outline text="const sqltext = &quot;select * from wpstorage where relpath = 'draft.json' and username = &quot; + davesql.encode (username) +  sitepart + &quot; order by whenUpdated desc limit &quot; + maxCtDrafts + &quot;;&quot;; //10/26/24 by DW" created="Sat, 27 Apr 2024 13:27:42 GMT"/>
								<outline text="const sqltext = &quot;select * from wpstorage where relpath = 'draft.json' &quot; +  sitepart + &quot;order by whenUpdated desc limit &quot; + maxCtDrafts + &quot;;&quot;;" isComment="true" created="Sat, 27 Apr 2024 13:27:42 GMT"/>
								<outline text="const sqltext = &quot;select * from wpstorage where relpath = 'draft.json' &quot; +  sitepart + &quot;order by whenCreated desc limit &quot; + maxCtDrafts + &quot;;&quot;;" isComment="true" created="Sat, 27 Apr 2024 13:27:42 GMT"/>
								<outline text="console.log (&quot;\ngetRecentUserDrafts: sqltext == &quot; + sqltext + &quot;\n&quot;);" isComment="true" created="Sat, 27 Apr 2024 13:50:44 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
										<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
										<outline text="var theArray = new Array ();" created="Sat, 27 Apr 2024 13:59:16 GMT"/>
										<outline text="result.forEach (function (item) {" created="Sat, 27 Apr 2024 13:59:30 GMT">
											<outline text="const jstruct = JSON.parse (item.filecontents);" created="Sat, 27 Apr 2024 14:23:22 GMT"/>
											<outline text="" created="Sun, 12 May 2024 14:05:24 GMT"/>
											<outline text="jstruct.idDraft = item.id; //copy data from database for use in the app -- 5/12/24 by DW" created="Sun, 12 May 2024 14:05:24 GMT"/>
											<outline text="jstruct.whenCreated = new Date (item.whenCreated);" created="Sun, 12 May 2024 14:05:24 GMT"/>
											<outline text="jstruct.whenUpdated = new Date (item.whenUpdated); " created="Sun, 12 May 2024 14:05:24 GMT"/>
											<outline text="jstruct.ctSaves = item.ctSaves; " created="Sun, 12 May 2024 14:05:24 GMT"/>
											<outline text="" created="Sun, 12 May 2024 14:05:25 GMT"/>
											<outline text="theArray.push (jstruct);" created="Sat, 27 Apr 2024 13:59:43 GMT"/>
											<outline text="});" created="Sat, 27 Apr 2024 13:59:38 GMT"/>
											</outline>
										<outline text="callback (undefined, theArray);" created="Sat, 07 May 2022 14:03:25 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
										</outline>
									<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
									</outline>
								<outline text="}" created="Sun, 24 Mar 2024 16:04:41 GMT"/>
								</outline>
							<outline text="});" created="Sun, 24 Mar 2024 16:03:56 GMT"/>
							</outline>
						<outline text="}" created="Sat, 27 Apr 2024 13:21:42 GMT"/>
						</outline>
					<outline text="function getUserFileInfo (token, maxFiles, callback) { //5/16/24 by DW" created="Thu, 16 May 2024 15:35:36 GMT">
						<outline text="Changes" isComment="true" created="Thu, 16 May 2024 15:36:18 GMT">
							<outline text="5/16/24; 11:36:21 AM by DW" created="Thu, 16 May 2024 15:36:20 GMT">
								<outline text="For debugging at least to start." created="Thu, 16 May 2024 15:36:21 GMT"/>
								</outline>
							</outline>
						<outline text="getUsername (token, function (err, username) { " created="Sun, 24 Mar 2024 16:03:47 GMT">
							<outline text="if (err) {" created="Sun, 24 Mar 2024 16:04:32 GMT">
								<outline text="callback (err);" created="Sun, 24 Mar 2024 16:04:35 GMT"/>
								<outline text="}" created="Sun, 24 Mar 2024 16:04:39 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 24 Mar 2024 16:04:39 GMT">
								<outline text="const maxCtFiles = Math.min (config.maxCtFiles, maxFiles);" created="Sat, 27 Apr 2024 14:04:29 GMT"/>
								<outline text="const sqltext = &quot;select * from wpstorage where username = &quot; + davesql.encode (username) + &quot; order by id asc limit &quot; + maxCtFiles + &quot;;&quot;;" created="Thu, 16 May 2024 15:37:00 GMT"/>
								<outline text="console.log (&quot;getUserFileInfo: sqltext == &quot; + sqltext);" isComment="true" created="Thu, 16 May 2024 15:42:34 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
										<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
										<outline text="var theArray = new Array ();" created="Sat, 27 Apr 2024 13:59:16 GMT"/>
										<outline text="result.forEach (function (item) {" created="Sat, 27 Apr 2024 13:59:30 GMT">
											<outline text="theArray.push (convertStorageItem (item));" created="Thu, 16 May 2024 15:39:53 GMT"/>
											<outline text="});" created="Sat, 27 Apr 2024 13:59:38 GMT"/>
											</outline>
										<outline text="callback (undefined, theArray);" created="Sat, 07 May 2022 14:03:25 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
										</outline>
									<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
									</outline>
								<outline text="}" created="Sun, 24 Mar 2024 16:04:41 GMT"/>
								</outline>
							<outline text="});" created="Sun, 24 Mar 2024 16:03:56 GMT"/>
							</outline>
						<outline text="}" created="Thu, 16 May 2024 15:36:04 GMT"/>
						</outline>
					<outline text="" created="Wed, 29 May 2024 13:40:38 GMT"/>
					<outline text="function readDraft (token, iddraft, callback) { //5/29/24 by DW" created="Wed, 29 May 2024 13:40:39 GMT">
						<outline text="Changes" isComment="true" created="Wed, 29 May 2024 13:41:36 GMT">
							<outline text="10/17/24; 12:30:16 PM by DW" created="Thu, 17 Oct 2024 16:30:16 GMT">
								<outline text="it would crash if there was no record with id == iddraft. we were checking the wrong value. " created="Thu, 17 Oct 2024 16:30:17 GMT"/>
								</outline>
							<outline text="5/29/24; 9:41:41 AM by DW" created="Wed, 29 May 2024 13:41:38 GMT">
								<outline text="Special way to read a file based on the id, useful for bookmarks in wordland. " created="Wed, 29 May 2024 13:41:41 GMT"/>
								</outline>
							</outline>
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="const sqltext = &quot;select * from wpstorage where username = &quot; + davesql.encode (username) + &quot; and id = &quot; + davesql.encode (iddraft) + &quot;;&quot;;"/>
								<outline text="console.log (&quot;readDraft: sqltext == &quot; + sqltext);" isComment="true" created="Wed, 29 May 2024 13:45:56 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
										</outline>
									<outline text="else {">
										<outline text="if (result.length == 0) { //10/17/24 by DW" created="Sat, 11 May 2024 14:36:43 GMT">
											<outline text="const message = &quot;Can't get the file because there is no record with id == &quot; + iddraft;" created="Sat, 11 May 2024 14:37:59 GMT"/>
											<outline text="callback ({message});" created="Sat, 11 May 2024 14:37:52 GMT"/>
											<outline text="}" created="Sat, 11 May 2024 14:37:37 GMT"/>
											</outline>
										<outline text="else {" created="Sat, 11 May 2024 14:37:38 GMT">
											<outline text="callback (undefined, result [0]);"/>
											<outline text="}" created="Sat, 11 May 2024 14:37:39 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="}" created="Wed, 29 May 2024 13:41:30 GMT"/>
						</outline>
					<outline text="function deleteDraft (token, iddraft, callback) { //5/29/24 by DW" created="Wed, 29 May 2024 14:54:57 GMT">
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="const sqltext = &quot;delete from wpstorage where username = &quot; + davesql.encode (username) + &quot; and id = &quot; + davesql.encode (iddraft) + &quot;;&quot;;"/>
								<outline text="console.log (&quot;deleteDraft: sqltext == &quot; + sqltext);" isComment="true" created="Wed, 29 May 2024 13:45:56 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
										</outline>
									<outline text="else {">
										<outline text="callback (undefined, true);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="}" created="Wed, 29 May 2024 14:55:08 GMT"/>
						</outline>
					<outline text="function getNextDraft (token, id, flPrev, callback) { //10/29/24 by DW" created="Tue, 29 Oct 2024 17:00:32 GMT">
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="const chCompare = (flPrev) ? &quot; &lt; &quot; : &quot; &gt; &quot;;" created="Tue, 29 Oct 2024 17:20:45 GMT"/>
								<outline text="const ascendOrDescend = (flPrev) ? &quot; desc &quot; : &quot; asc &quot;;" created="Tue, 29 Oct 2024 17:20:45 GMT"/>
								<outline text="const sqltext = &quot;select *  from wpstorage  where username = &quot; + davesql.encode (username) + &quot; and relpath = &quot; + davesql.encode (&quot;draft.json&quot;) + &quot; and id &quot; + chCompare + davesql.encode (id) + &quot; order by id &quot; + ascendOrDescend + &quot; limit 1;&quot;;"/>
								<outline text="console.log (&quot;getNextDraft: sqltext == &quot; + sqltext);" isComment="true" created="Wed, 29 May 2024 13:45:56 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
										</outline>
									<outline text="else {">
										<outline text="if (result.length == 0) {">
											<outline text="const which = (flPrev) ? &quot;previous&quot; : &quot;next&quot;;" created="Tue, 29 Oct 2024 21:57:01 GMT"/>
											<outline text="const message = &quot;Can't get the next draft because there is no &quot; + which + &quot; draft.&quot;;" created="Tue, 19 Sep 2023 20:59:50 GMT"/>
											<outline text="callback ({message});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="else {" created="Fri, 22 Apr 2022 13:57:05 GMT">
											<outline text="const jsontext = result [0].filecontents;" created="Tue, 29 Oct 2024 21:46:31 GMT"/>
											<outline text="const draftInfo = JSON.parse (jsontext);" created="Sat, 27 Apr 2024 14:23:22 GMT"/>
											<outline text="callback (undefined, draftInfo);" created="Sat, 07 May 2022 14:03:25 GMT"/>
											<outline text="}" created="Fri, 22 Apr 2022 13:57:08 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="}" created="Tue, 29 Oct 2024 17:00:49 GMT"/>
						</outline>
					<outline text="function getNextPrevArray (token, callback) { //11/1/24 by DW" created="Fri, 01 Nov 2024 20:35:24 GMT">
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="const relpath = &quot;draft.json&quot;;" created="Fri, 01 Nov 2024 20:38:53 GMT"/>
								<outline text="const sqltext = &quot;select id  from wpstorage  where username = &quot; + davesql.encode (username) + &quot; and relpath = &quot; + davesql.encode (relpath) + &quot; order by id  asc;&quot;;" created="Fri, 01 Nov 2024 20:38:24 GMT"/>
								<outline text="console.log (&quot;getNextPrevArray: sqltext == &quot; + sqltext);" isComment="true" created="Wed, 29 May 2024 13:45:56 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
										</outline>
									<outline text="else {">
										<outline text="if (result.length == 0) {">
											<outline text="const message = &quot;Can't get the next/prevs because the user \&quot;&quot; + username + &quot;\&quot; has no drafts.&quot;;" created="Tue, 19 Sep 2023 20:59:50 GMT"/>
											<outline text="callback ({message});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="else {" created="Fri, 22 Apr 2022 13:57:05 GMT">
											<outline text="const theArray = new Array ();" created="Fri, 01 Nov 2024 20:51:58 GMT"/>
											<outline text="result.forEach (function (item) {" created="Fri, 01 Nov 2024 20:52:06 GMT">
												<outline text="theArray.push (item.id);" created="Fri, 01 Nov 2024 20:52:52 GMT"/>
												<outline text="});" created="Fri, 01 Nov 2024 20:52:43 GMT"/>
												</outline>
											<outline text="callback (undefined, theArray);" created="Sat, 07 May 2022 14:03:25 GMT"/>
											<outline text="}" created="Fri, 22 Apr 2022 13:57:08 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="}" created="Fri, 01 Nov 2024 20:35:42 GMT"/>
						</outline>
					<outline text="function isUserWhitelisted (token, callback) { //10/24/24 by DW" created="Thu, 24 Oct 2024 13:48:19 GMT">
						<outline text="if (config.flUseWhitelist) {" created="Thu, 24 Oct 2024 14:11:31 GMT">
							<outline text="getUsername (token, function (err, username) {" created="Sun, 24 Mar 2024 16:05:49 GMT">
								<outline text="if (err) {" created="Sun, 24 Mar 2024 16:05:54 GMT">
									<outline text="callback (err);" created="Sun, 24 Mar 2024 16:06:01 GMT"/>
									<outline text="}" created="Sun, 24 Mar 2024 16:06:05 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 24 Mar 2024 16:06:05 GMT">
									<outline text="var flWhitelisted = false;" created="Thu, 24 Oct 2024 13:52:51 GMT"/>
									<outline text="config.authorizedAccounts.forEach (function (item) {" created="Thu, 24 Oct 2024 13:51:52 GMT">
										<outline text="if (item == username) {" created="Thu, 24 Oct 2024 13:52:19 GMT">
											<outline text="flWhitelisted = true;" created="Thu, 24 Oct 2024 13:52:51 GMT"/>
											<outline text="}" created="Thu, 24 Oct 2024 13:52:30 GMT"/>
											</outline>
										<outline text="});" created="Thu, 24 Oct 2024 13:52:03 GMT"/>
										</outline>
									<outline text="callback (undefined, flWhitelisted);" created="Thu, 24 Oct 2024 13:53:39 GMT"/>
									<outline text="}" created="Sun, 24 Mar 2024 16:06:07 GMT"/>
									</outline>
								<outline text="});" created="Sun, 24 Mar 2024 16:05:51 GMT"/>
								</outline>
							<outline text="}" created="Thu, 24 Oct 2024 14:11:36 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 24 Oct 2024 14:11:37 GMT">
							<outline text="callback (undefined, true); //if not using whitelist, everyone is whitelisted" created="Thu, 24 Oct 2024 13:53:39 GMT"/>
							<outline text="}" created="Thu, 24 Oct 2024 14:11:38 GMT"/>
							</outline>
						<outline text="}" created="Thu, 24 Oct 2024 13:49:13 GMT"/>
						</outline>
					<outline text="" created="Mon, 24 Feb 2025 23:20:55 GMT"/>
					<outline text="function isUserSysop (username, callback) { " created="Mon, 24 Feb 2025 23:20:56 GMT">
						<outline text="if (config.sysopUsername === undefined) { //2/24/25 by DW" created="Mon, 24 Feb 2025 23:22:05 GMT">
							<outline text="return (true); //everyone is authorized" created="Mon, 24 Feb 2025 23:22:14 GMT"/>
							<outline text="}" created="Mon, 24 Feb 2025 23:22:26 GMT"/>
							</outline>
						<outline text="if (username == config.sysopUsername) {" created="Mon, 24 Feb 2025 23:19:30 GMT">
							<outline text="return (true); " created="Mon, 24 Feb 2025 23:22:14 GMT"/>
							<outline text="}" created="Mon, 24 Feb 2025 23:19:37 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 24 Feb 2025 23:23:12 GMT">
							<outline text="const message = &quot;Can't get this information because you are not authorized.&quot;;" created="Mon, 24 Feb 2025 23:20:15 GMT"/>
							<outline text="callback ({message});" created="Mon, 24 Feb 2025 23:20:01 GMT"/>
							<outline text="return (false);" created="Mon, 24 Feb 2025 23:20:11 GMT"/>
							<outline text="}" created="Mon, 24 Feb 2025 23:23:13 GMT"/>
							</outline>
						<outline text="}" created="Mon, 24 Feb 2025 23:21:22 GMT"/>
						</outline>
					<outline text="" created="Mon, 24 Feb 2025 23:18:00 GMT"/>
					<outline text="function getTopUsers (username, callback) { //12/23/24 by DW" created="Mon, 23 Dec 2024 22:19:06 GMT">
						<outline text="if (isUserSysop (username, callback)) {" created="Mon, 24 Feb 2025 23:19:08 GMT">
							<outline text="const sqltext = &quot;select id, username, whenCreated, whenUpdated, ctSaves from wpstorage where relpath = 'wordland/prefs.json' order by ctSaves desc limit 100;&quot;;" created="Mon, 23 Dec 2024 22:19:29 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
									<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
									<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
									<outline text="var theList = new Array ();" created="Mon, 23 Dec 2024 22:30:28 GMT"/>
									<outline text="result.forEach (function (item) {" created="Mon, 23 Dec 2024 22:30:36 GMT">
										<outline text="theList.push ({" created="Mon, 23 Dec 2024 22:31:01 GMT">
											<outline text="username: item.username," created="Mon, 23 Dec 2024 22:32:01 GMT"/>
											<outline text="ctConnects: item.ctSaves," created="Mon, 23 Dec 2024 22:31:40 GMT"/>
											<outline text="whenFirstConnect: item.whenCreated," created="Mon, 23 Dec 2024 22:32:21 GMT"/>
											<outline text="whenLastConnect: item.whenUpdated" created="Mon, 23 Dec 2024 22:32:51 GMT"/>
											<outline text="});" created="Mon, 23 Dec 2024 22:31:05 GMT"/>
											</outline>
										<outline text="});" created="Mon, 23 Dec 2024 22:30:50 GMT"/>
										</outline>
									<outline text="callback (undefined, theList);" created="Sat, 07 May 2022 14:03:25 GMT"/>
									<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
									</outline>
								<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
								</outline>
							<outline text="}" created="Mon, 24 Feb 2025 23:24:31 GMT"/>
							</outline>
						<outline text="}" created="Mon, 23 Dec 2024 22:19:16 GMT"/>
						</outline>
					<outline text="function getNewPosts (username, callback) { //2/24/25 by DW" created="Mon, 23 Dec 2024 22:19:06 GMT">
						<outline text="if (isUserSysop (username, callback)) {" created="Mon, 24 Feb 2025 23:25:40 GMT">
							<outline text="const sqltext = `" created="Mon, 24 Feb 2025 17:04:21 GMT">
								<outline text="select l.*"/>
								<outline text="from log l"/>
								<outline text="join (">
									<outline text="select json_extract(eventData, '$.url') as postUrl, max(whenCreated) as latestWhenCreated"/>
									<outline text="from log"/>
									<outline text="where eventName in ('addPost', 'updatePost')"/>
									<outline text="group by json_extract(eventData, '$.url')"/>
									<outline text="order by latestWhenCreated desc"/>
									<outline text="limit 100"/>
									<outline text=") latest"/>
									</outline>
								<outline text="on json_extract(l.eventData, '$.url') = latest.postUrl"/>
								<outline text="and l.whenCreated = latest.latestWhenCreated"/>
								<outline text="order by l.whenCreated desc"/>
								<outline text="limit 100;"/>
								<outline text="" isComment="true" created="Mon, 24 Feb 2025 17:21:12 GMT"/>
								<outline text="select l.*" isComment="true"/>
								<outline text="from log l" isComment="true"/>
								<outline text="join (" isComment="true">
									<outline text="select json_extract(eventData, '$.url') as postUrl, max(whenCreated) as latestWhenCreated"/>
									<outline text="from log"/>
									<outline text="where eventName in ('addPost', 'updatePost')"/>
									<outline text="group by json_extract(eventData, '$.url')"/>
									<outline text=") latest"/>
									</outline>
								<outline text="on json_extract(l.eventData, '$.url') = latest.postUrl" isComment="true"/>
								<outline text="and l.whenCreated = latest.latestWhenCreated;" isComment="true"/>
								<outline text="`;" created="Mon, 24 Feb 2025 17:04:29 GMT"/>
								</outline>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
									<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
									<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
									<outline text="var theList = new Array ();" created="Mon, 23 Dec 2024 22:30:28 GMT"/>
									<outline text="result.forEach (function (item) {" created="Mon, 23 Dec 2024 22:30:36 GMT">
										<outline text="{" isComment="true">
											<outline text="&quot;id&quot;: 11101,"/>
											<outline text="&quot;eventName&quot;: &quot;updatePost&quot;,"/>
											<outline text="&quot;eventError&quot;: &quot;&quot;,"/>
											<outline text="&quot;eventData&quot;: &quot;{\&quot;url\&quot;: \&quot;https://daveverse.wordpress.com/2025/02/24/757/\&quot;, \&quot;title\&quot;: \&quot;Mission accomplished\&quot;, \&quot;author\&quot;: \&quot;scripting\&quot;}&quot;,"/>
											<outline text="&quot;whenCreated&quot;: &quot;2025-02-24T14:38:21.000Z&quot;"/>
											<outline text="}," isComment="true"/>
											</outline>
										<outline text="const jstruct = JSON.parse (item.eventData);" created="Mon, 24 Feb 2025 17:23:11 GMT"/>
										<outline text="theList.push ({" created="Mon, 23 Dec 2024 22:31:01 GMT">
											<outline text="id: item.id," created="Mon, 24 Feb 2025 17:25:38 GMT"/>
											<outline text="title: (jstruct.title === undefined) ? &quot;&quot; : jstruct.title," created="Mon, 24 Feb 2025 17:24:51 GMT"/>
											<outline text="url: jstruct.url," created="Mon, 24 Feb 2025 17:23:49 GMT"/>
											<outline text="author: jstruct.author," created="Mon, 24 Feb 2025 17:24:55 GMT"/>
											<outline text="when: item.whenCreated," created="Mon, 24 Feb 2025 17:25:05 GMT"/>
											<outline text="event: item.eventName" created="Mon, 24 Feb 2025 17:25:25 GMT"/>
											<outline text="});" created="Mon, 23 Dec 2024 22:31:05 GMT"/>
											</outline>
										<outline text="});" created="Mon, 23 Dec 2024 22:30:50 GMT"/>
										</outline>
									<outline text="callback (undefined, theList);" created="Sat, 07 May 2022 14:03:25 GMT"/>
									<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
									</outline>
								<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
								</outline>
							<outline text="}" created="Mon, 24 Feb 2025 23:25:40 GMT"/>
							</outline>
						<outline text="}" created="Mon, 23 Dec 2024 22:19:16 GMT"/>
						</outline>
					<outline text="" created="Thu, 09 Jan 2025 17:56:39 GMT"/>
					<outline text="function getPublicFile (username, relpath, callback) { //1/9/25 by DW" created="Thu, 24 Oct 2024 13:48:19 GMT">
						<outline text="const sqltext = &quot;select * from  wpstorage where username = &quot; + davesql.encode (username) + &quot; and relpath = &quot; + davesql.encode (relpath) + &quot; and flprivate = 0;&quot;;" created="Tue, 30 Apr 2024 14:51:05 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Tue, 30 Apr 2024 15:36:29 GMT">
								<outline text="callback (err);" created="Tue, 30 Apr 2024 15:36:32 GMT"/>
								<outline text="}" created="Tue, 30 Apr 2024 15:36:36 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 30 Apr 2024 15:36:37 GMT">
								<outline text="if (result.length == 0) {" created="Tue, 30 Apr 2024 15:38:30 GMT">
									<outline text="const message = &quot;Can't find the file &quot; + relpath + &quot; for the user &quot; + username + &quot;, or it may not be public.&quot;;" created="Tue, 19 Sep 2023 20:59:50 GMT"/>
									<outline text="callback ({message});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}" created="Tue, 30 Apr 2024 15:39:55 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 30 Apr 2024 15:39:55 GMT">
									<outline text="const theFile = result [0];" created="Tue, 30 Apr 2024 15:41:36 GMT"/>
									<outline text="callback (undefined, JSON.parse (theFile.filecontents));"/>
									<outline text="}" created="Tue, 30 Apr 2024 15:39:59 GMT"/>
									</outline>
								<outline text="}" created="Tue, 30 Apr 2024 15:36:57 GMT"/>
								</outline>
							<outline text="});" created="Tue, 30 Apr 2024 15:36:27 GMT"/>
							</outline>
						<outline text="}" created="Thu, 09 Jan 2025 17:57:04 GMT"/>
						</outline>
					<outline text="" created="Wed, 19 Mar 2025 15:46:23 GMT"/>
					<outline text="function getAllDraftsForUser (token, callback) { //3/19/25 by DW" created="Fri, 01 Nov 2024 20:35:24 GMT">
						<outline text="getUsername (token, function (err, username) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="} "/>
								</outline>
							<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
								<outline text="const relpath = &quot;draft.json&quot;;" created="Fri, 01 Nov 2024 20:38:53 GMT"/>
								<outline text="const sqltext = &quot;select *  from wpstorage  where username = &quot; + davesql.encode (username) + &quot; and relpath = &quot; + davesql.encode (relpath) + &quot; order by id  asc;&quot;;" created="Fri, 01 Nov 2024 20:38:24 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}" created="Fri, 10 May 2024 14:03:03 GMT"/>
										</outline>
									<outline text="else {">
										<outline text="if (result.length == 0) {">
											<outline text="const message = &quot;Can't get the next/prevs because the user \&quot;&quot; + username + &quot;\&quot; has no drafts.&quot;;" created="Tue, 19 Sep 2023 20:59:50 GMT"/>
											<outline text="callback ({message});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="else {" created="Fri, 22 Apr 2022 13:57:05 GMT">
											<outline text="const theArray = new Array ();" created="Fri, 01 Nov 2024 20:51:58 GMT"/>
											<outline text="result.forEach (function (item) {" created="Fri, 01 Nov 2024 20:52:06 GMT">
												<outline text="const jstruct = JSON.parse (item.filecontents)" created="Wed, 19 Mar 2025 16:02:50 GMT"/>
												<outline text="theArray.push (jstruct);" created="Fri, 01 Nov 2024 20:52:52 GMT"/>
												<outline text="});" created="Fri, 01 Nov 2024 20:52:43 GMT"/>
												</outline>
											<outline text="callback (undefined, theArray);" created="Sat, 07 May 2022 14:03:25 GMT"/>
											<outline text="}" created="Fri, 22 Apr 2022 13:57:08 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
							</outline>
						<outline text="}" created="Fri, 01 Nov 2024 20:35:42 GMT"/>
						</outline>
					<outline text="" created="Wed, 19 Mar 2025 15:46:24 GMT"/>
					<outline text="" created="Wed, 19 Mar 2025 15:46:24 GMT"/>
					<outline text="" created="Wed, 19 Mar 2025 15:46:24 GMT"/>
					<outline text="" created="Wed, 19 Mar 2025 15:46:24 GMT"/>
					<outline text="" created="Mon, 23 Dec 2024 22:19:07 GMT"/>
					</outline>
				<outline text="//sockets -- 5/24/24 by DW" created="Fri, 24 May 2024 15:50:13 GMT">
					<outline text="var theWsServer = undefined;"/>
					<outline text=""/>
					<outline text="function getWsProtocol () { //2/8/23 by DW" created="Wed, 08 Feb 2023 15:05:23 GMT">
						<outline text="const protocol = (utils.getBoolean (config.flSecureWebsocket)) ? &quot;wss://&quot; : &quot;ws://&quot;;" created="Wed, 08 Feb 2023 15:04:20 GMT"/>
						<outline text="return (protocol);" created="Wed, 08 Feb 2023 15:05:36 GMT"/>
						<outline text="}" created="Wed, 08 Feb 2023 15:05:30 GMT"/>
						</outline>
					<outline text="function notifySocketSubscribers (verb, payload, flPayloadIsString, callbackToQualify) {">
						<outline text="Changes" isComment="true" created="Sat, 06 Mar 2021 17:36:54 GMT">
							<outline text="3/6/21; 12:36:58 PM by DW" created="Sat, 06 Mar 2021 17:36:56 GMT">
								<outline text="New optional param, flPayloadIsString. If true we don't treat the payload as if it were a JS object. " created="Sat, 06 Mar 2021 17:36:58 GMT"/>
								<outline text="New optional param, callbackToQualify, if specified we call it on each connection, if it returns true it qualifies to be notified" created="Sat, 06 Mar 2021 20:22:29 GMT"/>
								</outline>
							</outline>
						<outline text="if (theWsServer !== undefined) {">
							<outline text="var ctUpdates = 0, now = new Date (), ctTotalSockets = 0;"/>
							<outline text="if (payload !== undefined) { ">
								<outline text="if (!flPayloadIsString) {" created="Sat, 06 Mar 2021 17:38:36 GMT">
									<outline text="payload = utils.jsonStringify (payload);"/>
									<outline text="}" created="Sat, 06 Mar 2021 17:38:42 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="theWsServer.clients.forEach (function (conn, ix) {">
								<outline text="ctTotalSockets++;" created="Sat, 06 Mar 2021 20:35:11 GMT"/>
								<outline text="if (conn.appData !== undefined) { //it's one of ours">
									<outline text="var flnotify = true;" created="Sat, 06 Mar 2021 20:23:38 GMT"/>
									<outline text="if (callbackToQualify !== undefined) {" created="Sat, 06 Mar 2021 20:23:48 GMT">
										<outline text="flnotify = callbackToQualify (conn);" created="Sat, 06 Mar 2021 20:23:59 GMT"/>
										<outline text="}" created="Sat, 06 Mar 2021 20:23:53 GMT"/>
										</outline>
									<outline text="if (flnotify) {" created="Sat, 06 Mar 2021 20:24:14 GMT">
										<outline text="try {">
											<outline text="conn.sendText (verb + &quot;\r&quot; + payload);"/>
											<outline text="conn.appData.whenLastUpdate = now;"/>
											<outline text="conn.appData.ctUpdates++;"/>
											<outline text="ctUpdates++;"/>
											<outline text="}"/>
											</outline>
										<outline text="catch (err) {">
											<outline text="console.log (&quot;notifySocketSubscribers: socket #&quot; + i + &quot;: error updating&quot;);"/>
											<outline text="}"/>
											</outline>
										<outline text="}" created="Sat, 06 Mar 2021 20:24:17 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;\nnotifySocketSubscribers: &quot; + ctUpdates + &quot; of &quot; + ctTotalSockets + &quot; sockets were updated.\n&quot;);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkWebSocketCalls () { //expire timed-out calls">
						<outline text="}"/>
						</outline>
					<outline text="function countOpenSockets () {">
						<outline text="if (theWsServer === undefined) { //12/18/15 by DW">
							<outline text="return (0);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (theWsServer.clients.length);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getOpenSocketsArray () { //return an array with data about open sockets">
						<outline text="var theArray = new Array ();"/>
						<outline text="theWsServer.clients.forEach (function (conn, ix) {">
							<outline text="if (conn.appData !== undefined) { //it's one of ours">
								<outline text="theArray.push ({">
									<outline text="arrayIndex: ix,"/>
									<outline text="lastVerb: conn.appData.lastVerb,"/>
									<outline text="urlToWatch: conn.appData.urlToWatch,"/>
									<outline text="domain: conn.appData.domain,"/>
									<outline text="whenStarted: utils.viewDate (conn.appData.whenStarted),"/>
									<outline text="whenLastUpdate: utils.viewDate (conn.appData.whenLastUpdate)"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="return (theArray);"/>
						<outline text="" isComment="true"/>
						<outline text="for (var i = 0; i &lt; theWsServer.clients.length; i++) {" isComment="true">
							<outline text="var conn = theWsServer.clients [i];"/>
							<outline text="if (conn.chatLogData !== undefined) { //it's one of ours">
								<outline text="theArray [theArray.length] = {">
									<outline text="arrayIndex: i,"/>
									<outline text="lastVerb: conn.chatLogData.lastVerb,"/>
									<outline text="urlToWatch: conn.chatLogData.urlToWatch,"/>
									<outline text="domain: conn.chatLogData.domain,"/>
									<outline text="whenStarted: utils.viewDate (conn.chatLogData.whenStarted),"/>
									<outline text="whenLastUpdate: utils.viewDate (conn.chatLogData.whenLastUpdate)"/>
									<outline text="};"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function handleWebSocketConnection (conn) { ">
						<outline text="Changes" isComment="true" created="Fri, 24 May 2024 21:25:41 GMT">
							<outline text="2/23/25; 6:37:46 PM by DW" created="Sun, 23 Feb 2025 23:37:45 GMT">
								<outline text="Make sure conn.appData.wordpressUserInfo is not undefined." created="Sun, 23 Feb 2025 23:37:46 GMT"/>
								</outline>
							<outline text="5/24/24; 5:25:44 PM by DW" created="Fri, 24 May 2024 21:25:43 GMT">
								<outline text="Ported from daveappserver." created="Fri, 24 May 2024 21:25:45 GMT"/>
								<outline text="There's a struct at conn.appData.wordpressUserInfo that has this info in it." created="Fri, 24 May 2024 21:25:50 GMT">
									<outline text="{">
										<outline text="&quot;idUser&quot;: 21807,"/>
										<outline text="&quot;name&quot;: &quot;Dave Winer&quot;,"/>
										<outline text="&quot;username&quot;: &quot;scripting&quot;,"/>
										<outline text="&quot;email&quot;: &quot;dave@scripting.com&quot;,"/>
										<outline text="&quot;idPrimaryBlog&quot;: 9969399,"/>
										<outline text="&quot;urlPrimaryBlog&quot;: &quot;http://unberkeley.wordpress.com&quot;,"/>
										<outline text="&quot;whenStarted&quot;: &quot;2005-11-21T15:45:53.000Z&quot;,"/>
										<outline text="&quot;ctSites&quot;: 32"/>
										<outline text="}"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="var now = new Date ();"/>
						<outline text="console.log (&quot;handleWebSocketConnection&quot;);" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
						<outline text="conn.appData = { //initialize">
							<outline text="whenStarted: now,"/>
							<outline text="ctUpdates: 0,"/>
							<outline text="whenLastUpdate: new Date (0),"/>
							<outline text="lastVerb: undefined,"/>
							<outline text="urlToWatch: undefined,"/>
							<outline text="domain: undefined"/>
							<outline text="};"/>
							</outline>
						<outline text=""/>
						<outline text="function logToConsole (conn, verb, value) {">
							<outline text="getDomainName (conn.socket.remoteAddress, function (theName) { //log the request" isComment="true">
								<outline text="var freemem = utils.gigabyteString (os.freemem ()), method = &quot;WS:&quot; + verb, now = new Date (); "/>
								<outline text="if (theName === undefined) {">
									<outline text="theName = conn.socket.remoteAddress;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + value + &quot; &quot; + theName);"/>
								<outline text="conn.appData.domain = theName; "/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function kissOtherLogonsGoodnight (username, theNewConnection) {" created="Tue, 14 Dec 2021 22:21:23 GMT">
							<outline text="Changes" isComment="true" created="Tue, 14 Dec 2021 22:21:48 GMT">
								<outline text="12/14/21; 5:21:51 PM by DW" created="Tue, 14 Dec 2021 22:21:50 GMT">
									<outline text="Loop over the other instances with the same screenname, and tell them to have a good night. " created="Tue, 14 Dec 2021 22:21:51 GMT"/>
									</outline>
								</outline>
							<outline text="theWsServer.clients.forEach (function (conn, ix) {">
								<outline text="if (conn.appData !== undefined) { //it's one of ours">
									<outline text="if (conn != theNewConnection) { //it's not the new one" created="Tue, 14 Dec 2021 22:26:03 GMT">
										<outline text="if (conn.appData.wordpressUserInfo !== undefined) { //2/23/25 by DW" created="Sun, 23 Feb 2025 23:36:59 GMT">
											<outline text="if (conn.appData.wordpressUserInfo.username == username) {" created="Tue, 14 Dec 2021 22:23:36 GMT">
												<outline text="console.log (&quot;kissOtherLogonsGoodnight: \&quot;&quot; + conn.appData.wordpressUserInfo.username + &quot;\&quot; = \&quot;&quot; + username + &quot;\&quot;&quot;); " created="Sun, 12 Feb 2023 15:53:13 GMT"/>
												<outline text="conn.send (&quot;goodnight&quot;);"/>
												<outline text="}" created="Tue, 14 Dec 2021 22:23:50 GMT"/>
												</outline>
											<outline text="}" created="Sun, 23 Feb 2025 23:37:07 GMT"/>
											</outline>
										<outline text="}" created="Tue, 14 Dec 2021 22:26:10 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Tue, 14 Dec 2021 22:21:30 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="conn.on (&quot;message&quot;, function (theMessage) {">
							<outline text="const s = theMessage.toString ();" created="Mon, 28 Apr 2025 14:56:45 GMT"/>
							<outline text="var words = s.split (&quot; &quot;);"/>
							<outline text="console.log (&quot;handleWebSocketConnection: s == &quot; + s); //6/7/21 by DW" isComment="true" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
							<outline text="if (words.length &gt; 1) { //new protocol as of 11/29/15 by DW">
								<outline text="conn.appData.whenLastUpdate = now;"/>
								<outline text="conn.appData.lastVerb = words [0];"/>
								<outline text="switch (words [0]) {">
									<outline text="case &quot;greetings&quot;: " created="Fri, 24 May 2024 17:05:18 GMT">
										<outline text="let accessToken = utils.trimWhitespace (words [1]);" created="Fri, 24 May 2024 17:12:47 GMT"/>
										<outline text="getUserInfo (accessToken, function (err, theUserInfo) {" created="Fri, 24 May 2024 17:12:25 GMT">
											<outline text="if (!err) {" created="Fri, 24 May 2024 17:13:24 GMT">
												<outline text="conn.appData.accessToken = accessToken;"/>
												<outline text="conn.appData.wordpressUserInfo = theUserInfo;"/>
												<outline text="console.log (&quot;handleWebSocketConnection: conn.appData == &quot; + utils.jsonStringify (conn.appData));" created="Fri, 24 May 2024 17:07:05 GMT"/>
												<outline text="" created="Sun, 22 Dec 2024 14:46:24 GMT"/>
												<outline text="const eventData = { //12/21/24 by DW" created="Sun, 22 Dec 2024 15:15:04 GMT">
													<outline text="email: theUserInfo.email, " created="Sun, 22 Dec 2024 15:15:29 GMT"/>
													<outline text="name: theUserInfo.name, " created="Sun, 22 Dec 2024 15:15:20 GMT"/>
													<outline text="username: theUserInfo.username" created="Sun, 22 Dec 2024 15:15:29 GMT"/>
													<outline text="{&quot;name&quot;: &quot;Dave Winer&quot;, &quot;email&quot;: &quot;dave@scripting.com&quot;, &quot;idUser&quot;: 21807, &quot;ctSites&quot;: 34, &quot;username&quot;: &quot;scripting&quot;, &quot;whenStarted&quot;: &quot;2005-11-21T15:45:53.000Z&quot;, &quot;idPrimaryBlog&quot;: 9969399, &quot;urlPrimaryBlog&quot;: &quot;http://unberkeley.wordpress.com&quot;}" isComment="true"/>
													<outline text="}" created="Sun, 22 Dec 2024 15:15:11 GMT"/>
													</outline>
												<outline text="addToLog (&quot;connect&quot;, undefined, eventData);" created="Sat, 21 Dec 2024 16:51:17 GMT"/>
												<outline text="" created="Sun, 22 Dec 2024 14:46:25 GMT"/>
												<outline text="kissOtherLogonsGoodnight (theUserInfo.username, conn);" created="Fri, 24 May 2024 21:24:20 GMT"/>
												<outline text="}" created="Fri, 24 May 2024 17:13:36 GMT"/>
												</outline>
											<outline text="});" created="Fri, 24 May 2024 17:13:18 GMT"/>
											</outline>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;watch&quot;:" isComment="true">
										<outline text="conn.appData.urlToWatch = utils.trimWhitespace (words [1]);"/>
										<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.urlToWatch);"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;user&quot;: //9/29/21 by DW" isComment="true" created="Wed, 29 Sep 2021 17:05:23 GMT">
										<outline text="if (config.flUseTwitterIdentity) { //2/12/23 by DW" created="Mon, 06 Feb 2023 17:40:04 GMT">
											<outline text="var token = words [1], secret = words [2];" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.twOauthToken = token;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.twOauthTokenSecret = secret;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.urlToWatch = &quot;&quot;;" created="Wed, 29 Sep 2021 17:12:17 GMT"/>
											<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
												<outline text="conn.appData.screenname = screenname;" created="Wed, 29 Sep 2021 17:09:07 GMT"/>
												<outline text="kissOtherLogonsGoodnight (screenname, conn); //12/14/21 by DW" created="Tue, 14 Dec 2021 22:20:44 GMT"/>
												<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.screenname);"/>
												<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 17:40:24 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 06 Feb 2023 17:40:25 GMT">
											<outline text="var emailAddress = words [1], emailSecret = words [2];" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="config.findUserWithEmail (emailAddress, function (flInDatabase, userRec) {" created="Mon, 06 Feb 2023 15:06:38 GMT">
												<outline text="if (flInDatabase) {" created="Mon, 06 Feb 2023 15:07:20 GMT">
													<outline text="conn.appData.emailAddress = userRec.emailAddress;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
													<outline text="conn.appData.screenname = userRec.emailAddress;" created="Wed, 29 Sep 2021 17:09:07 GMT"/>
													<outline text="conn.appData.emailSecret = userRec.emailSecret;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
													<outline text="conn.appData.urlToWatch = &quot;&quot;;" created="Wed, 29 Sep 2021 17:12:17 GMT"/>
													<outline text="kissOtherLogonsGoodnight (conn.appData.screenname, conn); " created="Tue, 14 Dec 2021 22:20:44 GMT"/>
													<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.screenname);"/>
													<outline text="}" created="Mon, 06 Feb 2023 15:07:23 GMT"/>
													</outline>
												<outline text="});" created="Mon, 06 Feb 2023 15:06:57 GMT"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 17:40:27 GMT"/>
											</outline>
										<outline text="break;"/>
										</outline>
									<outline text="" created="Wed, 29 Sep 2021 17:05:23 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="conn.close ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;close&quot;, function () {">
							<outline text="console.log (&quot;'close' message received.&quot;);" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;error&quot;, function (err) {">
							<outline text="logToConsole (conn, &quot;error&quot;, err.code);" isComment="true"/>
							<outline text="conn.close (); //11/30/15 by DW -- https://github.com/scripting/betterWebSocketsDemo/issues/2#issuecomment-160658118" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function webSocketStartup () {">
						<outline text="if (config.flWebsocketEnabled) {">
							<outline text="try {">
								<outline text="console.log (&quot;webSocketStartup: config.websocketPort == &quot; + config.websocketPort);"/>
								<outline text="theWsServer = new websocket.Server ({port: config.websocketPort});"/>
								<outline text="theWsServer.on (&quot;connection&quot;, handleWebSocketConnection);"/>
								<outline text="theWsServer.on (&quot;error&quot;, function (err) {">
									<outline text="console.log (&quot;webSocketStartup: server error == &quot; + err.message);"/>
									<outline text="});"/>
									</outline>
								<outline text="console.log (&quot;webSocketStartup: websocket server successfully listening on port &quot; + config.websocketPort);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function handleWebSocketConnection (conn) { " isComment="true">
						<outline text="Changes" isComment="true" created="Fri, 24 May 2024 21:25:41 GMT">
							<outline text="2/23/25; 6:37:46 PM by DW" created="Sun, 23 Feb 2025 23:37:45 GMT">
								<outline text="Make sure conn.appData.wordpressUserInfo is not undefined." created="Sun, 23 Feb 2025 23:37:46 GMT"/>
								</outline>
							<outline text="5/24/24; 5:25:44 PM by DW" created="Fri, 24 May 2024 21:25:43 GMT">
								<outline text="Ported from daveappserver." created="Fri, 24 May 2024 21:25:45 GMT"/>
								<outline text="There's a struct at conn.appData.wordpressUserInfo that has this info in it." created="Fri, 24 May 2024 21:25:50 GMT">
									<outline text="{">
										<outline text="&quot;idUser&quot;: 21807,"/>
										<outline text="&quot;name&quot;: &quot;Dave Winer&quot;,"/>
										<outline text="&quot;username&quot;: &quot;scripting&quot;,"/>
										<outline text="&quot;email&quot;: &quot;dave@scripting.com&quot;,"/>
										<outline text="&quot;idPrimaryBlog&quot;: 9969399,"/>
										<outline text="&quot;urlPrimaryBlog&quot;: &quot;http://unberkeley.wordpress.com&quot;,"/>
										<outline text="&quot;whenStarted&quot;: &quot;2005-11-21T15:45:53.000Z&quot;,"/>
										<outline text="&quot;ctSites&quot;: 32"/>
										<outline text="}"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="var now = new Date ();"/>
						<outline text="console.log (&quot;handleWebSocketConnection: conn.socket.remoteAddress == &quot; + conn.socket.remoteAddress); //6/7/21 by DW" isComment="true" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
						<outline text="conn.appData = { //initialize">
							<outline text="whenStarted: now,"/>
							<outline text="ctUpdates: 0,"/>
							<outline text="whenLastUpdate: new Date (0),"/>
							<outline text="lastVerb: undefined,"/>
							<outline text="urlToWatch: undefined,"/>
							<outline text="domain: undefined"/>
							<outline text="};"/>
							</outline>
						<outline text=""/>
						<outline text="function logToConsole (conn, verb, value) {">
							<outline text="getDomainName (conn.socket.remoteAddress, function (theName) { //log the request" isComment="true">
								<outline text="var freemem = utils.gigabyteString (os.freemem ()), method = &quot;WS:&quot; + verb, now = new Date (); "/>
								<outline text="if (theName === undefined) {">
									<outline text="theName = conn.socket.remoteAddress;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + value + &quot; &quot; + theName);"/>
								<outline text="conn.appData.domain = theName; "/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Tue, 14 Dec 2021 22:21:22 GMT"/>
						<outline text="function kissOtherLogonsGoodnight (username, theNewConnection) {" created="Tue, 14 Dec 2021 22:21:23 GMT">
							<outline text="Changes" isComment="true" created="Tue, 14 Dec 2021 22:21:48 GMT">
								<outline text="12/14/21; 5:21:51 PM by DW" created="Tue, 14 Dec 2021 22:21:50 GMT">
									<outline text="Loop over the other instances with the same screenname, and tell them to have a good night. " created="Tue, 14 Dec 2021 22:21:51 GMT"/>
									</outline>
								</outline>
							<outline text="theWsServer.clients.forEach (function (conn, ix) {">
								<outline text="if (conn.appData !== undefined) { //it's one of ours">
									<outline text="if (conn != theNewConnection) { //it's not the new one" created="Tue, 14 Dec 2021 22:26:03 GMT">
										<outline text="if (conn.appData.wordpressUserInfo !== undefined) { //2/23/25 by DW" created="Sun, 23 Feb 2025 23:36:59 GMT">
											<outline text="if (conn.appData.wordpressUserInfo.username == username) {" created="Tue, 14 Dec 2021 22:23:36 GMT">
												<outline text="console.log (&quot;kissOtherLogonsGoodnight: \&quot;&quot; + conn.appData.wordpressUserInfo.username + &quot;\&quot; = \&quot;&quot; + username + &quot;\&quot;&quot;); " created="Sun, 12 Feb 2023 15:53:13 GMT"/>
												<outline text="conn.sendText (&quot;goodnight&quot;);"/>
												<outline text="}" created="Tue, 14 Dec 2021 22:23:50 GMT"/>
												</outline>
											<outline text="}" created="Sun, 23 Feb 2025 23:37:07 GMT"/>
											</outline>
										<outline text="}" created="Tue, 14 Dec 2021 22:26:10 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Tue, 14 Dec 2021 22:21:30 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="conn.on (&quot;text&quot;, function (s) {">
							<outline text="var words = s.split (&quot; &quot;);"/>
							<outline text="console.log (&quot;handleWebSocketConnection: s == &quot; + s); //6/7/21 by DW" isComment="true" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
							<outline text="if (words.length &gt; 1) { //new protocol as of 11/29/15 by DW">
								<outline text="conn.appData.whenLastUpdate = now;"/>
								<outline text="conn.appData.lastVerb = words [0];"/>
								<outline text="switch (words [0]) {">
									<outline text="case &quot;greetings&quot;: " created="Fri, 24 May 2024 17:05:18 GMT">
										<outline text="let accessToken = utils.trimWhitespace (words [1]);" created="Fri, 24 May 2024 17:12:47 GMT"/>
										<outline text="getUserInfo (accessToken, function (err, theUserInfo) {" created="Fri, 24 May 2024 17:12:25 GMT">
											<outline text="if (!err) {" created="Fri, 24 May 2024 17:13:24 GMT">
												<outline text="conn.appData.accessToken = accessToken;"/>
												<outline text="conn.appData.wordpressUserInfo = theUserInfo;"/>
												<outline text="console.log (&quot;handleWebSocketConnection: conn.appData == &quot; + utils.jsonStringify (conn.appData));" isComment="true" created="Fri, 24 May 2024 17:07:05 GMT"/>
												<outline text="" created="Sun, 22 Dec 2024 14:46:24 GMT"/>
												<outline text="const eventData = { //12/21/24 by DW" created="Sun, 22 Dec 2024 15:15:04 GMT">
													<outline text="email: theUserInfo.email, " created="Sun, 22 Dec 2024 15:15:29 GMT"/>
													<outline text="name: theUserInfo.name, " created="Sun, 22 Dec 2024 15:15:20 GMT"/>
													<outline text="username: theUserInfo.username" created="Sun, 22 Dec 2024 15:15:29 GMT"/>
													<outline text="{&quot;name&quot;: &quot;Dave Winer&quot;, &quot;email&quot;: &quot;dave@scripting.com&quot;, &quot;idUser&quot;: 21807, &quot;ctSites&quot;: 34, &quot;username&quot;: &quot;scripting&quot;, &quot;whenStarted&quot;: &quot;2005-11-21T15:45:53.000Z&quot;, &quot;idPrimaryBlog&quot;: 9969399, &quot;urlPrimaryBlog&quot;: &quot;http://unberkeley.wordpress.com&quot;}" isComment="true"/>
													<outline text="}" created="Sun, 22 Dec 2024 15:15:11 GMT"/>
													</outline>
												<outline text="addToLog (&quot;connect&quot;, undefined, eventData);" created="Sat, 21 Dec 2024 16:51:17 GMT"/>
												<outline text="" created="Sun, 22 Dec 2024 14:46:25 GMT"/>
												<outline text="kissOtherLogonsGoodnight (theUserInfo.username, conn);" created="Fri, 24 May 2024 21:24:20 GMT"/>
												<outline text="}" created="Fri, 24 May 2024 17:13:36 GMT"/>
												</outline>
											<outline text="});" created="Fri, 24 May 2024 17:13:18 GMT"/>
											</outline>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;watch&quot;:" isComment="true">
										<outline text="conn.appData.urlToWatch = utils.trimWhitespace (words [1]);"/>
										<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.urlToWatch);"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;user&quot;: //9/29/21 by DW" isComment="true" created="Wed, 29 Sep 2021 17:05:23 GMT">
										<outline text="if (config.flUseTwitterIdentity) { //2/12/23 by DW" created="Mon, 06 Feb 2023 17:40:04 GMT">
											<outline text="var token = words [1], secret = words [2];" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.twOauthToken = token;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.twOauthTokenSecret = secret;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="conn.appData.urlToWatch = &quot;&quot;;" created="Wed, 29 Sep 2021 17:12:17 GMT"/>
											<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
												<outline text="conn.appData.screenname = screenname;" created="Wed, 29 Sep 2021 17:09:07 GMT"/>
												<outline text="kissOtherLogonsGoodnight (screenname, conn); //12/14/21 by DW" created="Tue, 14 Dec 2021 22:20:44 GMT"/>
												<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.screenname);"/>
												<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 17:40:24 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 06 Feb 2023 17:40:25 GMT">
											<outline text="var emailAddress = words [1], emailSecret = words [2];" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
											<outline text="config.findUserWithEmail (emailAddress, function (flInDatabase, userRec) {" created="Mon, 06 Feb 2023 15:06:38 GMT">
												<outline text="if (flInDatabase) {" created="Mon, 06 Feb 2023 15:07:20 GMT">
													<outline text="conn.appData.emailAddress = userRec.emailAddress;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
													<outline text="conn.appData.screenname = userRec.emailAddress;" created="Wed, 29 Sep 2021 17:09:07 GMT"/>
													<outline text="conn.appData.emailSecret = userRec.emailSecret;" created="Wed, 29 Sep 2021 17:06:15 GMT"/>
													<outline text="conn.appData.urlToWatch = &quot;&quot;;" created="Wed, 29 Sep 2021 17:12:17 GMT"/>
													<outline text="kissOtherLogonsGoodnight (conn.appData.screenname, conn); " created="Tue, 14 Dec 2021 22:20:44 GMT"/>
													<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.screenname);"/>
													<outline text="}" created="Mon, 06 Feb 2023 15:07:23 GMT"/>
													</outline>
												<outline text="});" created="Mon, 06 Feb 2023 15:06:57 GMT"/>
												</outline>
											<outline text="}" created="Mon, 06 Feb 2023 17:40:27 GMT"/>
											</outline>
										<outline text="break;"/>
										</outline>
									<outline text="" created="Wed, 29 Sep 2021 17:05:23 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="conn.close ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;close&quot;, function () {">
							<outline text="console.log (&quot;'close' message received.&quot;);" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;error&quot;, function (err) {">
							<outline text="logToConsole (conn, &quot;error&quot;, err.code);" isComment="true"/>
							<outline text="conn.close (); //11/30/15 by DW -- https://github.com/scripting/betterWebSocketsDemo/issues/2#issuecomment-160658118" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function webSocketStartup () {" isComment="true">
						<outline text="Changes" isComment="true" created="Sun, 27 Apr 2025 20:57:02 GMT">
							<outline text="4/27/25; 4:57:05 PM by DW" created="Sun, 27 Apr 2025 20:57:03 GMT">
								<outline text="We now watch for errors and report them." created="Sun, 27 Apr 2025 20:57:05 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;webSocketStartup: config.flWebsocketEnabled == &quot; + config.flWebsocketEnabled);" created="Sat, 25 May 2024 13:01:22 GMT"/>
						<outline text="if (config.flWebsocketEnabled) {">
							<outline text="try {">
								<outline text="console.log (&quot;webSocketStartup: config.websocketPort == &quot; + config.websocketPort);"/>
								<outline text="theWsServer = websocket.createServer (handleWebSocketConnection);"/>
								<outline text="theWsServer.on (&quot;error&quot;, function (err) {">
									<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
									<outline text="});"/>
									</outline>
								<outline text="theWsServer.listen (config.websocketPort);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function webSocketStartup () {" isComment="true">
						<outline text="console.log (&quot;webSocketStartup: config.flWebsocketEnabled == &quot; + config.flWebsocketEnabled);" created="Sat, 25 May 2024 13:01:22 GMT"/>
						<outline text="if (config.flWebsocketEnabled) {">
							<outline text="try {">
								<outline text="theWsServer = websocket.createServer (handleWebSocketConnection);"/>
								<outline text="console.log (&quot;webSocketStartup: config.websocketPort == &quot; + config.websocketPort);"/>
								<outline text="theWsServer.listen (config.websocketPort);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//users table -- 2/26/25 by DW" created="Wed, 26 Feb 2025 14:53:22 GMT">
					<outline text="" created="Wed, 26 Feb 2025 14:53:41 GMT"/>
					<outline text="function countUserHit (username, userAgent, callback) {" created="Wed, 26 Feb 2025 14:53:41 GMT">
						<outline text="const sqltext = `">
							<outline text="insert into users (username, ctHits, whenLastHit, lastBrowser)"/>
							<outline text="values (${davesql.encode (username)}, 1, current_timestamp, ${davesql.encode (userAgent)})"/>
							<outline text="on duplicate key update">
								<outline text="ctHits = ctHits + 1,"/>
								<outline text="whenLastHit = current_timestamp,"/>
								<outline text="lastBrowser = values(lastBrowser);"/>
								</outline>
							<outline text="`;"/>
							</outline>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
								<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
								<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
								<outline text="callback (undefined, result);" created="Sat, 07 May 2022 14:03:25 GMT"/>
								<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
								</outline>
							<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
							</outline>
						<outline text="}" created="Wed, 26 Feb 2025 14:56:13 GMT"/>
						</outline>
					<outline text="" created="Wed, 26 Feb 2025 14:53:42 GMT"/>
					<outline text="" created="Wed, 26 Feb 2025 14:53:42 GMT"/>
					<outline text="" created="Wed, 26 Feb 2025 14:53:42 GMT"/>
					<outline text="" created="Wed, 26 Feb 2025 14:53:28 GMT"/>
					</outline>
				<outline text="//misc -- 10/28/24 by DW" created="Mon, 28 Oct 2024 16:07:51 GMT">
					<outline text="function fixBookmarksFile () { //10/28/24 by DW" created="Mon, 28 Oct 2024 16:07:51 GMT">
						<outline text="Changes" isComment="true" created="Tue, 29 Oct 2024 03:22:49 GMT">
							<outline text="10/28/24; 11:22:51 PM by DW" created="Tue, 29 Oct 2024 03:22:51 GMT">
								<outline text="Restores my bookmarks.opml file from a local backup." created="Tue, 29 Oct 2024 03:22:52 GMT"/>
								</outline>
							</outline>
						<outline text="fs.readFile (&quot;bookmarks.opml&quot;, function (err, opmltext) {" created="Mon, 28 Oct 2024 16:08:00 GMT">
							<outline text="if (err) {" created="Mon, 28 Oct 2024 16:08:27 GMT">
								<outline text="console.log (&quot;fixBookmarksFile: err.message == &quot; + err.message);" created="Mon, 28 Oct 2024 16:08:32 GMT"/>
								<outline text="}" created="Mon, 28 Oct 2024 16:08:42 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 28 Oct 2024 16:08:30 GMT">
								<outline text="const filecontents = opmltext.toString (), username = &quot;scripting&quot;, relpath = &quot;bookmarks.opml&quot;;" created="Mon, 28 Oct 2024 16:15:21 GMT"/>
								<outline text="const sqltext = &quot;UPDATE wpstorage SET filecontents = &quot; + davesql.encode (filecontents) + &quot; WHERE username = &quot; + davesql.encode (username) + &quot; AND relpath = &quot; + davesql.encode (relpath) + &quot;;&quot;;"/>
								<outline text="console.log (&quot;fixBookmarksFile: sqltext == &quot; + sqltext);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
										<outline text="console.log (&quot;fixBookmarksFile: err.message == &quot; + err.message);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
										<outline text="console.log (&quot;fixBookmarksFile: result == &quot; + utils.jsonStringify (result));" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
										<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
										</outline>
									<outline text="});" created="Tue, 19 Sep 2023 20:53:25 GMT"/>
									</outline>
								<outline text="" created="Mon, 28 Oct 2024 16:15:21 GMT"/>
								<outline text="" created="Mon, 28 Oct 2024 16:15:21 GMT"/>
								<outline text="}" created="Mon, 28 Oct 2024 16:09:04 GMT"/>
								</outline>
							<outline text="});" created="Mon, 28 Oct 2024 16:08:23 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Oct 2024 16:07:56 GMT"/>
						</outline>
					<outline text="function readAuthorizedAccounts () { //11/18/24 by DW" created="Mon, 18 Nov 2024 15:26:12 GMT">
						<outline text="if (config.authorizedAccountsPath !== undefined) {" created="Mon, 18 Nov 2024 15:26:41 GMT">
							<outline text="fs.readFile (config.authorizedAccountsPath, function (err, jsontext) {" created="Mon, 18 Nov 2024 15:26:54 GMT">
								<outline text="if (!err) {" created="Mon, 18 Nov 2024 15:27:13 GMT">
									<outline text="try {" created="Mon, 18 Nov 2024 15:27:19 GMT">
										<outline text="config.authorizedAccounts = JSON.parse (jsontext);" created="Mon, 18 Nov 2024 15:32:12 GMT"/>
										<outline text="console.log (new Date ().toLocaleTimeString () + &quot;: config.authorizedAccounts == &quot; + utils.jsonStringify (config.authorizedAccounts));" isComment="true" created="Mon, 18 Nov 2024 15:48:11 GMT"/>
										<outline text="}" created="Mon, 18 Nov 2024 15:27:41 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Mon, 18 Nov 2024 15:27:42 GMT">
										<outline text="console.log (&quot;readAuthorizedAccounts: err.message == &quot; + err.message);" created="Mon, 18 Nov 2024 15:27:46 GMT"/>
										<outline text="}" created="Mon, 18 Nov 2024 15:27:45 GMT"/>
										</outline>
									<outline text="}" created="Mon, 18 Nov 2024 15:27:17 GMT"/>
									</outline>
								<outline text="});" created="Mon, 18 Nov 2024 15:27:08 GMT"/>
								</outline>
							<outline text="}" created="Mon, 18 Nov 2024 15:26:51 GMT"/>
							</outline>
						<outline text="}" created="Mon, 18 Nov 2024 15:26:27 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Thu, 27 Feb 2025 14:59:17 GMT"/>
				<outline text="//stats -- 2/27/25 by DW" created="Thu, 27 Feb 2025 14:59:18 GMT">
					<outline text="var flStatsChanged = false;" created="Thu, 27 Feb 2025 15:06:58 GMT"/>
					<outline text="const statsFile = &quot;data/stats.json&quot;;" created="Thu, 27 Feb 2025 15:25:52 GMT"/>
					<outline text="" created="Thu, 27 Feb 2025 15:07:04 GMT"/>
					<outline text="function startStats (callback) {" created="Thu, 27 Feb 2025 15:04:57 GMT">
						<outline text="utils.sureFilePath (statsFile, function () {" created="Thu, 29 Apr 2021 21:02:01 GMT">
							<outline text="utils.readConfig (statsFile, stats, function () {" created="Thu, 27 Feb 2025 15:02:27 GMT">
								<outline text="if (callback !== undefined) {" created="Thu, 27 Feb 2025 15:16:35 GMT">
									<outline text="callback ();" created="Thu, 27 Feb 2025 15:06:40 GMT"/>
									<outline text="}" created="Thu, 27 Feb 2025 15:16:42 GMT"/>
									</outline>
								<outline text="});" created="Thu, 27 Feb 2025 15:03:49 GMT"/>
								</outline>
							<outline text="});" created="Thu, 29 Apr 2021 21:02:09 GMT"/>
							</outline>
						<outline text="}" created="Thu, 27 Feb 2025 15:05:02 GMT"/>
						</outline>
					<outline text="function statsChanged () {" created="Thu, 27 Feb 2025 15:15:59 GMT">
						<outline text="flStatsChanged = true;" created="Thu, 27 Feb 2025 15:16:10 GMT"/>
						<outline text="}" created="Thu, 27 Feb 2025 15:16:03 GMT"/>
						</outline>
					<outline text="function getStatsFromRequest (theRequest) {" created="Thu, 27 Feb 2025 15:01:39 GMT">
						<outline text="const now = new Date ();" created="Thu, 27 Feb 2025 15:08:07 GMT"/>
						<outline text="stats.ctHits++;" created="Thu, 27 Feb 2025 15:07:32 GMT"/>
						<outline text="stats.whenLastHit = now;" created="Thu, 27 Feb 2025 15:07:36 GMT"/>
						<outline text="if (stats.whenFirstHit === undefined) {" created="Thu, 27 Feb 2025 15:07:43 GMT">
							<outline text="stats.whenFirstHit = now;" created="Thu, 27 Feb 2025 15:07:56 GMT"/>
							<outline text="}" created="Thu, 27 Feb 2025 15:08:02 GMT"/>
							</outline>
						<outline text="" created="Thu, 27 Feb 2025 15:08:21 GMT"/>
						<outline text="const userAgent = theRequest.sysRequest.headers [&quot;user-agent&quot;];" created="Thu, 27 Feb 2025 15:08:21 GMT"/>
						<outline text="if (userAgent !== undefined) {" created="Thu, 27 Feb 2025 15:51:45 GMT">
							<outline text="if (stats.userAgents [userAgent] === undefined) {" created="Thu, 27 Feb 2025 15:09:14 GMT">
								<outline text="stats.userAgents [userAgent] = 1;" created="Thu, 27 Feb 2025 15:09:45 GMT"/>
								<outline text="}" created="Thu, 27 Feb 2025 15:09:38 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 27 Feb 2025 15:09:48 GMT">
								<outline text="stats.userAgents [userAgent]++;" created="Thu, 27 Feb 2025 15:09:56 GMT"/>
								<outline text="}" created="Thu, 27 Feb 2025 15:09:51 GMT"/>
								</outline>
							<outline text="}" created="Thu, 27 Feb 2025 15:51:51 GMT"/>
							</outline>
						<outline text="" created="Thu, 27 Feb 2025 15:19:38 GMT"/>
						<outline text="statsChanged ();"/>
						<outline text="}" created="Thu, 27 Feb 2025 15:01:56 GMT"/>
						</outline>
					<outline text="function checkStats () {" created="Thu, 27 Feb 2025 15:15:23 GMT">
						<outline text="if (flStatsChanged) {" created="Thu, 27 Feb 2025 15:12:29 GMT">
							<outline text="utils.sureFilePath (statsFile, function () {" created="Thu, 29 Apr 2021 21:02:01 GMT">
								<outline text="fs.writeFile (statsFile, utils.jsonStringify (stats), function (err) {" created="Thu, 27 Feb 2025 15:12:39 GMT">
									<outline text="});" created="Thu, 27 Feb 2025 15:13:02 GMT"/>
									</outline>
								<outline text="});" created="Thu, 29 Apr 2021 21:02:09 GMT"/>
								</outline>
							<outline text="flStatsChanged = false;" created="Thu, 27 Feb 2025 15:12:37 GMT"/>
							<outline text="}" created="Thu, 27 Feb 2025 15:12:33 GMT"/>
							</outline>
						<outline text="}" created="Thu, 27 Feb 2025 15:15:27 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Thu, 27 Feb 2025 14:59:18 GMT"/>
				<outline text="function handleHttpRequest (theRequest, options = new Object ()) { //returns true if request was handled" created="Tue, 22 Aug 2023 21:49:47 GMT">
					<outline text="Changes" isComment="true" created="Tue, 31 Oct 2023 13:54:15 GMT">
						<outline text="10/31/23; 9:54:19 AM by DW" created="Tue, 31 Oct 2023 13:54:18 GMT">
							<outline text="New optional param, options. " created="Tue, 31 Oct 2023 13:54:19 GMT"/>
							</outline>
						</outline>
					<outline text="const params = theRequest.params;" created="Tue, 22 Aug 2023 16:23:04 GMT"/>
					<outline text="" created="Thu, 27 Feb 2025 15:19:18 GMT"/>
					<outline text="getStatsFromRequest (theRequest); //2/27/25 by DW"/>
					<outline text="" created="Thu, 27 Feb 2025 15:19:14 GMT"/>
					<outline text="function returnRedirect (url, code) { //9/30/20 by DW">
						<outline text="var headers = {">
							<outline text="location: url"/>
							<outline text="};"/>
							</outline>
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnPlaintext (theText) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, theText);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnNotFound () {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnError (err) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (503, &quot;text/plain&quot;, err.message);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnData (jstruct) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (200, &quot;text/json&quot;, utils.jsonStringify (jstruct)); //5/9/24 by DW"/>
						<outline text="theRequest.httpReturn (200, &quot;application/javascript&quot;, utils.jsonStringify (jstruct));" isComment="true"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function httpReturn (err, data) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="if (err) {" created="Thu, 27 Jan 2022 16:15:45 GMT">
							<outline text="if (err.code !== undefined) { //2/22/25 by DW -- let the caller determine the code" created="Sat, 22 Feb 2025 14:35:03 GMT">
								<outline text="console.log (&quot;httpReturn: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);" isComment="true" created="Mon, 25 Mar 2024 14:53:58 GMT"/>
								<outline text="theRequest.httpReturn (err.code, &quot;text/plain&quot;, err.message);"/>
								<outline text="}" created="Sat, 22 Feb 2025 14:35:11 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 22 Feb 2025 14:35:12 GMT">
								<outline text="console.log (&quot;httpReturn: err.message == &quot; + err.message);" isComment="true" created="Mon, 25 Mar 2024 14:53:58 GMT"/>
								<outline text="returnError (err);" created="Mon, 28 Feb 2022 14:42:42 GMT"/>
								<outline text="}" created="Sat, 22 Feb 2025 14:35:14 GMT"/>
								</outline>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:48 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 27 Jan 2022 16:15:49 GMT">
							<outline text="console.log (&quot;httpReturn: data == &quot; + utils.jsonStringify (data));" isComment="true" created="Mon, 25 Mar 2024 14:53:58 GMT"/>
							<outline text="returnData (data);" created="Thu, 27 Jan 2022 16:15:54 GMT"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:51 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="" created="Tue, 30 Apr 2024 15:05:28 GMT"/>
					<outline text="function httpReturnFile (err, theFileFromDatabase) { //4/30/24 by DW" isComment="true" created="Tue, 30 Apr 2024 15:05:29 GMT">
						<outline text="if (err) {" created="Thu, 27 Jan 2022 16:15:45 GMT">
							<outline text="returnError (err);" created="Mon, 28 Feb 2022 14:42:42 GMT"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:48 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 27 Jan 2022 16:15:49 GMT">
							<outline text="var type = &quot;text/plain&quot;;" created="Tue, 30 Apr 2024 15:10:30 GMT"/>
							<outline text="if (theFileFromDatabase.type !== undefined) {" created="Tue, 30 Apr 2024 15:10:18 GMT">
								<outline text="type = theFileFromDatabase.type;" created="Tue, 30 Apr 2024 15:10:39 GMT"/>
								<outline text="}" created="Tue, 30 Apr 2024 15:10:27 GMT"/>
								</outline>
							<outline text="theRequest.httpReturn (200, type, theFileFromDatabase.filecontents);"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:51 GMT"/>
							</outline>
						<outline text="}" created="Tue, 30 Apr 2024 15:05:51 GMT"/>
						</outline>
					<outline text="function servePublicFile (virtualpath, callback) { //4/30/24 by DW" created="Tue, 30 Apr 2024 14:50:12 GMT">
						<outline text="Changes" isComment="true" created="Tue, 30 Apr 2024 14:51:05 GMT">
							<outline text="4/30/24; 10:54:00 AM by DW" created="Tue, 30 Apr 2024 14:53:58 GMT">
								<outline text="Created." created="Tue, 30 Apr 2024 14:54:00 GMT"/>
								<outline text="relpath is something like /bullmancuso/&lt;idsite&gt;/rss.xml" created="Tue, 30 Apr 2024 14:54:14 GMT"/>
								<outline text="https://wordland.social/scripting/12107055/rss.xml"/>
								<outline text="Returns a boolean saying whether the URL was for us, if not, pass it on." created="Tue, 30 Apr 2024 15:18:27 GMT"/>
								</outline>
							</outline>
						<outline text="const parts = virtualpath.split (&quot;/&quot;);" created="Wed, 22 Jan 2014 20:13:15 GMT" pgfnum="36365"/>
						<outline text="if (parts.length &lt; 4) {" created="Tue, 30 Apr 2024 15:27:21 GMT">
							<outline text="return (false);" created="Tue, 30 Apr 2024 15:27:34 GMT"/>
							<outline text="}" created="Tue, 30 Apr 2024 15:27:37 GMT"/>
							</outline>
						<outline text="const username = parts [1];" created="Tue, 30 Apr 2024 14:56:27 GMT"/>
						<outline text="if (username.length == 0) {" created="Tue, 30 Apr 2024 15:19:04 GMT">
							<outline text="return (false);" created="Tue, 30 Apr 2024 15:19:13 GMT"/>
							<outline text="}" created="Tue, 30 Apr 2024 15:19:16 GMT"/>
							</outline>
						<outline text="" created="Tue, 30 Apr 2024 15:27:38 GMT"/>
						<outline text="const idsite = parts [2];" created="Tue, 30 Apr 2024 14:56:27 GMT"/>
						<outline text="if (idsite.length == 0) {" created="Tue, 30 Apr 2024 15:19:04 GMT">
							<outline text="return (false);" created="Tue, 30 Apr 2024 15:19:13 GMT"/>
							<outline text="}" created="Tue, 30 Apr 2024 15:19:16 GMT"/>
							</outline>
						<outline text="" created="Tue, 30 Apr 2024 15:27:21 GMT"/>
						<outline text="var relpath = &quot;&quot;;" created="Tue, 30 Apr 2024 15:27:22 GMT"/>
						<outline text="parts.forEach (function (step, ix) {" created="Tue, 30 Apr 2024 15:28:42 GMT">
							<outline text="if (ix &gt;= 3) {" created="Tue, 30 Apr 2024 15:29:48 GMT">
								<outline text="if (relpath.length &gt; 0) {" created="Tue, 30 Apr 2024 15:29:54 GMT">
									<outline text="relpath += &quot;/&quot;;" created="Tue, 30 Apr 2024 15:30:14 GMT"/>
									<outline text="}" created="Tue, 30 Apr 2024 15:30:24 GMT"/>
									</outline>
								<outline text="relpath += step;" created="Tue, 30 Apr 2024 15:30:14 GMT"/>
								<outline text="}" created="Tue, 30 Apr 2024 15:29:53 GMT"/>
								</outline>
							<outline text="});" created="Tue, 30 Apr 2024 15:29:09 GMT"/>
							</outline>
						<outline text="" created="Tue, 30 Apr 2024 15:31:04 GMT"/>
						<outline text="const sqltext = &quot;select * from  wpstorage where username = &quot; + davesql.encode (username) + &quot; and idsite = &quot; + davesql.encode (idsite) + &quot; and relpath = &quot; + davesql.encode (relpath) + &quot; and flprivate = 0;&quot;;" created="Tue, 30 Apr 2024 14:51:05 GMT"/>
						<outline text="console.log (&quot;\nservePublicFile: sqltext == &quot; + sqltext + &quot;\n&quot;);" isComment="true" created="Sat, 27 Apr 2024 13:50:44 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Tue, 30 Apr 2024 15:36:29 GMT">
								<outline text="returnError (err);" created="Tue, 30 Apr 2024 15:36:32 GMT"/>
								<outline text="}" created="Tue, 30 Apr 2024 15:36:36 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 30 Apr 2024 15:36:37 GMT">
								<outline text="if (result.length == 0) {" created="Tue, 30 Apr 2024 15:38:30 GMT">
									<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found&quot;);"/>
									<outline text="}" created="Tue, 30 Apr 2024 15:39:55 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 30 Apr 2024 15:39:55 GMT">
									<outline text="const theFile = result [0];" created="Tue, 30 Apr 2024 15:41:36 GMT"/>
									<outline text="//it would be nice to unpack filecontents, add the public url of the feed and then send to client -- 5/13/24 by DW" isComment="true" created="Mon, 13 May 2024 17:58:26 GMT"/>
									<outline text="theRequest.httpReturn (200, theFile.type, theFile.filecontents);"/>
									<outline text="}" created="Tue, 30 Apr 2024 15:39:59 GMT"/>
									</outline>
								<outline text="}" created="Tue, 30 Apr 2024 15:36:57 GMT"/>
								</outline>
							<outline text="});" created="Tue, 30 Apr 2024 15:36:27 GMT"/>
							</outline>
						<outline text="" created="Tue, 30 Apr 2024 15:31:14 GMT"/>
						<outline text="return (true); //the request was for us" created="Tue, 30 Apr 2024 15:31:15 GMT"/>
						<outline text="}" created="Tue, 30 Apr 2024 14:50:51 GMT"/>
						</outline>
					<outline text="" created="Tue, 30 Apr 2024 15:05:29 GMT"/>
					<outline text="function xmlReturn (err, xmltext) { //4/29/24 by DW" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="if (err) {" created="Thu, 27 Jan 2022 16:15:45 GMT">
							<outline text="returnError (err);" created="Mon, 28 Feb 2022 14:42:42 GMT"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:48 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 27 Jan 2022 16:15:49 GMT">
							<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext);"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:51 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnHtml (err, htmltext) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="if (err) {" created="Thu, 27 Jan 2022 16:15:45 GMT">
							<outline text="returnError (err);" created="Mon, 28 Feb 2022 14:42:42 GMT"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:48 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 27 Jan 2022 16:15:49 GMT">
							<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:51 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnServerHomePage () { //3/25/24 by DW">
						<outline text="const pagetable = {">
							<outline text="urlServer: config.urlServer," created="Mon, 25 Mar 2024 16:08:52 GMT"/>
							<outline text="urlSocketServer: config.urlSocketServer //5/25/24 by DW" created="Sat, 25 May 2024 12:37:26 GMT"/>
							<outline text="};"/>
							</outline>
						<outline text="if (config.homePagetable !== undefined) { //3/14/25 by DW" created="Fri, 14 Mar 2025 14:29:23 GMT">
							<outline text="utils.mergeOptions (config.homePagetable, pagetable);" created="Fri, 14 Mar 2025 14:28:32 GMT"/>
							<outline text="}" created="Fri, 14 Mar 2025 14:29:29 GMT"/>
							</outline>
						<outline text="function getTemplateText (callback) {" created="Mon, 25 Mar 2024 15:32:09 GMT">
							<outline text="request (config.urlServerHomePageSource, function (err, response, templatetext) {">
								<outline text="if (err) {" created="Sat, 16 Sep 2023 14:39:59 GMT">
									<outline text="callback (err);" created="Sat, 16 Sep 2023 14:40:01 GMT"/>
									<outline text="}" created="Sat, 16 Sep 2023 14:40:04 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 16 Sep 2023 14:40:05 GMT">
									<outline text="if ((response.statusCode &gt;= 200) &amp;&amp; (response.statusCode &lt;= 299)) {" created="Sat, 16 Sep 2023 14:41:09 GMT">
										<outline text="callback (undefined, templatetext.toString ());" created="Sat, 16 Sep 2023 14:42:26 GMT"/>
										<outline text="}" created="Sat, 16 Sep 2023 14:41:10 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 16 Sep 2023 14:41:11 GMT">
										<outline text="const message = &quot;HTTP error == &quot; + response.statusCode;" created="Fri, 15 Sep 2023 15:08:57 GMT"/>
										<outline text="callback ({message});" created="Fri, 15 Sep 2023 15:08:57 GMT"/>
										<outline text="}" created="Sat, 16 Sep 2023 14:41:15 GMT"/>
										</outline>
									<outline text="}" created="Sat, 16 Sep 2023 14:40:07 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 25 Mar 2024 15:32:38 GMT"/>
							</outline>
						<outline text="if (config.urlServerHomePageSource === undefined) { //4/13/24 by DW" created="Sat, 13 Apr 2024 18:26:14 GMT">
							<outline text="return (false); //not handled" created="Sat, 13 Apr 2024 18:26:33 GMT"/>
							<outline text="}" created="Sat, 13 Apr 2024 18:26:39 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 13 Apr 2024 18:26:40 GMT">
							<outline text="getTemplateText (function (err, templatetext) {" created="Sat, 16 Sep 2023 14:35:42 GMT">
								<outline text="if (err) {" created="Sat, 16 Sep 2023 14:53:18 GMT">
									<outline text="returnError (err);" created="Sat, 16 Sep 2023 14:53:20 GMT"/>
									<outline text="}" created="Sat, 16 Sep 2023 14:53:32 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 16 Sep 2023 14:53:33 GMT">
									<outline text="const pagetext = utils.multipleReplaceAll (templatetext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
									<outline text="returnHtml (undefined, pagetext);"/>
									<outline text="}" created="Sat, 16 Sep 2023 14:53:35 GMT"/>
									</outline>
								<outline text="});" created="Sat, 16 Sep 2023 14:37:56 GMT"/>
								</outline>
							<outline text="return (true); //handled" created="Sat, 13 Apr 2024 18:26:50 GMT"/>
							<outline text="}" created="Sat, 13 Apr 2024 18:26:42 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function tokenRequired (callback) {" created="Sat, 26 Aug 2023 22:05:46 GMT">
						<outline text="const token = (params.token === undefined) ? undefined : base64UrlDecode (params.token);" created="Sat, 26 Aug 2023 22:04:27 GMT"/>
						<outline text="if (token === undefined) {" created="Sat, 26 Aug 2023 22:06:00 GMT">
							<outline text="const message = &quot;Can't get the info because the user must be logged in.&quot;;" created="Sat, 26 Aug 2023 22:06:28 GMT"/>
							<outline text="returnError ({message});" created="Sat, 26 Aug 2023 22:06:21 GMT"/>
							<outline text="}" created="Sat, 26 Aug 2023 22:06:06 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 26 Aug 2023 22:06:06 GMT">
							<outline text="isUserWhitelisted (token, function (err, flWhitelisted) { //10/24/24 by DW" created="Thu, 24 Oct 2024 14:19:44 GMT">
								<outline text="if (err) {" created="Thu, 24 Oct 2024 14:20:26 GMT">
									<outline text="returnError (err);" created="Sat, 26 Aug 2023 22:06:21 GMT"/>
									<outline text="}" created="Thu, 24 Oct 2024 14:20:29 GMT"/>
									</outline>
								<outline text="else {" created="Thu, 24 Oct 2024 14:20:38 GMT">
									<outline text="callback (token);" created="Sat, 26 Aug 2023 22:06:09 GMT"/>
									<outline text="}" created="Thu, 24 Oct 2024 14:20:47 GMT"/>
									</outline>
								<outline text="});" created="Thu, 24 Oct 2024 14:20:03 GMT"/>
								</outline>
							<outline text="}" created="Sat, 26 Aug 2023 22:06:11 GMT"/>
							</outline>
						<outline text="}" created="Sat, 26 Aug 2023 22:05:55 GMT"/>
						</outline>
					<outline text="function callWithUsername (callback) { //2/24/25 by DW">
						<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
							<outline text="getUsername (token, function (err, username) {">
								<outline text="if (err) {">
									<outline text="returnError (err);" created="Sat, 26 Aug 2023 22:06:21 GMT"/>
									<outline text="} "/>
									</outline>
								<outline text="else {" created="Fri, 10 May 2024 13:59:55 GMT">
									<outline text="callback (username);" created="Mon, 24 Feb 2025 23:37:19 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});" created="Fri, 10 May 2024 14:04:17 GMT"/>
								</outline>
							<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function unpackState (jsontext) { //9/4/23 by DW" created="Mon, 04 Sep 2023 20:22:27 GMT">
						<outline text="var jstruct;" created="Mon, 04 Sep 2023 20:22:50 GMT"/>
						<outline text="try {" created="Mon, 04 Sep 2023 20:22:50 GMT">
							<outline text="jstruct = JSON.parse (jsontext);" created="Mon, 04 Sep 2023 20:23:13 GMT"/>
							<outline text="return (jstruct);" created="Mon, 04 Sep 2023 20:24:52 GMT"/>
							<outline text="}" created="Mon, 04 Sep 2023 20:23:02 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Mon, 04 Sep 2023 20:23:03 GMT">
							<outline text="console.log (&quot;unpackState: Error parsing JSON text for state record. jsontext == &quot; + jsontext);" created="Mon, 04 Sep 2023 20:23:33 GMT"/>
							<outline text="return (undefined);" created="Mon, 04 Sep 2023 20:24:52 GMT"/>
							<outline text="}" created="Mon, 04 Sep 2023 20:23:08 GMT"/>
							</outline>
						<outline text="}" created="Mon, 04 Sep 2023 20:22:39 GMT"/>
						</outline>
					<outline text="function connectRedirect (urlAppHomePage=config.urlMyHomePage) {" created="Tue, 22 Aug 2023 15:29:45 GMT">
						<outline text="Changes" isComment="true" created="Mon, 04 Sep 2023 20:13:23 GMT">
							<outline text="11/14/23; 5:10:42 PM by DW" created="Tue, 14 Nov 2023 22:10:42 GMT">
								<outline text="On a multi-instance configuration we need to store pending confirmations in the database. " created="Tue, 14 Nov 2023 22:10:43 GMT"/>
								</outline>
							<outline text="9/4/23; 4:13:27 PM by DW" created="Mon, 04 Sep 2023 20:13:26 GMT">
								<outline text="New optional param, urlAppHomePage. " created="Mon, 04 Sep 2023 20:13:27 GMT"/>
								</outline>
							</outline>
						<outline text="function doRedirect (state) {" created="Tue, 14 Nov 2023 22:03:22 GMT">
							<outline text="const jsontext = JSON.stringify (state);" created="Tue, 14 Nov 2023 22:09:16 GMT"/>
							<outline text="const params = {">
								<outline text="client_id: config.clientId,"/>
								<outline text="redirect_uri: config.urlRedirect," created="Tue, 22 Aug 2023 15:35:04 GMT"/>
								<outline text="response_type: &quot;code&quot;," created="Tue, 22 Aug 2023 15:33:59 GMT"/>
								<outline text="scope: config.scope," created="Sat, 26 Aug 2023 22:23:40 GMT"/>
								<outline text="state: jsontext" created="Tue, 22 Aug 2023 15:34:15 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="const url = config.urlAuthorize + &quot;?&quot; + utils.buildParamList (params);"/>
							<outline text="returnRedirect (url);" created="Sun, 27 Aug 2023 14:32:01 GMT"/>
							<outline text="}" created="Tue, 14 Nov 2023 22:08:15 GMT"/>
							</outline>
						<outline text="if (options.createPendingConfirmation !== undefined) { //11/14/23 by DW" created="Tue, 14 Nov 2023 22:03:22 GMT">
							<outline text="options.createPendingConfirmation (function (err, obj) {" created="Tue, 14 Nov 2023 22:04:13 GMT">
								<outline text="if (err) {" created="Tue, 14 Nov 2023 22:04:30 GMT">
									<outline text="returnError (err);" created="Tue, 14 Nov 2023 22:04:33 GMT"/>
									<outline text="}" created="Tue, 14 Nov 2023 22:04:51 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 14 Nov 2023 22:04:52 GMT">
									<outline text="const state = {" created="Mon, 04 Sep 2023 20:18:54 GMT">
										<outline text="url: urlAppHomePage," created="Mon, 04 Sep 2023 20:19:13 GMT"/>
										<outline text="num: obj.magicString" created="Mon, 04 Sep 2023 20:19:16 GMT"/>
										<outline text="};" created="Mon, 04 Sep 2023 20:18:59 GMT"/>
										</outline>
									<outline text="doRedirect (state);" created="Tue, 14 Nov 2023 22:07:37 GMT"/>
									<outline text="}" created="Tue, 14 Nov 2023 22:04:54 GMT"/>
									</outline>
								<outline text="});" created="Tue, 14 Nov 2023 22:04:25 GMT"/>
								</outline>
							<outline text="}" created="Tue, 14 Nov 2023 22:03:32 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 14 Nov 2023 22:03:33 GMT">
							<outline text="const state = {" created="Mon, 04 Sep 2023 20:18:54 GMT">
								<outline text="url: urlAppHomePage," created="Mon, 04 Sep 2023 20:19:13 GMT"/>
								<outline text="num: config.myRandomNumber" created="Mon, 04 Sep 2023 20:19:16 GMT"/>
								<outline text="};" created="Mon, 04 Sep 2023 20:18:59 GMT"/>
								</outline>
							<outline text="doRedirect (state);" created="Tue, 14 Nov 2023 22:07:37 GMT"/>
							<outline text="" isComment="true" created="Tue, 14 Nov 2023 22:11:34 GMT"/>
							<outline text="function getState () { //9/4/23 by DW" isComment="true" created="Mon, 04 Sep 2023 20:18:44 GMT">
								<outline text="const state = {" created="Mon, 04 Sep 2023 20:18:54 GMT">
									<outline text="url: urlAppHomePage," created="Mon, 04 Sep 2023 20:19:13 GMT"/>
									<outline text="num: config.myRandomNumber" created="Mon, 04 Sep 2023 20:19:16 GMT"/>
									<outline text="};" created="Mon, 04 Sep 2023 20:18:59 GMT"/>
									</outline>
								<outline text="const jsontext = JSON.stringify (state);" created="Mon, 04 Sep 2023 20:17:30 GMT"/>
								<outline text="return (jsontext);" created="Mon, 04 Sep 2023 20:20:12 GMT"/>
								<outline text="}" created="Mon, 04 Sep 2023 20:18:49 GMT"/>
								</outline>
							<outline text="var params = {" isComment="true">
								<outline text="client_id: config.clientId,"/>
								<outline text="redirect_uri: config.urlRedirect," created="Tue, 22 Aug 2023 15:35:04 GMT"/>
								<outline text="response_type: &quot;code&quot;," created="Tue, 22 Aug 2023 15:33:59 GMT"/>
								<outline text="scope: config.scope," created="Sat, 26 Aug 2023 22:23:40 GMT"/>
								<outline text="state: getState (), //9/4/23 by DW" created="Tue, 22 Aug 2023 15:34:15 GMT"/>
								<outline text="state: config.myRandomNumber" isComment="true" created="Tue, 22 Aug 2023 15:34:15 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="const url = config.urlAuthorize + &quot;?&quot; + utils.buildParamList (params);" isComment="true"/>
							<outline text="returnRedirect (url);" isComment="true" created="Sun, 27 Aug 2023 14:32:01 GMT"/>
							<outline text="}" created="Tue, 14 Nov 2023 22:03:35 GMT"/>
							</outline>
						<outline text="}" created="Tue, 22 Aug 2023 15:29:51 GMT"/>
						</outline>
					<outline text="" created="Fri, 02 May 2025 20:51:51 GMT"/>
					<outline text="if (utils.endsWith (theRequest.client, &quot;178.128.235.223&quot;)) { //debugging -- 5/2/25 by DW" isComment="true" created="Fri, 02 May 2025 20:57:14 GMT">
						<outline text="console.log (&quot;\nhandleHttpRequest: theRequest.client == &quot; + theRequest.client);" created="Fri, 02 May 2025 20:51:51 GMT"/>
						<outline text="for (var x in theRequest.sysRequest.headers) {" created="Fri, 02 May 2025 20:53:11 GMT">
							<outline text="console.log (&quot;\t&quot; + x + &quot; == &quot; + theRequest.sysRequest.headers [x]);" created="Fri, 02 May 2025 20:54:47 GMT"/>
							<outline text="}" created="Fri, 02 May 2025 20:54:09 GMT"/>
							</outline>
						<outline text="console.log (&quot;&quot;);" created="Fri, 02 May 2025 20:58:54 GMT"/>
						<outline text="}" created="Fri, 02 May 2025 20:57:22 GMT"/>
						</outline>
					<outline text="" created="Sun, 24 Mar 2024 15:58:38 GMT"/>
					<outline text="switch (theRequest.lowermethod) {" created="Sun, 24 Mar 2024 15:58:39 GMT">
						<outline text="case &quot;post&quot;:" created="Sun, 24 Mar 2024 15:58:50 GMT">
							<outline text="switch (theRequest.lowerpath) {" created="Sun, 24 Mar 2024 15:59:11 GMT">
								<outline text="case &quot;/wordpresswritewholefile&quot;: //3/24/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="writeWholeFile (token, params.relpath, params.type, params.flprivate, theRequest.postBody.toString (), params.idsite, params.idpost, params.iddraft, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpresswriteuniquefile&quot;: //5/12/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="writeUniqueFile (token, params.relpath, params.type, params.flprivate, theRequest.postBody.toString (), params.idsite, params.idpost, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/testpost&quot;: //5/9/24 by DW" created="Thu, 09 May 2024 13:12:29 GMT">
									<outline text="let teststruct = {" created="Thu, 09 May 2024 13:13:43 GMT">
										<outline text="hello: &quot;hooray for hollywood&quot;" created="Thu, 09 May 2024 13:13:50 GMT"/>
										<outline text="};" created="Thu, 09 May 2024 13:13:59 GMT"/>
										</outline>
									<outline text="httpReturn (undefined, teststruct);" created="Thu, 09 May 2024 13:13:11 GMT"/>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressuploadimage&quot;: //11/10/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="uploadImage (token, theRequest.postBody, params.name, params.type, params.idsite, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="" created="Mon, 24 Mar 2025 21:55:08 GMT"/>
								<outline text="" created="Mon, 24 Mar 2025 21:55:08 GMT"/>
								<outline text="case &quot;/wordpressaddpost&quot;: //3/24/25 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="addPost (token, params.idsite, theRequest.postBody, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressupdatepost&quot;: //3/24/25 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="updatePost (token, params.idsite, params.idpost, theRequest.postBody, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="" created="Mon, 24 Mar 2025 21:55:09 GMT"/>
								<outline text="" created="Mon, 24 Mar 2025 21:55:09 GMT"/>
								<outline text="default:">
									<outline text="return (false);"/>
									</outline>
								<outline text="}" created="Sun, 24 Mar 2024 15:59:12 GMT"/>
								</outline>
							</outline>
						<outline text="case &quot;get&quot;:" created="Sun, 24 Mar 2024 15:58:57 GMT">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/&quot;:">
									<outline text="return (returnServerHomePage ()); //4/13/24 by DW == return true if we handled, false otherwise"/>
									</outline>
								<outline text="case &quot;/now&quot;:">
									<outline text="returnPlaintext (new Date ().toUTCString ());"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/stats&quot;: //2/27/25 by DW">
									<outline text="returnPlaintext (utils.jsonStringify (stats));"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="case &quot;/connect&quot;: " created="Tue, 22 Aug 2023 15:28:53 GMT">
									<outline text="connectRedirect (params.urlapphomepage);" created="Tue, 22 Aug 2023 15:29:31 GMT"/>
									<outline text="return (true);" created="Tue, 22 Aug 2023 15:29:08 GMT"/>
									</outline>
								<outline text="case &quot;/callbackfromwordpress&quot;:" created="Tue, 22 Aug 2023 16:19:15 GMT">
									<outline text="http://localhost:1408/callbackFromWordpress?code=UhRCafYhq8&amp;state=1204" isComment="true" created="Tue, 22 Aug 2023 16:23:29 GMT"/>
									<outline text="const state = unpackState (params.state);" created="Mon, 04 Sep 2023 20:21:55 GMT"/>
									<outline text="if (state === undefined) {" created="Mon, 04 Sep 2023 20:26:11 GMT">
										<outline text="const message = &quot;Can't connect the user because there was an error in the state returned from the server.&quot;;" created="Tue, 22 Aug 2023 21:47:36 GMT"/>
										<outline text="returnError ({message});" created="Tue, 22 Aug 2023 21:47:21 GMT"/>
										<outline text="}" created="Mon, 04 Sep 2023 20:26:23 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 04 Sep 2023 20:26:24 GMT">
										<outline text="function finishWordpressLogin () {" created="Tue, 14 Nov 2023 22:12:26 GMT">
											<outline text="const urlAppHomePage = (state.url === undefined) ? config.urlMyHomePage : state.url; //9/4/23 by DW" created="Mon, 04 Sep 2023 20:28:17 GMT"/>
											<outline text="requestTokenFromWordpress (params.code, function (err, tokenData) {" created="Tue, 22 Aug 2023 16:29:59 GMT">
												<outline text="if (err) {" created="Tue, 22 Aug 2023 16:41:24 GMT">
													<outline text="console.log (&quot;requestTokenFromWordpress: err.message == &quot; + err.message);"/>
													<outline text="returnError (err);" created="Tue, 22 Aug 2023 16:43:45 GMT"/>
													<outline text="}" created="Tue, 22 Aug 2023 16:41:32 GMT"/>
													</outline>
												<outline text="else {" created="Tue, 22 Aug 2023 16:41:38 GMT">
													<outline text="if (options.useWordpressAccount !== undefined) { //10/31/23 by DW" created="Tue, 31 Oct 2023 13:54:55 GMT">
														<outline text="let token = tokenData.access_token;" created="Tue, 31 Oct 2023 14:12:20 GMT"/>
														<outline text="getUserInfo (token, function (err, theUserInfo) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
															<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
																<outline text="console.log (&quot;getUserInfo: err.message == &quot; + err.message);"/>
																<outline text="returnError (err);" created="Tue, 22 Aug 2023 16:43:45 GMT"/>
																<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
																</outline>
															<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
																<outline text="options.useWordpressAccount (token, theUserInfo); " created="Tue, 31 Oct 2023 13:55:45 GMT"/>
																<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
																</outline>
															<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
															</outline>
														<outline text="}" created="Tue, 31 Oct 2023 13:55:16 GMT"/>
														</outline>
													<outline text="else {" created="Tue, 31 Oct 2023 13:55:17 GMT">
														<outline text="console.log (&quot;tokenData == &quot; + utils.jsonStringify (tokenData));" isComment="true" created="Tue, 22 Aug 2023 16:42:24 GMT"/>
														<outline text="const urlRedirect = urlAppHomePage + &quot;?wordpressaccesstoken=&quot; + base64UrlEncode (tokenData.access_token); //9/11/23 by DW" created="Wed, 23 Aug 2023 12:12:04 GMT"/>
														<outline text="const urlRedirect = urlAppHomePage + &quot;?accesstoken=&quot; + base64UrlEncode (tokenData.access_token); " isComment="true" created="Wed, 23 Aug 2023 12:12:04 GMT"/>
														<outline text="const urlRedirect = config.urlMyHomePage + &quot;?accesstoken=&quot; + base64UrlEncode (tokenData.access_token);" isComment="true" created="Wed, 23 Aug 2023 12:12:04 GMT"/>
														<outline text="console.log (&quot;urlRedirect == &quot; + urlRedirect);" isComment="true" created="Wed, 23 Aug 2023 12:11:59 GMT"/>
														<outline text="returnRedirect (urlRedirect);" created="Tue, 22 Aug 2023 22:14:02 GMT"/>
														<outline text="}" created="Tue, 31 Oct 2023 13:55:19 GMT"/>
														</outline>
													<outline text="}" created="Tue, 22 Aug 2023 16:41:40 GMT"/>
													</outline>
												<outline text="});" created="Tue, 22 Aug 2023 16:30:09 GMT"/>
												</outline>
											<outline text="}" created="Tue, 14 Nov 2023 22:15:44 GMT"/>
											</outline>
										<outline text="if (options.checkPendingConfirmation !== undefined) {" created="Tue, 14 Nov 2023 22:12:26 GMT">
											<outline text="options.checkPendingConfirmation (state.num, function (err) {" created="Tue, 14 Nov 2023 22:13:54 GMT">
												<outline text="if (err) {" created="Tue, 14 Nov 2023 22:14:27 GMT">
													<outline text="returnError (err);" created="Tue, 14 Nov 2023 22:15:58 GMT"/>
													<outline text="}" created="Tue, 14 Nov 2023 22:16:03 GMT"/>
													</outline>
												<outline text="else {" created="Tue, 14 Nov 2023 22:16:06 GMT">
													<outline text="finishWordpressLogin ();" created="Tue, 14 Nov 2023 22:16:17 GMT"/>
													<outline text="}" created="Tue, 14 Nov 2023 22:16:07 GMT"/>
													</outline>
												<outline text="});" created="Tue, 14 Nov 2023 22:14:16 GMT"/>
												</outline>
											<outline text="}" created="Tue, 14 Nov 2023 22:13:01 GMT"/>
											</outline>
										<outline text="else {" created="Tue, 14 Nov 2023 22:13:02 GMT">
											<outline text="if (state.num != config.myRandomNumber) {" created="Tue, 22 Aug 2023 21:46:52 GMT">
												<outline text="const message = &quot;Can't connect the user because the secret code doesn't match the one we sent.&quot;;" created="Tue, 22 Aug 2023 21:47:36 GMT"/>
												<outline text="returnError ({message});" created="Tue, 22 Aug 2023 21:47:21 GMT"/>
												<outline text="}" created="Tue, 22 Aug 2023 21:47:06 GMT"/>
												</outline>
											<outline text="else {" created="Tue, 22 Aug 2023 21:47:07 GMT">
												<outline text="finishWordpressLogin ();" created="Tue, 14 Nov 2023 22:16:17 GMT"/>
												<outline text="const urlAppHomePage = (state.url === undefined) ? config.urlMyHomePage : state.url; //9/4/23 by DW" isComment="true" created="Mon, 04 Sep 2023 20:28:17 GMT"/>
												<outline text="requestTokenFromWordpress (params.code, function (err, tokenData) {" isComment="true" created="Tue, 22 Aug 2023 16:29:59 GMT">
													<outline text="if (err) {" created="Tue, 22 Aug 2023 16:41:24 GMT">
														<outline text="console.log (&quot;requestTokenFromWordpress: err.message == &quot; + err.message);"/>
														<outline text="returnError (err);" created="Tue, 22 Aug 2023 16:43:45 GMT"/>
														<outline text="}" created="Tue, 22 Aug 2023 16:41:32 GMT"/>
														</outline>
													<outline text="else {" created="Tue, 22 Aug 2023 16:41:38 GMT">
														<outline text="if (options.useWordpressAccount !== undefined) { //10/31/23 by DW" created="Tue, 31 Oct 2023 13:54:55 GMT">
															<outline text="let token = tokenData.access_token;" created="Tue, 31 Oct 2023 14:12:20 GMT"/>
															<outline text="getUserInfo (token, function (err, theUserInfo) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
																<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
																	<outline text="console.log (&quot;getUserInfo: err.message == &quot; + err.message);"/>
																	<outline text="returnError (err);" created="Tue, 22 Aug 2023 16:43:45 GMT"/>
																	<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
																	</outline>
																<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
																	<outline text="options.useWordpressAccount (token, theUserInfo); " created="Tue, 31 Oct 2023 13:55:45 GMT"/>
																	<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
																	</outline>
																<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
																</outline>
															<outline text="}" created="Tue, 31 Oct 2023 13:55:16 GMT"/>
															</outline>
														<outline text="else {" created="Tue, 31 Oct 2023 13:55:17 GMT">
															<outline text="console.log (&quot;tokenData == &quot; + utils.jsonStringify (tokenData));" isComment="true" created="Tue, 22 Aug 2023 16:42:24 GMT"/>
															<outline text="const urlRedirect = urlAppHomePage + &quot;?wordpressaccesstoken=&quot; + base64UrlEncode (tokenData.access_token); //9/11/23 by DW" created="Wed, 23 Aug 2023 12:12:04 GMT"/>
															<outline text="const urlRedirect = urlAppHomePage + &quot;?accesstoken=&quot; + base64UrlEncode (tokenData.access_token); " isComment="true" created="Wed, 23 Aug 2023 12:12:04 GMT"/>
															<outline text="const urlRedirect = config.urlMyHomePage + &quot;?accesstoken=&quot; + base64UrlEncode (tokenData.access_token);" isComment="true" created="Wed, 23 Aug 2023 12:12:04 GMT"/>
															<outline text="console.log (&quot;urlRedirect == &quot; + urlRedirect);" isComment="true" created="Wed, 23 Aug 2023 12:11:59 GMT"/>
															<outline text="returnRedirect (urlRedirect);" created="Tue, 22 Aug 2023 22:14:02 GMT"/>
															<outline text="}" created="Tue, 31 Oct 2023 13:55:19 GMT"/>
															</outline>
														<outline text="}" created="Tue, 22 Aug 2023 16:41:40 GMT"/>
														</outline>
													<outline text="});" created="Tue, 22 Aug 2023 16:30:09 GMT"/>
													</outline>
												<outline text="}" created="Tue, 22 Aug 2023 21:47:09 GMT"/>
												</outline>
											<outline text="}" created="Tue, 14 Nov 2023 22:13:04 GMT"/>
											</outline>
										<outline text="}" created="Mon, 04 Sep 2023 20:26:26 GMT"/>
										</outline>
									<outline text="return (true);" created="Tue, 22 Aug 2023 16:19:22 GMT"/>
									</outline>
								<outline text="case &quot;/wordpressgetuserinfo&quot;: //8/26/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getUserInfo (token, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetusersites&quot;: //8/26/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getUserSites (token, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetsiteposts&quot;: //8/28/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getSitePosts (token, params.idsite, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetsiteusers&quot;: //8/28/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getSiteUsers (token, params.idsite, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetsiteinfo&quot;: //8/29/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getSiteInfo (token, params.idsite, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetsitemedialist&quot;: //8/29/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getSiteMedialist (token, params.idsite, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetsitecategories&quot;: //10/19/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getSiteCategories (token, params.idsite, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetpost&quot;: //8/28/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getPost (token, params.idsite, params.idpost, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressaddpost&quot;: //8/29/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="addPost (token, params.idsite, params.jsontext, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressupdatepost&quot;: //8/29/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="updatePost (token, params.idsite, params.idpost, params.jsontext, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressdeletepost&quot;: //9/4/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="deletePost (token, params.idsite, params.idpost, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetsubscriptions&quot;: //9/5/23 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getSubscriptions (token, httpReturn);" created="Thu, 18 Mar 2021 17:34:53 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressdeletefile&quot;: //3/26/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="deleteFile (token, params.relpath, params.flprivate, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressreadwholefile&quot;: //3/25/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="readWholeFile (token, params.relpath, params.flprivate, params.idsite, params.idpost, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpresswritewholefile&quot;: //3/24/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="writeWholeFile (token, params.relpath, params.type, params.flprivate, params.filedata, params.idsite, params.idpost, params.iddraft, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetrecentuserdrafts&quot;: //4/27/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getRecentUserDrafts (token, params.maxdrafts, params.idsite, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetuserfileinfo&quot;: //5/16/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getUserFileInfo (token, params.maxfiles, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressreaddraft&quot;: //5/29/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="readDraft (token, params.id, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressdeletedraft&quot;: //5/29/24 by DW" created="Sat, 21 Jun 2014 14:36:44 GMT" pgfnum="42364">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="deleteDraft (token, params.id, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressuseriswhitelisted&quot;: //10/24/24 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="isUserWhitelisted (token, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetnextdraft&quot;: //10/29/24 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getNextDraft (token, params.id, false, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetprevdraft&quot;: //10/29/24 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getNextDraft (token, params.id, true, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetnextprevarray&quot;: //11/1/24 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getNextPrevArray (token, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgettopusers&quot;: //12/23/24 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="callWithUsername (function (username) {">
										<outline text="getTopUsers (username, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgetpublicfile&quot;: //1/9/25 by DW" created="Thu, 09 Jan 2025 17:54:08 GMT">
									<outline text="getPublicFile (params.username, params.relpath, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressgettnewposts&quot;: //2/24/25 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="callWithUsername (function (username) {">
										<outline text="getNewPosts (username, httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpresscounthit&quot;: //2/26/25 by DW" created="Thu, 24 Oct 2024 13:47:47 GMT">
									<outline text="callWithUsername (function (username) {">
										<outline text="countUserHit (username, theRequest.sysRequest.headers [&quot;user-agent&quot;], httpReturn);" created="Thu, 24 Oct 2024 13:48:19 GMT"/>
										<outline text="});"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="" created="Sat, 15 Mar 2025 15:29:11 GMT"/>
								<outline text="case &quot;/wordpressaddcategory&quot;: //3/15/25 by DW" created="Sat, 15 Mar 2025 15:29:11 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="addSiteCategory (token, params.idsite, params.jsontext, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressdeletecategory&quot;: //3/15/25 by DW" created="Sat, 15 Mar 2025 15:29:11 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="deleteSiteCategory (token, params.idsite, params.slug, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="case &quot;/wordpressupdatecategory&quot;: //5/11/25 by DW" created="Sat, 15 Mar 2025 15:29:11 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="updateSiteCategory (token, params.idsite, params.slug, params.jsontext, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="" created="Wed, 19 Mar 2025 15:49:34 GMT"/>
								<outline text="case &quot;/wordpressgetalldraftsforuser&quot;: //3/19/25 by DW" created="Sat, 15 Mar 2025 15:29:11 GMT">
									<outline text="tokenRequired (function (token) {" created="Sat, 26 Aug 2023 22:05:23 GMT">
										<outline text="getAllDraftsForUser (token, httpReturn);"/>
										<outline text="});" created="Sat, 26 Aug 2023 22:05:35 GMT"/>
										</outline>
									<outline text="return (true);" created="Sat, 21 Jun 2014 14:37:03 GMT" pgfnum="42365"/>
									</outline>
								<outline text="" created="Thu, 09 Jan 2025 17:54:08 GMT"/>
								<outline text="default:">
									<outline text="if (config.flServePublicUserFiles) { //4/30/24 by DW" created="Tue, 30 Apr 2024 14:46:44 GMT">
										<outline text="return (servePublicFile (theRequest.lowerpath)); " created="Tue, 30 Apr 2024 14:48:42 GMT"/>
										<outline text="}" created="Tue, 30 Apr 2024 14:46:49 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 30 Apr 2024 14:46:50 GMT">
										<outline text="return (false);"/>
										<outline text="}" created="Tue, 30 Apr 2024 14:46:51 GMT"/>
										</outline>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="case &quot;options&quot;:" isComment="true" created="Mon, 25 Mar 2024 15:05:19 GMT">
							<outline text="var headers = {">
								<outline text="&quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;," created="Mon, 25 Mar 2024 15:17:38 GMT"/>
								<outline text="&quot;Access-Control-Allow-Methods&quot;: &quot;GET, POST, OPTIONS&quot;," created="Mon, 25 Mar 2024 15:08:08 GMT"/>
								<outline text="&quot;Access-Control-Allow-Headers&quot;: &quot;Content-Type, Authorization&quot;" created="Mon, 25 Mar 2024 15:08:43 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="theRequest.sysResponse.writeHead (204, headers);"/>
							<outline text="theRequest.sysResponse.end ();"/>
							<outline text="return (true);" created="Mon, 25 Mar 2024 15:05:25 GMT"/>
							</outline>
						<outline text="}" created="Sun, 24 Mar 2024 15:58:42 GMT"/>
						</outline>
					<outline text="}" created="Tue, 22 Aug 2023 21:49:55 GMT"/>
					</outline>
				<outline text="" created="Tue, 22 Aug 2023 15:29:46 GMT"/>
				<outline text="function start (options, callback) {" created="Tue, 05 Sep 2023 14:36:57 GMT">
					<outline text="function startLog () { //12/21/24 by DW" created="Sat, 21 Dec 2024 16:53:10 GMT">
						<outline text="const logOptions = {" created="Sat, 21 Dec 2024 16:53:22 GMT">
							<outline text="};" created="Sat, 21 Dec 2024 16:53:29 GMT"/>
							</outline>
						<outline text="log.start (logOptions, function () {" created="Sat, 21 Dec 2024 16:48:54 GMT">
							<outline text="const eventData = {" created="Sat, 21 Dec 2024 16:54:23 GMT">
								<outline text="urlServer: config.urlServer" created="Sun, 22 Dec 2024 14:32:13 GMT"/>
								<outline text="}" created="Sat, 21 Dec 2024 16:54:32 GMT"/>
								</outline>
							<outline text="addToLog (&quot;start&quot;, undefined, eventData);" created="Sat, 21 Dec 2024 16:51:17 GMT"/>
							<outline text="});" created="Sat, 21 Dec 2024 16:51:14 GMT"/>
							</outline>
						<outline text="}" created="Sat, 21 Dec 2024 16:53:17 GMT"/>
						</outline>
					<outline text="function everyMinute () {" created="Mon, 18 Nov 2024 15:34:27 GMT">
						<outline text="readAuthorizedAccounts (); //11/18/24 by DW" created="Mon, 18 Nov 2024 15:34:43 GMT"/>
						<outline text="}" created="Mon, 18 Nov 2024 15:34:34 GMT"/>
						</outline>
					<outline text="function everySecond () { //2/27/25 by DW" created="Mon, 28 Aug 2023 15:18:03 GMT">
						<outline text="checkStats ();" created="Thu, 27 Feb 2025 15:15:11 GMT"/>
						<outline text="}" created="Thu, 31 Aug 2023 15:09:11 GMT"/>
						</outline>
					<outline text="console.log (&quot;wpIdentity.start: options == &quot; + utils.jsonStringify (options));" created="Mon, 25 Mar 2024 23:56:28 GMT"/>
					<outline text="if (options !== undefined) {" created="Tue, 05 Sep 2023 14:37:17 GMT">
						<outline text="for (var x in options) {" created="Tue, 05 Sep 2023 14:37:25 GMT">
							<outline text="if (options [x] !== undefined) {" created="Mon, 25 Mar 2024 23:57:11 GMT">
								<outline text="config [x] = options [x];" created="Tue, 05 Sep 2023 14:37:30 GMT"/>
								<outline text="}" created="Mon, 25 Mar 2024 23:57:16 GMT"/>
								</outline>
							<outline text="}" created="Tue, 05 Sep 2023 14:37:40 GMT"/>
							</outline>
						<outline text="if (options.database !== undefined) { //3/24/24 by DW" created="Sun, 24 Mar 2024 15:02:06 GMT">
							<outline text="startStorage (options.database, function () {" created="Sun, 24 Mar 2024 15:02:24 GMT">
								<outline text="fixBookmarksFile (); //10/28/24 by DW" isComment="true" created="Mon, 28 Oct 2024 16:07:27 GMT"/>
								<outline text="});" created="Tue, 26 Mar 2024 00:23:47 GMT"/>
								</outline>
							<outline text="startLog (); //12/21/24 by DW" created="Sat, 21 Dec 2024 16:53:01 GMT"/>
							<outline text="}" created="Sun, 24 Mar 2024 15:02:16 GMT"/>
							</outline>
						<outline text="webSocketStartup (); //5/24/24 by DW"/>
						<outline text="startStats (); //2/27/25 by DW"/>
						<outline text="setInterval (everySecond, 1000);  //2/27/25 by DW"/>
						<outline text="everyMinute (); //11/18/24 by DW"/>
						<outline text="utils.runEveryMinute (everyMinute); //11/18/24 by DW"/>
						<outline text="if (callback !== undefined) {" created="Sun, 10 Sep 2023 20:40:36 GMT">
							<outline text="callback ();" created="Tue, 05 Sep 2023 14:37:42 GMT"/>
							<outline text="}" created="Sun, 10 Sep 2023 20:40:42 GMT"/>
							</outline>
						<outline text="}" created="Tue, 05 Sep 2023 14:37:25 GMT"/>
						</outline>
					<outline text="}" created="Tue, 05 Sep 2023 14:37:07 GMT"/>
					</outline>
				</outline>
			<outline text="client/api2.js" created="Thu, 11 Apr 2024 15:32:18 GMT">
				<outline text="function wordpress (userOptions, callback) {" created="Sat, 06 Apr 2024 19:55:04 GMT">
					<outline text="Changes" isComment="true" created="Sun, 07 Apr 2024 14:23:29 GMT">
						<outline text="3/11/25; 6:23:55 PM by DW" created="Tue, 11 Mar 2025 22:23:55 GMT">
							<outline text="Added calls to wpServerCall and wpServerPost." created="Tue, 11 Mar 2025 22:23:55 GMT"/>
							</outline>
						<outline text="3/9/25; 12:52:03 PM by DW" created="Sun, 09 Mar 2025 16:52:03 GMT">
							<outline text="this.getUserInfo returned wordpressMemory.userinfo, which works in WordLand because it calls the this.start which gets it at startup. " created="Sun, 09 Mar 2025 16:52:04 GMT"/>
							<outline text="but now we have an app that doesn't call this. start, so this.getUserInfo has to take that possibility into account that it hasn't been set. " created="Sun, 09 Mar 2025 16:52:58 GMT"/>
							</outline>
						<outline text="4/7/24; 10:23:32 AM by DW" created="Sun, 07 Apr 2024 14:23:30 GMT">
							<outline text="Added a callback, not optional. " created="Sun, 07 Apr 2024 14:23:32 GMT"/>
							<outline text="If the user is signed in, we get the sitelist, the first time and save it in wordpressMemory." created="Sun, 07 Apr 2024 14:23:40 GMT"/>
							</outline>
						</outline>
					<outline text="var wordpressMemory = { //saved in localstorage" created="Wed, 23 Aug 2023 12:22:06 GMT">
						<outline text="accessToken: undefined," created="Wed, 23 Aug 2023 12:22:51 GMT"/>
						<outline text="sitelist: undefined" created="Thu, 04 Apr 2024 16:11:09 GMT"/>
						<outline text="};" created="Wed, 23 Aug 2023 12:22:14 GMT"/>
						</outline>
					<outline text="var options = {" created="Sat, 06 Apr 2024 19:56:52 GMT">
						<outline text="serverAddress: undefined," created="Sat, 06 Apr 2024 20:11:31 GMT"/>
						<outline text="flMarkdownProcess: true," created="Sat, 06 Apr 2024 20:34:23 GMT"/>
						<outline text="maxCtUserDraftFiles: 1000, //10/31/24 by DW" created="Sat, 27 Apr 2024 13:37:33 GMT"/>
						<outline text="flWebsocketEnabled: true, //5/24/24 by DW" created="Fri, 24 May 2024 16:57:20 GMT"/>
						<outline text="urlChatLogSocket: &quot;ws://localhost:1622/&quot;," created="Sun, 19 May 2024 15:15:58 GMT"/>
						<outline text="urlChatLogSocket: &quot;wss://wordland.social/&quot;," isComment="true" created="Sun, 19 May 2024 15:15:58 GMT"/>
						<outline text="flWatchSocketForOtherCopies: true," created="Mon, 20 Dec 2021 16:31:40 GMT"/>
						<outline text="goodnightDialogMsg: &quot;WordLand is running in another tab. Click OK to reload this tab, or you can safely close it without losing any work.&quot; //12/22/24 by DW" created="Sat, 25 May 2024 14:10:14 GMT"/>
						<outline text="goodnightDialogMsg: &quot;WordLand is running in another tab. You must reload this one, or -- you can safely close it.&quot;" isComment="true" created="Sat, 25 May 2024 14:10:14 GMT"/>
						<outline text="};" created="Sat, 06 Apr 2024 19:56:59 GMT"/>
						</outline>
					<outline text="if (userOptions !== undefined) { //allow caller to override defaults" created="Thu, 11 Jan 2024 14:36:52 GMT">
						<outline text="for (x in userOptions) {" created="Thu, 04 Jan 2024 14:46:54 GMT">
							<outline text="if (userOptions [x] !== undefined) {" created="Thu, 04 Jan 2024 14:47:00 GMT">
								<outline text="options [x] = userOptions [x];" created="Thu, 04 Jan 2024 14:47:12 GMT"/>
								<outline text="}" created="Thu, 04 Jan 2024 14:47:11 GMT"/>
								</outline>
							<outline text="}" created="Thu, 04 Jan 2024 14:46:59 GMT"/>
							</outline>
						<outline text="}" created="Thu, 11 Jan 2024 14:36:58 GMT"/>
						</outline>
					<outline text="" created="Sat, 06 Apr 2024 19:59:17 GMT"/>
					<outline text="function saveWordpressMemory () {" created="Mon, 28 Aug 2023 15:35:54 GMT">
						<outline text="console.log (&quot;saveWordpressMemory&quot;);" isComment="true" created="Thu, 31 Aug 2023 15:09:59 GMT"/>
						<outline text="localStorage.wordpressMemory = jsonStringify (wordpressMemory);" created="Wed, 23 Aug 2023 12:23:35 GMT"/>
						<outline text="}" created="Mon, 28 Aug 2023 15:35:58 GMT"/>
						</outline>
					<outline text="function handleAccesstoken () { //10/3/23 by DW" created="Tue, 03 Oct 2023 16:15:29 GMT">
						<outline text="function gotToken (accessToken) {" created="Tue, 03 Oct 2023 16:23:13 GMT">
							<outline text="wordpressMemory.accessToken = base64UrlDecode (accessToken);" created="Wed, 23 Aug 2023 12:20:54 GMT"/>
							<outline text="saveWordpressMemory ();" created="Mon, 28 Aug 2023 15:35:47 GMT"/>
							<outline text="var newHref = stringNthField (location.href, &quot;?&quot;, 1);" created="Wed, 23 Aug 2023 12:20:54 GMT"/>
							<outline text="newHref = stringNthField (newHref, &quot;#&quot;, 1);" created="Sun, 07 Apr 2024 13:49:43 GMT"/>
							<outline text="location.href = newHref;" created="Wed, 23 Aug 2023 12:25:44 GMT"/>
							<outline text="}" created="Tue, 03 Oct 2023 16:23:18 GMT"/>
							</outline>
						<outline text="const accessToken = getURLParameter (&quot;wordpressaccesstoken&quot;);"/>
						<outline text="if (accessToken != &quot;null&quot;) {" created="Wed, 23 Aug 2023 12:20:38 GMT">
							<outline text="gotToken (accessToken);" created="Tue, 03 Oct 2023 16:22:40 GMT"/>
							<outline text="}" created="Wed, 23 Aug 2023 12:20:49 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 03 Oct 2023 16:16:15 GMT">
							<outline text="if (location.hash.length &gt; 0) {" created="Tue, 03 Oct 2023 16:16:23 GMT">
								<outline text="let hash = location.hash;" created="Tue, 03 Oct 2023 16:17:19 GMT"/>
								<outline text="if (beginsWith (hash, &quot;#?&quot;)) {" created="Tue, 03 Oct 2023 16:16:47 GMT">
									<outline text="hash = stringDelete (hash, 1, 2);" created="Tue, 03 Oct 2023 16:17:02 GMT"/>
									<outline text="const allparams = getAllUrlParams (hash);" created="Tue, 03 Oct 2023 16:20:43 GMT"/>
									<outline text="if (allparams.wordpressaccesstoken !== undefined) {" created="Tue, 03 Oct 2023 16:21:56 GMT">
										<outline text="gotToken (allparams.wordpressaccesstoken);" created="Tue, 03 Oct 2023 16:22:40 GMT"/>
										<outline text="}" created="Tue, 03 Oct 2023 16:22:13 GMT"/>
										</outline>
									<outline text="}" created="Tue, 03 Oct 2023 16:17:14 GMT"/>
									</outline>
								<outline text="}" created="Tue, 03 Oct 2023 16:16:34 GMT"/>
								</outline>
							<outline text="}" created="Tue, 03 Oct 2023 16:16:17 GMT"/>
							</outline>
						<outline text="}" created="Tue, 03 Oct 2023 16:15:40 GMT"/>
						</outline>
					<outline text="" created="Sat, 06 Apr 2024 20:57:12 GMT"/>
					<outline text="handleAccesstoken ();" created="Sat, 06 Apr 2024 20:57:46 GMT"/>
					<outline text="" created="Sat, 06 Apr 2024 20:57:50 GMT"/>
					<outline text="if (localStorage.wordpressMemory !== undefined) {" created="Wed, 23 Aug 2023 12:26:00 GMT">
						<outline text="let jstruct = JSON.parse (localStorage.wordpressMemory);" created="Wed, 03 Jan 2024 18:11:47 GMT"/>
						<outline text="for (var x in jstruct) {" created="Wed, 03 Jan 2024 18:11:59 GMT">
							<outline text="wordpressMemory [x] = jstruct [x];" created="Wed, 03 Jan 2024 18:12:08 GMT"/>
							<outline text="}" created="Wed, 03 Jan 2024 18:12:04 GMT"/>
							</outline>
						<outline text="}" created="Wed, 23 Aug 2023 12:26:09 GMT"/>
						</outline>
					<outline text="" created="Sat, 06 Apr 2024 20:00:33 GMT"/>
					<outline text="function getServerAddress () {" created="Sat, 26 Aug 2023 16:34:33 GMT">
						<outline text="return (options.serverAddress); " created="Mon, 25 Mar 2024 19:12:13 GMT"/>
						<outline text="}" created="Sat, 26 Aug 2023 16:43:36 GMT"/>
						</outline>
					<outline text="function getFeedUrl (username, idsite) { //5/15/25 by DW" created="Thu, 15 May 2025 21:09:36 GMT">
						<outline text="const feedUrl = options.serverAddress +  username + &quot;/&quot; + idsite + &quot;/rss.xml&quot;; //https://wordland.social/scripting/237777565/rss.xml" created="Thu, 15 May 2025 21:10:04 GMT"/>
						<outline text="return (feedUrl);" created="Thu, 15 May 2025 21:10:04 GMT"/>
						<outline text="}" created="Thu, 15 May 2025 21:09:50 GMT"/>
						</outline>
					<outline text="function markdownProcess (mdtext) {">
						<outline text="const replacetable = {" created="Sun, 07 Apr 2024 16:17:33 GMT">
							<outline text="&quot;\\.&quot;: &quot;.&quot;," created="Sun, 07 Apr 2024 16:17:46 GMT"/>
							<outline text="&quot;\\_&quot;: &quot;_&quot;," created="Sun, 07 Apr 2024 16:17:46 GMT"/>
							<outline text="&quot;\\*&quot;: &quot;*&quot;" created="Sun, 07 Apr 2024 16:17:46 GMT"/>
							<outline text="};" created="Sun, 07 Apr 2024 16:17:42 GMT"/>
							</outline>
						<outline text="mdtext = multipleReplaceAll (mdtext, replacetable, false); " created="Wed, 06 Nov 2013 17:58:18 GMT" pgfnum="31057"/>
						<outline text="const md = new Markdown.Converter ();"/>
						<outline text="const htmltext = md.makeHtml (mdtext);" created="Sun, 07 Apr 2024 01:47:32 GMT"/>
						<outline text="return (htmltext);" created="Sun, 07 Apr 2024 01:47:42 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="function base64UrlEncode (data) {">
						<outline text="let base64 = btoa (unescape (encodeURIComponent (data)));"/>
						<outline text="return base64.replace ('+', '-').replace ('/', '_').replace (/=+$/, '');"/>
						<outline text="}"/>
						</outline>
					<outline text="function base64UrlDecode (theData) {" created="Sat, 26 Aug 2023 17:46:35 GMT">
						<outline text="theData = theData.replace ('-', '+').replace ('_', '/');"/>
						<outline text="while (theData.length % 4) {">
							<outline text="theData += '=';"/>
							<outline text="}"/>
							</outline>
						<outline text="return (decodeURIComponent (escape (atob (theData))));"/>
						<outline text="}" created="Sat, 26 Aug 2023 17:46:55 GMT"/>
						</outline>
					<outline text="function arrayBufferToBase64 (buffer) { //11/13/24 by DW">
						<outline text="const bytes = new Uint8Array (buffer);"/>
						<outline text="let binary = &quot;&quot;;"/>
						<outline text="for (let i = 0; i &lt; bytes.byteLength; i++) {">
							<outline text="binary += String.fromCharCode (bytes [i]);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (btoa (binary));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpRequest (url, timeout, headers, callback) { ">
						<outline text="Changes" isComment="true">
							<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
								<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
								</outline>
							<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
								<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
								</outline>
							<outline text="7/20/20; 5:36:14 PM by DW">
								<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
									<outline text="function (err, data)"/>
									</outline>
								<outline text="No, I don't want to use promises."/>
								<outline text="for info about timeous see this page." isComment="true">
									<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
									</outline>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url: url,"/>
							<outline text="dataType: &quot;text&quot;, "/>
							<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout"/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
							<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
								<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
								<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
								</outline>
							<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
								<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
								<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
								</outline>
							<outline text="var err = {">
								<outline text="code: status.status,"/>
								<outline text="message"/>
								<outline text="};"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function userIsSignedIn () {" created="Wed, 23 Aug 2023 12:35:03 GMT">
						<outline text="return (wordpressMemory.accessToken !== undefined);" created="Wed, 23 Aug 2023 12:35:14 GMT"/>
						<outline text="}" created="Wed, 23 Aug 2023 12:35:12 GMT"/>
						</outline>
					<outline text="function getUserInfo (callback) { //8/26/23 by DW" created="Wed, 23 Mar 2022 14:28:05 GMT">
						<outline text="wpServerCall (&quot;wordpressgetuserinfo&quot;, undefined, true, callback);"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:28:26 GMT"/>
						</outline>
					<outline text="function getUserSites (callback) { //8/26/23 by DW" created="Wed, 23 Mar 2022 14:28:05 GMT">
						<outline text="wpServerCall (&quot;wordpressgetusersites&quot;, undefined, true, callback);"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:28:26 GMT"/>
						</outline>
					<outline text="function initUserInfo (callback) {" created="Mon, 08 Apr 2024 15:57:15 GMT">
						<outline text="Changes" isComment="true" created="Mon, 17 Mar 2025 16:23:58 GMT">
							<outline text="3/17/25; 12:24:02 PM by DW" created="Mon, 17 Mar 2025 16:24:01 GMT">
								<outline text="Previously we only read userinfo if we didn't already have a copy. " created="Mon, 17 Mar 2025 16:24:03 GMT"/>
								<outline text="Instead, it should go to the server at startup, the only time this function is called." created="Mon, 17 Mar 2025 16:25:34 GMT"/>
								</outline>
							</outline>
						<outline text="getUserInfo (function (err, userinfo) { //3/17/25 by DW" created="Fri, 23 Dec 2022 20:06:07 GMT">
							<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
								<outline text="callback (err);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
								<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
								<outline text="wordpressMemory.userinfo = userinfo;" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
								<outline text="saveWordpressMemory ();"/>
								<outline text="console.log (&quot;initUserInfo: wordpressMemory.userinfo == &quot; + jsonStringify (wordpressMemory.userinfo));" created="Mon, 08 Apr 2024 16:02:44 GMT"/>
								<outline text="callback ();" created="Thu, 18 Apr 2024 20:52:07 GMT"/>
								<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
								</outline>
							<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
							</outline>
						<outline text="if (wordpressMemory.userinfo === undefined) {" isComment="true" created="Sun, 07 Apr 2024 14:18:32 GMT">
							<outline text="getUserInfo (function (err, userinfo) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="callback (err);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="wordpressMemory.userinfo = userinfo;" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="saveWordpressMemory ();"/>
									<outline text="console.log (&quot;initUserInfo: wordpressMemory.userinfo == &quot; + jsonStringify (wordpressMemory.userinfo));" created="Mon, 08 Apr 2024 16:02:44 GMT"/>
									<outline text="callback ();" created="Thu, 18 Apr 2024 20:52:07 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 Apr 2024 14:20:32 GMT"/>
							</outline>
						<outline text="else {" isComment="true" created="Mon, 08 Apr 2024 15:59:51 GMT">
							<outline text="callback ();" created="Mon, 08 Apr 2024 16:00:02 GMT"/>
							<outline text="}" created="Mon, 08 Apr 2024 16:00:04 GMT"/>
							</outline>
						<outline text="}" created="Mon, 08 Apr 2024 15:57:25 GMT"/>
						</outline>
					<outline text="function initSitelist (callback) {" created="Mon, 08 Apr 2024 15:57:15 GMT">
						<outline text="Changes" isComment="true" created="Fri, 12 Apr 2024 14:45:12 GMT">
							<outline text="10/10/24; 2:36:56 PM by DW" created="Thu, 10 Oct 2024 18:36:56 GMT">
								<outline text="we were never updating the site list, that was ridiculous. " created="Thu, 10 Oct 2024 18:36:56 GMT"/>
								<outline text="now we're going to update the site list at startup, but not wait for it to return." created="Thu, 10 Oct 2024 18:37:25 GMT"/>
								<outline text="it takes about a second to run. but it'll be running in the background." created="Thu, 10 Oct 2024 18:37:39 GMT"/>
								</outline>
							<outline text="4/12/24; 10:45:16 AM by DW" created="Fri, 12 Apr 2024 14:45:14 GMT">
								<outline text="No longer abbreviating sitelist, it's already being done on the server. I want more info to be available on the client side. " created="Fri, 12 Apr 2024 14:45:16 GMT"/>
								</outline>
							</outline>
						<outline text="const whenstart = new Date ();" created="Thu, 10 Oct 2024 18:51:07 GMT"/>
						<outline text="getUserSites (function (err, theSitelist) {" created="Mon, 28 Aug 2023 15:34:09 GMT">
							<outline text="if (!err) {" created="Mon, 28 Aug 2023 15:34:41 GMT">
								<outline text="theSitelist.forEach (function (item) { //4/12/24 by DW" created="Fri, 12 Apr 2024 14:56:32 GMT">
									<outline text="try {" created="Fri, 12 Apr 2024 14:57:06 GMT">
										<outline text="item.whenCreated = new Date (item.whenCreated);" created="Fri, 12 Apr 2024 14:56:50 GMT"/>
										<outline text="}" created="Fri, 12 Apr 2024 14:57:07 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Fri, 12 Apr 2024 14:57:11 GMT">
										<outline text="}" created="Fri, 12 Apr 2024 14:57:14 GMT"/>
										</outline>
									<outline text="});" created="Fri, 12 Apr 2024 14:57:00 GMT"/>
									</outline>
								<outline text="wordpressMemory.sitelist = theSitelist;" created="Mon, 28 Aug 2023 15:35:13 GMT"/>
								<outline text="saveWordpressMemory ();"/>
								<outline text="console.log (&quot;initSitelist: wordpressMemory.sitelist.length == &quot; + wordpressMemory.sitelist.length + &quot;, &quot; + secondsSince (whenstart) + &quot; secs.&quot;);" isComment="true" created="Mon, 08 Apr 2024 16:02:44 GMT"/>
								<outline text="}" created="Mon, 28 Aug 2023 15:34:46 GMT"/>
								</outline>
							<outline text="});" created="Mon, 28 Aug 2023 15:34:36 GMT"/>
							</outline>
						<outline text="callback (undefined); //we're not waiting for this to complete" created="Thu, 10 Oct 2024 18:39:11 GMT"/>
						<outline text="if (wordpressMemory.sitelist === undefined) {" isComment="true" created="Sun, 07 Apr 2024 14:18:32 GMT">
							<outline text="function getAbbreviatedList (theSitelist) {" created="Sun, 14 Jan 2024 15:49:27 GMT">
								<outline text="const theList = new Array ();" created="Thu, 04 Jan 2024 16:12:01 GMT"/>
								<outline text="theSitelist.forEach (function (item) {" created="Thu, 04 Jan 2024 15:56:39 GMT">
									<outline text="theList.push ({" created="Thu, 04 Jan 2024 16:12:21 GMT">
										<outline text="idSite: item.idSite, " created="Thu, 04 Jan 2024 16:12:33 GMT"/>
										<outline text="urlSite: item.urlSite," created="Fri, 12 Apr 2024 14:37:06 GMT"/>
										<outline text="name: item.name," created="Thu, 04 Jan 2024 16:12:38 GMT"/>
										<outline text="description: item.description," created="Fri, 12 Apr 2024 14:36:59 GMT"/>
										<outline text="whenCreated: item.whenCreated" created="Fri, 12 Apr 2024 14:37:26 GMT"/>
										<outline text="});" created="Thu, 04 Jan 2024 16:12:25 GMT"/>
										</outline>
									<outline text="});" created="Thu, 04 Jan 2024 15:57:11 GMT"/>
									</outline>
								<outline text="return (theList);" created="Sun, 14 Jan 2024 15:50:53 GMT"/>
								<outline text="}" created="Sun, 14 Jan 2024 15:50:18 GMT"/>
								</outline>
							<outline text="getUserSites (function (err, theSitelist) {" created="Mon, 28 Aug 2023 15:34:09 GMT">
								<outline text="if (err) {" created="Mon, 28 Aug 2023 15:34:41 GMT">
									<outline text="callback (err);" created="Mon, 28 Aug 2023 15:34:43 GMT"/>
									<outline text="}" created="Mon, 28 Aug 2023 15:34:46 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 28 Aug 2023 15:34:47 GMT">
									<outline text="theSitelist.forEach (function (item) { //4/12/24 by DW" created="Fri, 12 Apr 2024 14:56:32 GMT">
										<outline text="try {" created="Fri, 12 Apr 2024 14:57:06 GMT">
											<outline text="item.whenCreated = new Date (item.whenCreated);" created="Fri, 12 Apr 2024 14:56:50 GMT"/>
											<outline text="}" created="Fri, 12 Apr 2024 14:57:07 GMT"/>
											</outline>
										<outline text="catch (err) {" created="Fri, 12 Apr 2024 14:57:11 GMT">
											<outline text="}" created="Fri, 12 Apr 2024 14:57:14 GMT"/>
											</outline>
										<outline text="});" created="Fri, 12 Apr 2024 14:57:00 GMT"/>
										</outline>
									<outline text="wordpressMemory.sitelist = theSitelist;" created="Mon, 28 Aug 2023 15:35:13 GMT"/>
									<outline text="wordpressMemory.sitelist = getAbbreviatedList (theSitelist);" isComment="true" created="Mon, 28 Aug 2023 15:35:13 GMT"/>
									<outline text="saveWordpressMemory ();"/>
									<outline text="console.log (&quot;initSitelist: wordpressMemory.sitelist == &quot; + jsonStringify (wordpressMemory.sitelist));" created="Mon, 08 Apr 2024 16:02:44 GMT"/>
									<outline text="callback (undefined);" created="Thu, 04 Jan 2024 16:12:58 GMT"/>
									<outline text="}" created="Mon, 28 Aug 2023 15:34:49 GMT"/>
									</outline>
								<outline text="});" created="Mon, 28 Aug 2023 15:34:36 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 Apr 2024 14:20:32 GMT"/>
							</outline>
						<outline text="else {" isComment="true" created="Mon, 08 Apr 2024 15:57:37 GMT">
							<outline text="callback ();" created="Mon, 08 Apr 2024 15:57:39 GMT"/>
							<outline text="}" created="Mon, 08 Apr 2024 15:57:42 GMT"/>
							</outline>
						<outline text="}" created="Mon, 08 Apr 2024 15:57:25 GMT"/>
						</outline>
					<outline text="" created="Tue, 11 Mar 2025 22:22:22 GMT"/>
					<outline text="function wpServerPost (path, params, flAuthenticated, filedata, callback, urlServer=getServerAddress ()) { //3/24/24 by DW">
						<outline text="Changes" isComment="true">
							<outline text="5/9/24; 11:27:23 AM by DW" created="Thu, 09 May 2024 15:27:23 GMT">
								<outline text="Rewritten per the conversation with ChatGPT." created="Thu, 09 May 2024 15:27:23 GMT">
									<outline text="https://chatgpt.com/share/7f8d9567-2790-4e9a-b699-0b87bfad1174?oai-dm=1" created="Thu, 09 May 2024 15:27:32 GMT"/>
									</outline>
								</outline>
							<outline text="11/1/23; 9:55:40 AM by DW" created="Wed, 01 Nov 2023 13:55:40 GMT">
								<outline text="Don't add oauth params (for twitter) if they are not defined. " created="Wed, 01 Nov 2023 13:55:40 GMT"/>
								</outline>
							<outline text="4/22/23; 1:24:18 PM by DW" created="Sat, 22 Apr 2023 17:24:17 GMT">
								<outline text="Change twBuildParamList call to buildParamList." created="Sat, 22 Apr 2023 17:24:19 GMT"/>
								</outline>
							<outline text="8/2/21; 2:19:56 PM by DW" created="Mon, 02 Aug 2021 18:19:55 GMT">
								<outline text="If filedata is not a PlainObject or a string, convert it to a string." created="Mon, 02 Aug 2021 18:19:58 GMT"/>
								</outline>
							<outline text="2/25/21; 1:01:58 PM by DW">
								<outline text="A special form of servercall for posts."/>
								</outline>
							</outline>
						<outline text="console.log (&quot;wpServerPost&quot;);" isComment="true" created="Sun, 24 Mar 2024 16:23:26 GMT"/>
						<outline text="var whenstart = new Date ();"/>
						<outline text="if (!$.isPlainObject (filedata) &amp;&amp; (typeof (filedata) != &quot;string&quot;)) { //8/2/21 by DW" created="Mon, 02 Aug 2021 18:36:54 GMT">
							<outline text="filedata = filedata.toString ();" created="Mon, 02 Aug 2021 18:38:49 GMT"/>
							<outline text="}" created="Mon, 02 Aug 2021 18:38:43 GMT"/>
							</outline>
						<outline text="if (params === undefined) {">
							<outline text="params = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (flAuthenticated) {">
							<outline text="params.token = base64UrlEncode (wordpressMemory.accessToken);" created="Sat, 26 Aug 2023 18:00:08 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="var url = urlServer + path + &quot;?&quot; + buildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
						<outline text="$.post (url, filedata) //5/9/24 by DW" created="Thu, 09 May 2024 15:09:56 GMT">
							<outline text=".done (function (data, textStatus) {" created="Thu, 09 May 2024 15:10:10 GMT">
								<outline text="if (callback !== undefined) {" created="Mon, 29 Mar 2021 17:13:51 GMT">
									<outline text="callback (undefined, data);" created="Sat, 09 Aug 2014 16:04:47 GMT" pgfnum="43222"/>
									<outline text="}" created="Mon, 29 Mar 2021 17:13:56 GMT"/>
									</outline>
								<outline text="console.log (&quot;Response Data:&quot;, data);" isComment="true"/>
								<outline text="console.log (&quot;Status:&quot;, textStatus);" isComment="true"/>
								<outline text="})" created="Thu, 09 May 2024 15:10:44 GMT"/>
								</outline>
							<outline text=".fail (function (jqXHR, textStatus, errorThrown) {" created="Thu, 09 May 2024 15:10:50 GMT">
								<outline text="if (callback !== undefined) {" created="Mon, 29 Mar 2021 17:13:51 GMT">
									<outline text="let err = {" created="Thu, 09 May 2024 15:26:44 GMT">
										<outline text="message: jqXHR.responseText || textStatus //3/26/25 by DW" created="Thu, 09 May 2024 15:27:03 GMT"/>
										<outline text="message: textStatus" isComment="true" created="Thu, 09 May 2024 15:27:03 GMT"/>
										<outline text="}" created="Thu, 09 May 2024 15:26:48 GMT"/>
										</outline>
									<outline text="callback (err);"/>
									<outline text="}" created="Mon, 29 Mar 2021 17:13:56 GMT"/>
									</outline>
								<outline text="console.log (&quot;Failed with status:&quot;, textStatus);" isComment="true"/>
								<outline text="console.log (&quot;Error thrown:&quot;, errorThrown);" isComment="true"/>
								<outline text="console.log (&quot;Response error:&quot;, jqXHR.responseText);" isComment="true"/>
								<outline text="});"/>
								</outline>
							</outline>
						<outline text="$.post (url, filedata, function (data, status) {" isComment="true" created="Sat, 09 Aug 2014 15:59:33 GMT" pgfnum="43210">
							<outline text="if (status == &quot;success&quot;) {" created="Sat, 09 Aug 2014 16:04:22 GMT" pgfnum="43217">
								<outline text="console.log (&quot;wpServerPost: url == &quot; + url + &quot;, secs == &quot; + secondsSince (whenstart)); " isComment="true"/>
								<outline text="if (callback !== undefined) {" created="Mon, 29 Mar 2021 17:13:51 GMT">
									<outline text="callback (undefined, data);" created="Sat, 09 Aug 2014 16:04:47 GMT" pgfnum="43222"/>
									<outline text="}" created="Mon, 29 Mar 2021 17:13:56 GMT"/>
									</outline>
								<outline text="}" created="Sat, 09 Aug 2014 16:04:38 GMT" pgfnum="43219"/>
								</outline>
							<outline text="else {" created="Sat, 09 Aug 2014 16:04:39 GMT" pgfnum="43220">
								<outline text="var err = {">
									<outline text="code: status.status,"/>
									<outline text="message: JSON.parse (status.responseText).message"/>
									<outline text="};"/>
									</outline>
								<outline text="if (callback !== undefined) {" created="Mon, 29 Mar 2021 17:13:51 GMT">
									<outline text="callback (err);"/>
									<outline text="}" created="Mon, 29 Mar 2021 17:13:56 GMT"/>
									</outline>
								<outline text="}" created="Sat, 09 Aug 2014 16:04:41 GMT" pgfnum="43221"/>
								</outline>
							<outline text="});" created="Sat, 09 Aug 2014 16:00:26 GMT" pgfnum="43214"/>
							</outline>
						<outline text="httpRequest (url, undefined, undefined, function (err, jsontext) {" isComment="true">
							<outline text="if (err) {">
								<outline text="console.log (&quot;servercall: url == &quot; + url + &quot;, err.message == &quot; + err.message);"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;servercall: url == &quot; + url + &quot;, secs == &quot; + secondsSince (whenstart)); "/>
								<outline text="callback (undefined, JSON.parse (jsontext));"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function wpServerCall (path, params, flAuthenticated, callback, urlServer=getServerAddress ()) {">
						<outline text="Changes" isComment="true">
							<outline text="4/22/23; 1:24:18 PM by DW" created="Sat, 22 Apr 2023 17:24:17 GMT">
								<outline text="Change twBuildParamList call to buildParamList." created="Sat, 22 Apr 2023 17:24:19 GMT"/>
								</outline>
							<outline text="12/23/22; 10:30:22 PM by DW" created="Sat, 24 Dec 2022 03:30:22 GMT">
								<outline text="Support email params. Don't send oauth token if it's not defined." created="Sat, 24 Dec 2022 03:30:22 GMT"/>
								</outline>
							<outline text="12/10/21; 12:51:58 PM by DW" created="Fri, 10 Dec 2021 17:51:57 GMT">
								<outline text="New optional parameter, urlServer, so this function can be used to call Daytona." created="Fri, 10 Dec 2021 17:51:58 GMT"/>
								</outline>
							<outline text="1/11/21; 12:51:47 PM by DW">
								<outline text="New param, flAuthenticated. If true we add the oAuth info to the call. "/>
								</outline>
							</outline>
						<outline text="console.log (&quot;wpServerCall&quot;);" isComment="true" created="Sun, 24 Mar 2024 16:23:26 GMT"/>
						<outline text="const whenstart = new Date ();"/>
						<outline text="var headers = undefined;" created="Sat, 26 Aug 2023 17:28:22 GMT"/>
						<outline text="if (params === undefined) {">
							<outline text="params = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (flAuthenticated) {">
							<outline text="params.token = base64UrlEncode (wordpressMemory.accessToken);" created="Sat, 26 Aug 2023 18:00:08 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="var url = urlServer + path + &quot;?&quot; + buildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
						<outline text="console.log (&quot;wpServerCall: url == &quot; + url);" isComment="true" created="Mon, 30 Jan 2023 17:35:43 GMT"/>
						<outline text="httpRequest (url, undefined, headers, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;wpServerCall: url == &quot; + url + &quot;, err.message == &quot; + err.message);" isComment="true"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;wpServerCall: jsontext.length == &quot; + jsontext.length + &quot;, secs == &quot; + secondsSince (whenstart)); " isComment="true"/>
								<outline text="callback (undefined, JSON.parse (jsontext));"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function readUserDataFile (relpath, flPrivate, callback, options) { //3/25/24 by DW" created="Mon, 25 Mar 2024 14:11:16 GMT">
						<outline text="Changes" isComment="true" created="Fri, 05 Apr 2024 16:54:27 GMT">
							<outline text="4/5/24; 12:54:30 PM by DW" created="Fri, 05 Apr 2024 16:54:29 GMT">
								<outline text="New optional param, options, comes after the callback. Sorry. It's a late addition." created="Fri, 05 Apr 2024 16:19:47 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;readUserDataFile&quot;);" isComment="true" created="Sun, 24 Mar 2024 16:19:41 GMT"/>
						<outline text="const whenstart = new Date ();" created="Sun, 20 Aug 2023 18:32:23 GMT"/>
						<outline text="var params = {" created="Fri, 23 Dec 2022 20:01:02 GMT">
							<outline text="relpath" created="Fri, 23 Dec 2022 20:12:44 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:12:46 GMT"/>
							</outline>
						<outline text="if (flPrivate) {" created="Fri, 23 Dec 2022 20:03:13 GMT">
							<outline text="params.flprivate = true;" created="Fri, 23 Dec 2022 20:03:33 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:03:16 GMT"/>
							</outline>
						<outline text="if (options !== undefined) { //4/5/24 by DW" created="Fri, 05 Apr 2024 16:20:24 GMT">
							<outline text="for (var x in options) {" created="Fri, 05 Apr 2024 16:21:05 GMT">
								<outline text="if (options [x] !== undefined) {" created="Fri, 05 Apr 2024 16:21:29 GMT">
									<outline text="params [x] = options [x];" created="Fri, 05 Apr 2024 16:21:10 GMT"/>
									<outline text="}" created="Fri, 05 Apr 2024 16:21:35 GMT"/>
									</outline>
								<outline text="}" created="Fri, 05 Apr 2024 16:21:10 GMT"/>
								</outline>
							<outline text="}" created="Fri, 05 Apr 2024 16:20:31 GMT"/>
							</outline>
						<outline text="wpServerCall (&quot;wordpressreadwholefile&quot;, params, true, callback);"/>
						<outline text="}" created="Mon, 25 Mar 2024 14:11:29 GMT"/>
						</outline>
					<outline text="function writeUserDataFile (relpath, filedata, type, flPrivate, callback, options) { //3/24/24 by DW" created="Sun, 24 Mar 2024 16:09:12 GMT">
						<outline text="Changes" isComment="true" created="Thu, 28 Mar 2024 15:36:55 GMT">
							<outline text="4/26/24; 9:30:24 AM by DW" created="Fri, 26 Apr 2024 13:30:23 GMT">
								<outline text="It's time to get it to work with POST. See note on 3/28/24." created="Fri, 26 Apr 2024 13:30:24 GMT"/>
								</outline>
							<outline text="4/5/24; 12:19:47 PM by DW" created="Fri, 05 Apr 2024 16:19:47 GMT">
								<outline text="New optional param, options, comes after the callback. Sorry. It's a late addition." created="Fri, 05 Apr 2024 16:19:47 GMT"/>
								</outline>
							<outline text="3/28/24; 11:36:57 AM by DW" created="Thu, 28 Mar 2024 15:36:56 GMT">
								<outline text="I couldn't get anything back from the server via POST, so I'm trying GET. " created="Thu, 28 Mar 2024 15:36:58 GMT"/>
								<outline text="It worked. I've been over it on both ends, can't see any difference between it and daveappserver which is what we use in feedland and drummer. " created="Thu, 28 Mar 2024 15:42:21 GMT"/>
								<outline text="So I'm just going to continue with calling GET, and trust that the next person to pass this way will figure out what I did wrong. ;-)" created="Thu, 28 Mar 2024 15:42:46 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;writeUserDataFile&quot;);" isComment="true" created="Sun, 24 Mar 2024 16:19:41 GMT"/>
						<outline text="const whenstart = new Date ();" created="Sun, 20 Aug 2023 18:32:23 GMT"/>
						<outline text="var params = {" created="Fri, 23 Dec 2022 20:01:02 GMT">
							<outline text="relpath, type" created="Fri, 23 Dec 2022 20:12:44 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:12:46 GMT"/>
							</outline>
						<outline text="if (flPrivate) {" created="Fri, 23 Dec 2022 20:03:13 GMT">
							<outline text="params.flprivate = true;" created="Fri, 23 Dec 2022 20:03:33 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:03:16 GMT"/>
							</outline>
						<outline text="" created="Fri, 05 Apr 2024 16:20:24 GMT"/>
						<outline text="if (options !== undefined) { //4/5/24 by DW" created="Fri, 05 Apr 2024 16:20:24 GMT">
							<outline text="for (var x in options) {" created="Fri, 05 Apr 2024 16:21:05 GMT">
								<outline text="if (options [x] !== undefined) {" created="Fri, 05 Apr 2024 16:21:29 GMT">
									<outline text="params [x] = options [x];" created="Fri, 05 Apr 2024 16:21:10 GMT"/>
									<outline text="}" created="Fri, 05 Apr 2024 16:21:35 GMT"/>
									</outline>
								<outline text="}" created="Fri, 05 Apr 2024 16:21:10 GMT"/>
								</outline>
							<outline text="}" created="Fri, 05 Apr 2024 16:20:31 GMT"/>
							</outline>
						<outline text="" created="Fri, 05 Apr 2024 16:20:24 GMT"/>
						<outline text="wpServerPost (&quot;wordpresswritewholefile&quot;, params, true, filedata, callback);"/>
						<outline text="}" created="Sun, 24 Mar 2024 16:09:20 GMT"/>
						</outline>
					<outline text="function writeUniqueFile (relpath, filedata, type, flPrivate, callback, options) { //5/12/24 by DW" created="Sun, 24 Mar 2024 16:09:12 GMT">
						<outline text="Changes" isComment="true" created="Thu, 28 Mar 2024 15:36:55 GMT">
							<outline text="5/12/24; 9:08:30 AM by DW" created="Sun, 12 May 2024 13:08:29 GMT">
								<outline text="New endpoint." created="Sun, 12 May 2024 13:08:30 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;writeUniqueFile&quot;);" isComment="true" created="Sun, 24 Mar 2024 16:19:41 GMT"/>
						<outline text="var params = {" created="Fri, 23 Dec 2022 20:01:02 GMT">
							<outline text="relpath, type" created="Fri, 23 Dec 2022 20:12:44 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:12:46 GMT"/>
							</outline>
						<outline text="if (flPrivate) {" created="Fri, 23 Dec 2022 20:03:13 GMT">
							<outline text="params.flprivate = true;" created="Fri, 23 Dec 2022 20:03:33 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:03:16 GMT"/>
							</outline>
						<outline text="" created="Fri, 05 Apr 2024 16:20:24 GMT"/>
						<outline text="if (options !== undefined) { //4/5/24 by DW" created="Fri, 05 Apr 2024 16:20:24 GMT">
							<outline text="for (var x in options) {" created="Fri, 05 Apr 2024 16:21:05 GMT">
								<outline text="if (options [x] !== undefined) {" created="Fri, 05 Apr 2024 16:21:29 GMT">
									<outline text="params [x] = options [x];" created="Fri, 05 Apr 2024 16:21:10 GMT"/>
									<outline text="}" created="Fri, 05 Apr 2024 16:21:35 GMT"/>
									</outline>
								<outline text="}" created="Fri, 05 Apr 2024 16:21:10 GMT"/>
								</outline>
							<outline text="}" created="Fri, 05 Apr 2024 16:20:31 GMT"/>
							</outline>
						<outline text="" created="Fri, 05 Apr 2024 16:20:24 GMT"/>
						<outline text="wpServerPost (&quot;wordpresswriteuniquefile&quot;, params, true, filedata, callback);"/>
						<outline text="}" created="Sun, 24 Mar 2024 16:09:20 GMT"/>
						</outline>
					<outline text="function readDraft (id, callback) { //5/29/24 by DW" created="Wed, 29 May 2024 13:50:15 GMT">
						<outline text="wpServerCall (&quot;wordpressreaddraft&quot;, {id}, true, callback);"/>
						<outline text="}" created="Wed, 29 May 2024 13:50:39 GMT"/>
						</outline>
					<outline text="function deleteDraft (id, callback) { //5/29/24 by DW" created="Wed, 29 May 2024 14:51:45 GMT">
						<outline text="wpServerCall (&quot;wordpressdeletedraft&quot;, {id}, true, callback);"/>
						<outline text="}" created="Wed, 29 May 2024 14:51:57 GMT"/>
						</outline>
					<outline text="function draftExists (id, callback) { //10/17/24 by DW" created="Thu, 17 Oct 2024 15:59:51 GMT">
						<outline text="readDraft (id, function (err, data) {" created="Thu, 17 Oct 2024 16:00:16 GMT">
							<outline text="callback (err === undefined);" created="Thu, 17 Oct 2024 16:00:38 GMT"/>
							<outline text="});" created="Thu, 17 Oct 2024 16:00:36 GMT"/>
							</outline>
						<outline text="}" created="Thu, 17 Oct 2024 16:00:06 GMT"/>
						</outline>
					<outline text="function getNextDraft (id, callback) { //10/29/24 by DW" created="Wed, 29 May 2024 14:51:45 GMT">
						<outline text="wpServerCall (&quot;wordpressgetnextdraft&quot;, {id}, true, callback);"/>
						<outline text="}" created="Wed, 29 May 2024 14:51:57 GMT"/>
						</outline>
					<outline text="function getPrevDraft (id, callback) { //10/29/24 by DW" created="Wed, 29 May 2024 14:51:45 GMT">
						<outline text="wpServerCall (&quot;wordpressgetprevdraft&quot;, {id}, true, callback);"/>
						<outline text="}" created="Wed, 29 May 2024 14:51:57 GMT"/>
						</outline>
					<outline text="function getNextPrevArray (callback) { //11/1/24 by DW" created="Fri, 01 Nov 2024 20:43:34 GMT">
						<outline text="wpServerCall (&quot;wordpressgetnextprevarray&quot;, undefined, true, callback);"/>
						<outline text="}" created="Fri, 01 Nov 2024 20:43:43 GMT"/>
						</outline>
					<outline text="function getAllDraftsForUser (callback) { //3/19/25 by DW" created="Wed, 19 Mar 2025 15:50:50 GMT">
						<outline text="wpServerCall (&quot;wordpressgetalldraftsforuser&quot;, undefined, true, callback);"/>
						<outline text="}" created="Wed, 19 Mar 2025 15:51:04 GMT"/>
						</outline>
					<outline text="function uploadImageFile (idsite, callback) { //11/11/24 by DW" created="Sun, 10 Nov 2024 17:30:35 GMT">
						<outline text="Changes" isComment="true" created="Wed, 13 Nov 2024 15:27:11 GMT">
							<outline text="11/13/24; 10:27:16 AM by DW" created="Wed, 13 Nov 2024 15:27:15 GMT">
								<outline text="The user interface for choosing and then uploading an image file to the wpidentity server." created="Wed, 13 Nov 2024 15:27:16 GMT"/>
								<outline text="The user chooses a file and we upload it to the indicated site. " created="Wed, 13 Nov 2024 15:43:11 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;uploadImageFile&quot;);" created="Mon, 11 Nov 2024 15:46:09 GMT"/>
						<outline text="const theInput = $(&quot;&lt;input type=\&quot;file\&quot; id=\&quot;idImageFileInput\&quot; accept=\&quot;image/*\&quot; style=\&quot;display: none;\&quot;&gt;&quot;);" created="Mon, 11 Nov 2024 15:49:21 GMT"/>
						<outline text="$(&quot;body&quot;).append (theInput);" created="Mon, 11 Nov 2024 15:49:21 GMT"/>
						<outline text="theInput.on (&quot;change&quot;, function () {">
							<outline text="const theFile = this.files [0];"/>
							<outline text="if (theFile === undefined) { //no file selected">
								<outline text="theInput.remove ();" created="Mon, 11 Nov 2024 16:05:02 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Mon, 11 Nov 2024 16:04:25 GMT">
								<outline text="const reader = new FileReader ();" created="Mon, 11 Nov 2024 15:53:43 GMT"/>
								<outline text="reader.onload = function (ev) {" created="Mon, 11 Nov 2024 15:53:52 GMT">
									<outline text="const params = {" created="Mon, 11 Nov 2024 22:15:09 GMT">
										<outline text="name: theFile.name," created="Mon, 11 Nov 2024 22:15:19 GMT"/>
										<outline text="type: theFile.type, " created="Mon, 11 Nov 2024 22:15:22 GMT"/>
										<outline text="idsite" created="Mon, 11 Nov 2024 22:15:27 GMT"/>
										<outline text="}" created="Mon, 11 Nov 2024 22:15:14 GMT"/>
										</outline>
									<outline text="const filedata = arrayBufferToBase64 (ev.target.result);" created="Wed, 13 Nov 2024 15:37:51 GMT"/>
									<outline text="wpServerPost (&quot;wordpressuploadimage&quot;, params, true, filedata, function (err, data) {">
										<outline text="theInput.remove ();" created="Mon, 11 Nov 2024 16:05:02 GMT"/>
										<outline text="callback (err, data);" created="Wed, 13 Nov 2024 15:48:41 GMT"/>
										<outline text="});" created="Wed, 13 Nov 2024 15:48:39 GMT"/>
										</outline>
									<outline text="}" created="Mon, 11 Nov 2024 15:54:08 GMT"/>
									</outline>
								<outline text="reader.readAsArrayBuffer (theFile);"/>
								<outline text="}" created="Mon, 11 Nov 2024 16:04:26 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="theInput.click ();"/>
						<outline text="}" created="Sun, 10 Nov 2024 17:30:41 GMT"/>
						</outline>
					<outline text="function uploadImageFile (callback) { //11/11/24 by DW" isComment="true" created="Sun, 10 Nov 2024 17:30:35 GMT">
						<outline text="" created="Wed, 13 Nov 2024 15:27:11 GMT"/>
						<outline text="Changes" isComment="true" created="Wed, 13 Nov 2024 15:27:11 GMT">
							<outline text="11/13/24; 10:27:16 AM by DW" created="Wed, 13 Nov 2024 15:27:15 GMT">
								<outline text="The user interface for choosing and then uploading an image file to the wpidentity server." created="Wed, 13 Nov 2024 15:27:16 GMT"/>
								</outline>
							</outline>
						<outline text="" created="Wed, 13 Nov 2024 15:27:11 GMT"/>
						<outline text="" created="Wed, 13 Nov 2024 15:27:11 GMT"/>
						<outline text="" created="Wed, 13 Nov 2024 15:27:12 GMT"/>
						<outline text="console.log (&quot;uploadImageFile&quot;);" created="Mon, 11 Nov 2024 15:46:09 GMT"/>
						<outline text="function arrayBufferToBase64 (buffer) {">
							<outline text="const bytes = new Uint8Array (buffer);"/>
							<outline text="let binary = &quot;&quot;;"/>
							<outline text="for (let i = 0; i &lt; bytes.byteLength; i++) {">
								<outline text="binary += String.fromCharCode (bytes [i]);"/>
								<outline text="}"/>
								</outline>
							<outline text="return (btoa (binary));"/>
							<outline text="}"/>
							</outline>
						<outline text="const theInput = $(&quot;&lt;input type=\&quot;file\&quot; id=\&quot;idImageFileInput\&quot; accept=\&quot;image/*\&quot; style=\&quot;display: none;\&quot;&gt;&quot;);" created="Mon, 11 Nov 2024 15:49:21 GMT"/>
						<outline text="$(&quot;body&quot;).append (theInput);" created="Mon, 11 Nov 2024 15:49:21 GMT"/>
						<outline text="theInput.on (&quot;change&quot;, function () {">
							<outline text="const file = this.files [0];"/>
							<outline text="if (file === undefined) { //no file selected">
								<outline text="theInput.remove ();" created="Mon, 11 Nov 2024 16:05:02 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Mon, 11 Nov 2024 16:04:25 GMT">
								<outline text="const reader = new FileReader ();" created="Mon, 11 Nov 2024 15:53:43 GMT"/>
								<outline text="reader.onload = function (ev) {" created="Mon, 11 Nov 2024 15:53:52 GMT">
									<outline text="function uploadImageDirectly (path, arrayBuffer, filetype, filename, idsite, callback) {">
										<outline text="const base64Data = arrayBufferToBase64 (arrayBuffer);"/>
										<outline text="const params = {" created="Mon, 11 Nov 2024 22:15:09 GMT">
											<outline text="token: base64UrlEncode (wordpressMemory.accessToken)," created="Mon, 11 Nov 2024 22:23:26 GMT"/>
											<outline text="name: filename," created="Mon, 11 Nov 2024 22:15:19 GMT"/>
											<outline text="type: filetype, " created="Mon, 11 Nov 2024 22:15:22 GMT"/>
											<outline text="idsite" created="Mon, 11 Nov 2024 22:15:27 GMT"/>
											<outline text="}" created="Mon, 11 Nov 2024 22:15:14 GMT"/>
											</outline>
										<outline text="const url = getServerAddress () + path + &quot;?&quot; + buildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
										<outline text="$.ajax ({">
											<outline text="url,"/>
											<outline text="type: &quot;POST&quot;,"/>
											<outline text="data: base64Data,"/>
											<outline text="processData: false, "/>
											<outline text="contentType: &quot;text/plain&quot;, "/>
											<outline text="success: function (data) {">
												<outline text="callback (undefined, data);"/>
												<outline text="},"/>
												</outline>
											<outline text="error: function (jqXHR, message, errorThrown) {">
												<outline text="callback ({message});"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="" created="Mon, 11 Nov 2024 22:09:17 GMT"/>
									<outline text="const filename = &quot;honeypot.png&quot;;" created="Mon, 11 Nov 2024 17:06:55 GMT"/>
									<outline text="const idsite = 237777565;" created="Mon, 11 Nov 2024 22:07:36 GMT"/>
									<outline text="const filetype = file.type;" created="Mon, 11 Nov 2024 22:08:09 GMT"/>
									<outline text="const arrayBuffer = ev.target.result;"/>
									<outline text="" created="Tue, 12 Nov 2024 17:30:15 GMT"/>
									<outline text="console.log (&quot;arrayBuffer length:&quot;, arrayBuffer.byteLength);" created="Tue, 12 Nov 2024 17:30:15 GMT"/>
									<outline text="" created="Mon, 11 Nov 2024 22:02:39 GMT"/>
									<outline text="uploadImageDirectly (&quot;wordpressuploadimage&quot;, arrayBuffer, filetype, filename, idsite, callback);" created="Mon, 11 Nov 2024 22:02:39 GMT"/>
									<outline text="}" created="Mon, 11 Nov 2024 15:54:08 GMT"/>
									</outline>
								<outline text="reader.readAsArrayBuffer (file);"/>
								<outline text="}" created="Mon, 11 Nov 2024 16:04:26 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="theInput.click ();"/>
						<outline text="}" created="Sun, 10 Nov 2024 17:30:41 GMT"/>
						</outline>
					<outline text="function uploadImageFile (callback) { //11/11/24 by DW" isComment="true" created="Sun, 10 Nov 2024 17:30:35 GMT">
						<outline text="console.log (&quot;uploadImageFile&quot;);" created="Mon, 11 Nov 2024 15:46:09 GMT"/>
						<outline text="function arrayBufferToBase64 (buffer) {">
							<outline text="const bytes = new Uint8Array (buffer);"/>
							<outline text="let binary = &quot;&quot;;"/>
							<outline text="for (let i = 0; i &lt; bytes.byteLength; i++) {">
								<outline text="binary += String.fromCharCode (bytes [i]);"/>
								<outline text="}"/>
								</outline>
							<outline text="return (btoa (binary));"/>
							<outline text="}"/>
							</outline>
						<outline text="const theInput = $(&quot;&lt;input type=\&quot;file\&quot; id=\&quot;idImageFileInput\&quot; accept=\&quot;image/*\&quot; style=\&quot;display: none;\&quot;&gt;&quot;);" created="Mon, 11 Nov 2024 15:49:21 GMT"/>
						<outline text="$(&quot;body&quot;).append (theInput);" created="Mon, 11 Nov 2024 15:49:21 GMT"/>
						<outline text="theInput.on (&quot;change&quot;, function () {">
							<outline text="const file = this.files [0];"/>
							<outline text="if (file === undefined) { //no file selected">
								<outline text="theInput.remove ();" created="Mon, 11 Nov 2024 16:05:02 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Mon, 11 Nov 2024 16:04:25 GMT">
								<outline text="const reader = new FileReader ();" created="Mon, 11 Nov 2024 15:53:43 GMT"/>
								<outline text="reader.readAsArrayBuffer (file);"/>
								<outline text="reader.onload = function (ev) {" created="Mon, 11 Nov 2024 15:53:52 GMT">
									<outline text="function uploadImageDirectly (path, arrayBuffer, filetype, filename, idsite, callback) {">
										<outline text="const blob = new Blob ([arrayBuffer], {type: filetype});"/>
										<outline text="const params = {" created="Mon, 11 Nov 2024 22:15:09 GMT">
											<outline text="token: base64UrlEncode (wordpressMemory.accessToken)," created="Mon, 11 Nov 2024 22:23:26 GMT"/>
											<outline text="name: filename," created="Mon, 11 Nov 2024 22:15:19 GMT"/>
											<outline text="type: filetype, " created="Mon, 11 Nov 2024 22:15:22 GMT"/>
											<outline text="idsite" created="Mon, 11 Nov 2024 22:15:27 GMT"/>
											<outline text="}" created="Mon, 11 Nov 2024 22:15:14 GMT"/>
											</outline>
										<outline text="const url = getServerAddress () + path + &quot;?&quot; + buildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
										<outline text="$.ajax ({">
											<outline text="url,"/>
											<outline text="type: &quot;POST&quot;,"/>
											<outline text="data: blob,"/>
											<outline text="processData: false, "/>
											<outline text="contentType: false, "/>
											<outline text="success: function (data) {">
												<outline text="callback (undefined, data);"/>
												<outline text="},"/>
												</outline>
											<outline text="error: function (jqXHR, message, errorThrown) {">
												<outline text="callback ({message});"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="" created="Mon, 11 Nov 2024 22:09:17 GMT"/>
									<outline text="const filename = &quot;honeypot&quot;;" created="Mon, 11 Nov 2024 17:06:55 GMT"/>
									<outline text="const idsite = 237777565;" created="Mon, 11 Nov 2024 22:07:36 GMT"/>
									<outline text="const filetype = file.type;" created="Mon, 11 Nov 2024 22:08:09 GMT"/>
									<outline text="const arrayBuffer = ev.target.result;"/>
									<outline text="" created="Mon, 11 Nov 2024 22:02:39 GMT"/>
									<outline text="uploadImageDirectly (&quot;wordpressuploadimage&quot;, arrayBuffer, filetype, filename, idsite, callback);" created="Mon, 11 Nov 2024 22:02:39 GMT"/>
									<outline text="}" created="Mon, 11 Nov 2024 15:54:08 GMT"/>
									</outline>
								<outline text="}" created="Mon, 11 Nov 2024 16:04:26 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="theInput.click ();"/>
						<outline text="}" created="Sun, 10 Nov 2024 17:30:41 GMT"/>
						</outline>
					<outline text="function addCategory (idsite, theCategory, callback) { //3/15/25 by DW" created="Sat, 15 Mar 2025 15:34:17 GMT">
						<outline text="const jsontext = JSON.stringify (theCategory);" created="Tue, 29 Aug 2023 16:54:12 GMT"/>
						<outline text="wpServerCall (&quot;wordpressaddcategory&quot;, {idsite, jsontext}, true, callback);"/>
						<outline text="}" created="Sat, 15 Mar 2025 15:34:33 GMT"/>
						</outline>
					<outline text="function deleteCategory (idsite, slug, callback) { //3/15/25 by DW" created="Sat, 15 Mar 2025 15:34:17 GMT">
						<outline text="wpServerCall (&quot;wordpressdeletecategory&quot;, {idsite, slug}, true, callback);"/>
						<outline text="}" created="Sat, 15 Mar 2025 15:34:33 GMT"/>
						</outline>
					<outline text="function updateCategory (idsite, slug, theCategory, callback) { //5/11/25 by DW" created="Sat, 15 Mar 2025 15:34:17 GMT">
						<outline text="const jsontext = JSON.stringify (theCategory);" created="Tue, 29 Aug 2023 16:54:12 GMT"/>
						<outline text="wpServerCall (&quot;wordpressupdatecategory&quot;, {idsite, slug, jsontext}, true, callback);"/>
						<outline text="}" created="Sat, 15 Mar 2025 15:34:33 GMT"/>
						</outline>
					<outline text="" created="Mon, 24 Mar 2025 21:56:40 GMT"/>
					<outline text="function addPost (idsite, thepost, callback) { //3/24/25 by DW" created="Mon, 24 Mar 2025 21:56:40 GMT">
						<outline text="if (options.flMarkdownProcess) {" created="Sat, 06 Apr 2024 20:34:38 GMT">
							<outline text="thepost.content = markdownProcess (thepost.content);" created="Sat, 06 Apr 2024 20:35:00 GMT"/>
							<outline text="}" created="Sat, 06 Apr 2024 20:34:46 GMT"/>
							</outline>
						<outline text="const jsontext = JSON.stringify (thepost);" created="Tue, 29 Aug 2023 16:54:12 GMT"/>
						<outline text="wpServerPost (&quot;wordpressaddpost&quot;, {idsite}, true, jsontext, callback);"/>
						<outline text="wpServerCall (&quot;wordpressaddpost&quot;, {idsite, jsontext}, true, callback);" isComment="true"/>
						<outline text="}" created="Mon, 24 Mar 2025 21:56:56 GMT"/>
						</outline>
					<outline text="function updatePost (idsite, idpost, thepost, callback) { //3/24/25 by DW" created="Mon, 24 Mar 2025 21:58:50 GMT">
						<outline text="if (options.flMarkdownProcess) {" created="Sat, 06 Apr 2024 20:34:38 GMT">
							<outline text="thepost.content = markdownProcess (thepost.content);" created="Sat, 06 Apr 2024 20:35:00 GMT"/>
							<outline text="}" created="Sat, 06 Apr 2024 20:34:46 GMT"/>
							</outline>
						<outline text="const jsontext = JSON.stringify (thepost);" created="Tue, 29 Aug 2023 16:54:12 GMT"/>
						<outline text="wpServerPost (&quot;wordpressupdatepost&quot;, {idsite, idpost}, true, jsontext, callback);"/>
						<outline text="wpServerCall (&quot;wordpressupdatepost&quot;, {idsite, idpost, jsontext}, true, callback);" isComment="true"/>
						<outline text="}" created="Mon, 24 Mar 2025 21:58:57 GMT"/>
						</outline>
					<outline text="" created="Thu, 28 Mar 2024 15:27:03 GMT"/>
					<outline text="function wsConnectUserToServer () { //5/24/24 by DW">
						<outline text="Changes" isComment="true" created="Sun, 04 May 2025 12:58:07 GMT">
							<outline text="5/4/25; 8:58:10 AM by DW" created="Sun, 04 May 2025 12:58:09 GMT">
								<outline text="When we startup do an initial checkConnection after 1/10th second. " created="Sun, 04 May 2025 12:58:10 GMT"/>
								<outline text="Then we check every 10 seconds." created="Sun, 04 May 2025 13:03:42 GMT"/>
								<outline text="I didn't like the lag at startup, having to wait 10 secs before we start the connection." created="Sun, 04 May 2025 13:04:05 GMT"/>
								<outline text="All the complexity is for when it doesn't work. What about when it does?" created="Sun, 04 May 2025 13:04:24 GMT"/>
								</outline>
							</outline>
						<outline text="var ctRetries = 0, idSocketChecker;" created="Thu, 01 May 2025 20:30:06 GMT"/>
						<outline text="const ctSecsBetwRetries = 10;" created="Thu, 01 May 2025 20:30:06 GMT"/>
						<outline text="const maxRetries = 100; " created="Thu, 01 May 2025 20:30:24 GMT"/>
						<outline text="const initialCheckTimeout = 100; //5/4/25 by DW" created="Sun, 04 May 2025 13:01:48 GMT"/>
						<outline text="" created="Thu, 01 May 2025 20:30:06 GMT"/>
						<outline text="var flGoodnightDialogShowing = false; " created="Sun, 12 Feb 2023 16:46:44 GMT"/>
						<outline text="if (options.flWebsocketEnabled) { //2/8/23 by DW" created="Wed, 08 Feb 2023 15:26:35 GMT">
							<outline text="var mySocket = undefined;" created="Wed, 29 Sep 2021 16:20:51 GMT"/>
							<outline text="function handleGoodnightMessage () {" created="Sat, 25 May 2024 14:08:35 GMT">
								<outline text="if (options.flWatchSocketForOtherCopies) { //12/20/21 by DW" created="Mon, 20 Dec 2021 16:33:07 GMT">
									<outline text="if (!flGoodnightDialogShowing) {" created="Sun, 12 Feb 2023 16:47:44 GMT">
										<outline text="flGoodnightDialogShowing = true;" created="Sun, 12 Feb 2023 16:48:02 GMT"/>
										<outline text="mySocket.close (1000, &quot;Received goodnight message.&quot;); //1000 is the code for normal closure"/>
										<outline text="alertDialog (options.goodnightDialogMsg, function () {" created="Mon, 20 Dec 2021 16:39:09 GMT">
											<outline text="location.reload (true);" created="Mon, 20 Dec 2021 16:47:54 GMT"/>
											<outline text="});" created="Mon, 20 Dec 2021 16:49:49 GMT"/>
											</outline>
										<outline text="}" created="Sun, 12 Feb 2023 16:47:49 GMT"/>
										</outline>
									<outline text="}" created="Mon, 20 Dec 2021 16:33:09 GMT"/>
									</outline>
								<outline text="}" created="Sat, 25 May 2024 14:08:50 GMT"/>
								</outline>
							<outline text="function checkConnection () {" created="Wed, 29 Sep 2021 16:20:34 GMT">
								<outline text="if ((mySocket === undefined) &amp;&amp; (!flGoodnightDialogShowing)) { //5/25/24 by  DW -- don't reopen socket after being told to go away">
									<outline text="mySocket = new WebSocket (options.urlChatLogSocket); "/>
									<outline text="mySocket.onopen = function (evt) {">
										<outline text="ctRetries = 0; //5/1/25 by DW -- we got through" created="Thu, 01 May 2025 20:33:07 GMT"/>
										<outline text="if (userIsSignedIn ()) { //2/8/23 by DW" created="Wed, 08 Feb 2023 17:35:04 GMT">
											<outline text="const msg = &quot;greetings &quot; + wordpressMemory.accessToken;" created="Sun, 19 May 2024 15:19:15 GMT"/>
											<outline text="console.log (&quot;wsConnectToServer: connection open, sending greetings to wpIdentity server.&quot;);"/>
											<outline text="mySocket.send (msg);"/>
											<outline text="}" created="Wed, 08 Feb 2023 17:36:19 GMT"/>
											</outline>
										<outline text="};"/>
										</outline>
									<outline text="mySocket.onmessage = function (evt) {">
										<outline text="if (evt.data !== undefined) { //no error">
											<outline text="console.log (&quot;wsConnectToServer: evt.data == &quot; + evt.data);"/>
											<outline text="switch (evt.data) {" created="Mon, 20 Dec 2021 16:38:54 GMT">
												<outline text="case &quot;goodnight&quot;:" created="Mon, 20 Dec 2021 16:38:59 GMT">
													<outline text="handleGoodnightMessage (); " created="Sat, 25 May 2024 14:08:34 GMT"/>
													<outline text="break;" created="Mon, 20 Dec 2021 16:39:04 GMT"/>
													</outline>
												<outline text="}" created="Mon, 20 Dec 2021 16:38:58 GMT"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="};"/>
										</outline>
									<outline text="mySocket.onclose = function (evt) {">
										<outline text="mySocket = undefined;"/>
										<outline text="if (ctRetries++ &gt;= maxRetries) { //5/1/25 by DW" created="Thu, 01 May 2025 20:36:57 GMT">
											<outline text="clearInterval (idSocketChecker);"/>
											<outline text="}" created="Thu, 01 May 2025 20:37:21 GMT"/>
											</outline>
										<outline text="};"/>
										</outline>
									<outline text="mySocket.onerror = function (evt) {">
										<outline text="console.log (&quot;wsConnectToServer: socket received an error.&quot;);" created="Wed, 31 Mar 2021 14:26:24 GMT"/>
										<outline text="};"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}" created="Wed, 29 Sep 2021 16:20:43 GMT"/>
								</outline>
							<outline text="setTimeout (function () { //5/4/25 by DW">
								<outline text="checkConnection ();" created="Thu, 01 May 2025 20:30:54 GMT"/>
								<outline text="idSocketChecker = setInterval (checkConnection, 1000 * ctSecsBetwRetries);" created="Wed, 29 Sep 2021 16:20:35 GMT"/>
								<outline text="console.log (&quot;wsConnectToServer: idSocketChecker == &quot; + idSocketChecker);"/>
								<outline text="}, initialCheckTimeout);"/>
								</outline>
							<outline text="}" created="Wed, 08 Feb 2023 15:26:39 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Sat, 06 Apr 2024 20:01:00 GMT"/>
					<outline text="this.getUserInfo = function (callback) {" created="Wed, 23 Mar 2022 14:28:05 GMT">
						<outline text="if (wordpressMemory.userinfo === undefined) { //3/9/25 by DW" created="Sun, 09 Mar 2025 16:49:41 GMT">
							<outline text="getUserInfo (function (err, theUserInfo) {" created="Sun, 09 Mar 2025 16:50:44 GMT">
								<outline text="if (err) {" created="Sun, 09 Mar 2025 16:51:20 GMT">
									<outline text="callback (err);" created="Sun, 09 Mar 2025 16:51:22 GMT"/>
									<outline text="}" created="Sun, 09 Mar 2025 16:51:25 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 09 Mar 2025 16:51:26 GMT">
									<outline text="wordpressMemory.userinfo = theUserInfo;" created="Sun, 09 Mar 2025 16:51:35 GMT"/>
									<outline text="saveWordpressMemory ();"/>
									<outline text="callback (undefined, theUserInfo);" created="Sun, 09 Mar 2025 16:51:41 GMT"/>
									<outline text="}" created="Sun, 09 Mar 2025 16:51:28 GMT"/>
									</outline>
								<outline text="})" created="Sun, 09 Mar 2025 16:51:14 GMT"/>
								</outline>
							<outline text="}" created="Sun, 09 Mar 2025 16:49:53 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 09 Mar 2025 16:49:54 GMT">
							<outline text="callback (undefined, wordpressMemory.userinfo);" created="Mon, 08 Apr 2024 16:16:19 GMT"/>
							<outline text="}" created="Sun, 09 Mar 2025 16:49:56 GMT"/>
							</outline>
						<outline text="}" created="Mon, 08 Apr 2024 16:16:13 GMT"/>
						</outline>
					<outline text="this.getUserInfoSync = function () { //10/26/24 by DW" created="Sat, 26 Oct 2024 14:06:38 GMT">
						<outline text="return (wordpressMemory.userinfo);" created="Sat, 26 Oct 2024 14:06:55 GMT"/>
						<outline text="}" created="Sat, 26 Oct 2024 14:06:47 GMT"/>
						</outline>
					<outline text="this.getUserSites = getUserSites;" created="Wed, 23 Mar 2022 14:28:05 GMT"/>
					<outline text="this.getSitePosts = function (idsite, callback) { //8/28/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressgetsiteposts&quot;, {idsite}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.getSiteUsers = function (idsite, callback) { //8/28/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressgetsiteusers&quot;, {idsite}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.getSiteInfo = function (idsite, callback) { //8/29/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="var flfound = false;" created="Mon, 29 Apr 2024 20:20:31 GMT"/>
						<outline text="wordpressMemory.sitelist.forEach (function (item) {" created="Mon, 29 Apr 2024 20:20:31 GMT">
							<outline text="if (item.idSite == idsite) {" created="Mon, 29 Apr 2024 20:21:00 GMT">
								<outline text="callback (undefined, item);" created="Mon, 29 Apr 2024 20:21:27 GMT"/>
								<outline text="flfound = true;" created="Mon, 29 Apr 2024 20:21:37 GMT"/>
								<outline text="}" created="Mon, 29 Apr 2024 20:21:08 GMT"/>
								</outline>
							<outline text="});" created="Mon, 29 Apr 2024 20:20:42 GMT"/>
							</outline>
						<outline text="if (!flfound) {" created="Mon, 29 Apr 2024 20:20:31 GMT">
							<outline text="wpServerCall (&quot;wordpressgetsiteinfo&quot;, {idsite}, true, callback);"/>
							<outline text="}" created="Mon, 29 Apr 2024 20:21:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.getSiteMedialist = function (idsite, callback) { //8/29/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressgetsitemedialist&quot;, {idsite}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.getSiteCategories = function (idsite, callback) { //10/19/24 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressgetsitecategories&quot;, {idsite}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="" created="Sat, 15 Mar 2025 15:34:17 GMT"/>
					<outline text="this.getPost = function (idsite, idpost, callback) { //8/28/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressgetpost&quot;, {idsite, idpost}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.addPost = function (idsite, thepost, callback) { //8/29/23 by DW" isComment="true" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="if (options.flMarkdownProcess) {" created="Sat, 06 Apr 2024 20:34:38 GMT">
							<outline text="thepost.content = markdownProcess (thepost.content);" created="Sat, 06 Apr 2024 20:35:00 GMT"/>
							<outline text="}" created="Sat, 06 Apr 2024 20:34:46 GMT"/>
							</outline>
						<outline text="const jsontext = JSON.stringify (thepost);" created="Tue, 29 Aug 2023 16:54:12 GMT"/>
						<outline text="wpServerCall (&quot;wordpressaddpost&quot;, {idsite, jsontext}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.updatePost = function (idsite, idpost, thepost, callback) { //8/29/23 by DW" isComment="true" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="if (options.flMarkdownProcess) {" created="Sat, 06 Apr 2024 20:34:38 GMT">
							<outline text="thepost.content = markdownProcess (thepost.content);" created="Sat, 06 Apr 2024 20:35:00 GMT"/>
							<outline text="}" created="Sat, 06 Apr 2024 20:34:46 GMT"/>
							</outline>
						<outline text="const jsontext = JSON.stringify (thepost);" created="Tue, 29 Aug 2023 16:54:12 GMT"/>
						<outline text="wpServerCall (&quot;wordpressupdatepost&quot;, {idsite, idpost, jsontext}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.deletePost = function (idsite, idpost, callback) { //9/4/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressdeletepost&quot;, {idsite, idpost}, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.getSubscriptions = function (callback) { //9/5/23 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT">
						<outline text="wpServerCall (&quot;wordpressgetsubscriptions&quot;, undefined, true, callback);"/>
						<outline text="}" created="Mon, 28 Aug 2023 22:53:28 GMT"/>
						</outline>
					<outline text="this.getRecentUserDrafts = function (idsite, callback) { //4/27/24 by DW" created="Sat, 27 Apr 2024 13:36:06 GMT">
						<outline text="var params = {" created="Sat, 27 Apr 2024 13:44:45 GMT">
							<outline text="maxdrafts: options.maxCtUserDraftFiles," created="Sat, 27 Apr 2024 13:44:57 GMT"/>
							<outline text="};" created="Sat, 27 Apr 2024 13:44:51 GMT"/>
							</outline>
						<outline text="if (idsite !== undefined) { //4/30/24 by DW" created="Tue, 30 Apr 2024 14:15:11 GMT">
							<outline text="params.idsite = idsite;" created="Tue, 30 Apr 2024 14:15:20 GMT"/>
							<outline text="}" created="Tue, 30 Apr 2024 14:15:17 GMT"/>
							</outline>
						<outline text="wpServerCall (&quot;wordpressgetrecentuserdrafts&quot;, params, true, function (err, theList) {">
							<outline text="if (err) {" created="Sat, 27 Apr 2024 14:26:55 GMT">
								<outline text="callback (err);" created="Sat, 27 Apr 2024 14:26:58 GMT"/>
								<outline text="}" created="Sat, 27 Apr 2024 14:27:02 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 27 Apr 2024 14:27:03 GMT">
								<outline text="var theList = JSON.parse (data);" isComment="true" created="Sat, 27 Apr 2024 14:27:06 GMT"/>
								<outline text="theList.forEach (function (item) {" created="Sat, 27 Apr 2024 14:27:43 GMT">
									<outline text="item.whenCreated = new Date (item.whenCreated);" created="Sat, 27 Apr 2024 14:27:55 GMT"/>
									<outline text="});" created="Sat, 27 Apr 2024 14:27:52 GMT"/>
									</outline>
								<outline text="callback (undefined, theList);" created="Sat, 27 Apr 2024 14:28:13 GMT"/>
								<outline text="}" created="Sat, 27 Apr 2024 14:27:05 GMT"/>
								</outline>
							<outline text="});" created="Sat, 27 Apr 2024 14:26:53 GMT"/>
							</outline>
						<outline text="}" created="Sat, 27 Apr 2024 13:36:32 GMT"/>
						</outline>
					<outline text="this.getUserFileInfo = function (callback) { //5/16/24 by DW" created="Sat, 27 Apr 2024 13:36:06 GMT">
						<outline text="var params = {" created="Sat, 27 Apr 2024 13:44:45 GMT">
							<outline text="maxfiles: options.maxCtUserDraftFiles," created="Sat, 27 Apr 2024 13:44:57 GMT"/>
							<outline text="};" created="Sat, 27 Apr 2024 13:44:51 GMT"/>
							</outline>
						<outline text="wpServerCall (&quot;wordpressgetuserfileinfo&quot;, params, true, function (err, theList) {">
							<outline text="if (err) {" created="Sat, 27 Apr 2024 14:26:55 GMT">
								<outline text="callback (err);" created="Sat, 27 Apr 2024 14:26:58 GMT"/>
								<outline text="}" created="Sat, 27 Apr 2024 14:27:02 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 27 Apr 2024 14:27:03 GMT">
								<outline text="callback (undefined, theList);" created="Sat, 27 Apr 2024 14:28:13 GMT"/>
								<outline text="}" created="Sat, 27 Apr 2024 14:27:05 GMT"/>
								</outline>
							<outline text="});" created="Sat, 27 Apr 2024 14:26:53 GMT"/>
							</outline>
						<outline text="}" created="Sat, 27 Apr 2024 13:36:32 GMT"/>
						</outline>
					<outline text="" created="Sun, 24 Mar 2024 16:09:11 GMT"/>
					<outline text="this.readUserDataFile = readUserDataFile;" created="Mon, 25 Mar 2024 14:11:16 GMT"/>
					<outline text="this.writeUserDataFile = writeUserDataFile;" created="Sun, 24 Mar 2024 16:09:12 GMT"/>
					<outline text="this.writeUniqueFile = writeUniqueFile; //5/12/24 by DW" created="Sun, 24 Mar 2024 16:09:12 GMT"/>
					<outline text="this.readDraft = readDraft;  //5/29/24 by DW" created="Wed, 29 May 2024 13:47:49 GMT"/>
					<outline text="this.deleteDraft = deleteDraft; //5/29/24 by DW" created="Wed, 29 May 2024 14:53:25 GMT"/>
					<outline text="this.getNextDraft = getNextDraft; //10/29/24 by DW" created="Thu, 17 Oct 2024 16:01:24 GMT"/>
					<outline text="this.getPrevDraft = getPrevDraft; //10/29/24 by DW" created="Thu, 17 Oct 2024 16:01:24 GMT"/>
					<outline text="this.getNextPrevArray = getNextPrevArray; //11/1/24 by DW" created="Fri, 01 Nov 2024 20:43:05 GMT"/>
					<outline text="this.getAllDraftsForUser = getAllDraftsForUser; //3/19/25 by DW" created="Wed, 19 Mar 2025 15:55:20 GMT"/>
					<outline text="this.uploadImageFile = uploadImageFile; //11/11/24 by DW" created="Sat, 27 Apr 2024 13:36:06 GMT"/>
					<outline text="this.servercall = wpServerCall; //3/11/25 by DW" created="Tue, 11 Mar 2025 22:22:22 GMT"/>
					<outline text="this.serverpost = wpServerPost; //3/11/25 by DW" created="Tue, 11 Mar 2025 22:22:22 GMT"/>
					<outline text="this.addCategory = addCategory; //3/15/25 by DW" created="Sat, 15 Mar 2025 15:37:03 GMT"/>
					<outline text="this.deleteCategory = deleteCategory; //3/15/25 by DW" created="Sat, 15 Mar 2025 15:37:03 GMT"/>
					<outline text="this.updateCategory = updateCategory; //5/11/25 by DW" created="Sat, 15 Mar 2025 15:37:03 GMT"/>
					<outline text="this.addPost = addPost; //3/24/25 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT"/>
					<outline text="this.updatePost = updatePost; //3/24/25 by DW" created="Mon, 28 Aug 2023 22:53:15 GMT"/>
					<outline text="" created="Wed, 10 Apr 2024 14:45:26 GMT"/>
					<outline text="this.readUserJsonFile = function (relpath, flPrivate, callback, options) { //4/10/24 by DW" created="Wed, 10 Apr 2024 14:45:27 GMT">
						<outline text="readUserDataFile (relpath, flPrivate, function (err, theFileData) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
							<outline text="if (err) {" created="Fri, 29 Mar 2024 13:41:43 GMT">
								<outline text="callback (err);" created="Fri, 29 Mar 2024 13:41:46 GMT"/>
								<outline text="}" created="Fri, 29 Mar 2024 13:41:56 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 21 Mar 2024 14:10:22 GMT">
								<outline text="var theJsonData = new Object (), flJsonError = false;" created="Fri, 29 Mar 2024 14:49:41 GMT"/>
								<outline text="try {" created="Fri, 29 Mar 2024 14:48:23 GMT">
									<outline text="theJsonData = JSON.parse (theFileData.filecontents);" created="Fri, 29 Mar 2024 14:47:44 GMT"/>
									<outline text="}" created="Fri, 29 Mar 2024 14:48:25 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Fri, 29 Mar 2024 14:48:25 GMT">
									<outline text="callback (err);" created="Wed, 10 Apr 2024 14:48:47 GMT"/>
									<outline text="flJsonError = true;" created="Fri, 29 Mar 2024 14:49:33 GMT"/>
									<outline text="}" created="Fri, 29 Mar 2024 14:48:29 GMT"/>
									</outline>
								<outline text="if (!flJsonError) {" created="Wed, 10 Apr 2024 14:49:09 GMT">
									<outline text="callback (undefined, theJsonData);" created="Wed, 10 Apr 2024 14:49:20 GMT"/>
									<outline text="}" created="Wed, 10 Apr 2024 14:49:15 GMT"/>
									</outline>
								<outline text="}" created="Thu, 21 Mar 2024 14:10:23 GMT"/>
								</outline>
							<outline text="}, options);" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
							</outline>
						<outline text="}" created="Wed, 10 Apr 2024 14:45:56 GMT"/>
						</outline>
					<outline text="this.deleteUserDataFile = function (relpath, flPrivate, callback) { //3/26/24 by DW" created="Mon, 25 Mar 2024 14:11:16 GMT">
						<outline text="console.log (&quot;deleteUserDataFile&quot;);" created="Sun, 24 Mar 2024 16:19:41 GMT"/>
						<outline text="const whenstart = new Date ();" created="Sun, 20 Aug 2023 18:32:23 GMT"/>
						<outline text="var params = {" created="Fri, 23 Dec 2022 20:01:02 GMT">
							<outline text="relpath" created="Fri, 23 Dec 2022 20:12:44 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:12:46 GMT"/>
							</outline>
						<outline text="if (flPrivate) {" created="Fri, 23 Dec 2022 20:03:13 GMT">
							<outline text="params.flprivate = true;" created="Fri, 23 Dec 2022 20:03:33 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:03:16 GMT"/>
							</outline>
						<outline text="wpServerCall (&quot;wordpressdeletefile&quot;, params, true, callback);"/>
						<outline text="}" created="Mon, 25 Mar 2024 14:11:29 GMT"/>
						</outline>
					<outline text="this.getSiteList = function () {" created="Sat, 06 Apr 2024 21:04:30 GMT">
						<outline text="return (wordpressMemory.sitelist);" created="Sat, 06 Apr 2024 21:04:42 GMT"/>
						<outline text="}" created="Sat, 06 Apr 2024 21:04:45 GMT"/>
						</outline>
					<outline text="this.markdownProcess = markdownProcess;" created="Sun, 07 Apr 2024 16:30:16 GMT"/>
					<outline text="this.isUserWhitelisted = function (callback) { //10/24/24 by DW" created="Thu, 24 Oct 2024 13:56:49 GMT">
						<outline text="wpServerCall (&quot;wordpressuseriswhitelisted&quot;, undefined, true, callback);"/>
						<outline text="}," created="Thu, 24 Oct 2024 13:57:09 GMT"/>
						</outline>
					<outline text="this.getAccessToken = function () { //12/24/24 by DW" created="Tue, 24 Dec 2024 16:09:50 GMT">
						<outline text="const theToken = base64UrlEncode (wordpressMemory.accessToken);" created="Tue, 24 Dec 2024 16:10:21 GMT"/>
						<outline text="return (theToken);" created="Tue, 24 Dec 2024 16:10:26 GMT"/>
						<outline text="}," created="Tue, 24 Dec 2024 16:10:10 GMT"/>
						</outline>
					<outline text="this.getTopUsers = function (callback) { //12/23/24 by DW" created="Thu, 24 Oct 2024 13:56:49 GMT">
						<outline text="wpServerCall (&quot;wordpressgettopusers&quot;, undefined, true, callback);"/>
						<outline text="}," created="Thu, 24 Oct 2024 13:57:09 GMT"/>
						</outline>
					<outline text="this.getNewPosts = function (callback) { //2/24/25 by DW" created="Thu, 24 Oct 2024 13:56:49 GMT">
						<outline text="wpServerCall (&quot;wordpressgettnewposts&quot;, undefined, true, callback);"/>
						<outline text="}," created="Thu, 24 Oct 2024 13:57:09 GMT"/>
						</outline>
					<outline text="this.countUserHit = function (callback) { //2/26/25 by DW" created="Thu, 24 Oct 2024 13:56:49 GMT">
						<outline text="wpServerCall (&quot;wordpresscounthit&quot;, undefined, true, callback);"/>
						<outline text="}," created="Thu, 24 Oct 2024 13:57:09 GMT"/>
						</outline>
					<outline text="this.getFeedUrl = getFeedUrl; //5/15/25 by DW" created="Thu, 15 May 2025 21:12:20 GMT"/>
					<outline text="" created="Sat, 06 Apr 2024 21:05:43 GMT"/>
					<outline text="//testing functions, mostly commented out -- 10/24/24 by DW" created="Thu, 24 Oct 2024 13:56:10 GMT">
						<outline text="" created="Mon, 24 Feb 2025 17:16:14 GMT"/>
						<outline text="this.testGetNewPosts = function () { //2/24/25 by DW" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="this.getNewPosts (function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="" created="Mon, 24 Feb 2025 17:16:14 GMT"/>
						<outline text="this.testPost = function  () { //5/9/24 by DW -- trying to figure out why POST ops don't return" isComment="true" created="Thu, 09 May 2024 13:22:50 GMT">
							<outline text="const jstruct = {" created="Thu, 09 May 2024 13:17:30 GMT">
								<outline text="instruction: &quot;Smile for the camera honey&quot;" created="Thu, 09 May 2024 13:17:41 GMT"/>
								<outline text="};" created="Thu, 09 May 2024 13:17:37 GMT"/>
								</outline>
							<outline text="const jsontext = jsonStringify (jstruct);" created="Thu, 09 May 2024 13:17:59 GMT"/>
							<outline text="wpServerPost (&quot;testpost&quot;, undefined, true, jsontext, function (err, data) {">
								<outline text="if (err) {" created="Thu, 09 May 2024 13:17:01 GMT">
									<outline text="console.log (err.message);" created="Thu, 09 May 2024 13:17:10 GMT"/>
									<outline text="}" created="Thu, 09 May 2024 13:17:04 GMT"/>
									</outline>
								<outline text="else {" created="Thu, 09 May 2024 13:17:04 GMT">
									<outline text="console.log (jsonStringify (data));" created="Thu, 09 May 2024 13:17:10 GMT"/>
									<outline text="}" created="Thu, 09 May 2024 13:17:06 GMT"/>
									</outline>
								<outline text="});" created="Thu, 09 May 2024 13:17:00 GMT"/>
								</outline>
							<outline text="}," created="Thu, 09 May 2024 13:14:39 GMT"/>
							</outline>
						<outline text="this.testWriteUserDataFile = function  () {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="function nowString () {" created="Fri, 24 Feb 2023 14:22:58 GMT">
								<outline text="return (new Date ().toLocaleTimeString ());" created="Fri, 24 Feb 2023 14:23:04 GMT"/>
								<outline text="}" created="Fri, 24 Feb 2023 14:23:04 GMT"/>
								</outline>
							<outline text="const slogan = getRandomSnarkySlogan (), whenstart = new Date ();" created="Tue, 26 Mar 2024 00:28:22 GMT"/>
							<outline text="writeUserDataFile (&quot;slogan.txt&quot;, slogan, &quot;text/plain&quot;, true, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (nowString () + &quot; - testWriteUserDataFile: err.message == &quot; + err.message);" created="Thu, 28 Mar 2024 16:19:36 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (nowString () + &quot; - testWriteUserDataFile: &quot; + secondsSince (whenstart) + &quot; secs. data == &quot; + jsonStringify (data));" created="Thu, 28 Mar 2024 16:19:36 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testWriteUserDataFileEveryMinute = function () {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="runEveryMinute (testWriteUserDataFile);" created="Thu, 28 Mar 2024 16:26:06 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testDeleteUserDataFile = function () {" isComment="true" created="Mon, 25 Mar 2024 14:11:16 GMT">
							<outline text="deleteUserDataFile (&quot;hello.json&quot;, true, function (err, data) {" created="Mon, 25 Mar 2024 14:17:12 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (data);" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Mon, 25 Mar 2024 14:17:30 GMT"/>
								</outline>
							<outline text="}" created="Tue, 26 Mar 2024 18:10:21 GMT"/>
							</outline>
						<outline text="this.testWriteUserDataFile = function () {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="runEveryMinute (function () {" created="Tue, 26 Mar 2024 00:26:52 GMT">
								<outline text="function nowString () {" created="Fri, 24 Feb 2023 14:22:58 GMT">
									<outline text="return (new Date ().toLocaleTimeString ());" created="Fri, 24 Feb 2023 14:23:04 GMT"/>
									<outline text="}" created="Fri, 24 Feb 2023 14:23:04 GMT"/>
									</outline>
								<outline text="const slogan = getRandomSnarkySlogan ();" created="Tue, 26 Mar 2024 00:28:22 GMT"/>
								<outline text="console.log (nowstring () + &quot;: &quot; + slogan);" created="Sun, 11 Feb 2024 21:20:56 GMT"/>
								<outline text="writeUserDataFile (&quot;slogan.txt&quot;, slogan, &quot;text/plain&quot;, true, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
									<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
										<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
										<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
										<outline text="console.log (data);" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
										<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
										</outline>
									<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
									</outline>
								<outline text="});" created="Tue, 26 Mar 2024 00:27:01 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testReadUserDataFile = function () {" isComment="true" created="Mon, 04 Sep 2023 13:25:44 GMT">
							<outline text="readUserDataFile (&quot;draft.json&quot;, true, function (err, data) {" created="Mon, 25 Mar 2024 14:17:12 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (data);" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Mon, 25 Mar 2024 14:17:30 GMT"/>
								</outline>
							<outline text="}" created="Mon, 25 Mar 2024 14:17:08 GMT"/>
							</outline>
						<outline text="this.testGetUserInfo = function () {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="console.log (&quot;testGetUserInfo&quot;);" created="Mon, 08 Apr 2024 15:52:09 GMT"/>
							<outline text="getUserInfo (function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetUserSites = function () {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getUserSites (function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetSitePosts = function (idsite) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getSitePosts (idsite, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetSiteUsers = function (idsite) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getSiteUsers (idsite, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetPost = function (idsite, idpost) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getPost (idsite, idpost, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetSiteInfo = function (idsite, idpost) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getSiteInfo (idsite, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetSiteMedialist = function (idsite, idpost) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getSiteMedialist (idsite, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testAddPost = function (idsite) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="function getRandomContent () {" created="Tue, 29 Aug 2023 16:51:28 GMT">
								<outline text="var theContent = &quot;&quot;;" created="Tue, 29 Aug 2023 16:52:43 GMT"/>
								<outline text="for (var i = 1; i &lt;= 10; i++) {" created="Tue, 29 Aug 2023 16:52:22 GMT">
									<outline text="theContent += getRandomSnarkySlogan () + &quot;\n&quot;;" created="Tue, 29 Aug 2023 16:52:54 GMT"/>
									<outline text="}" created="Tue, 29 Aug 2023 16:52:35 GMT"/>
									</outline>
								<outline text="return (theContent);" created="Tue, 29 Aug 2023 16:53:21 GMT"/>
								<outline text="}" created="Tue, 29 Aug 2023 16:51:42 GMT"/>
								</outline>
							<outline text="const thePost = {" created="Tue, 29 Aug 2023 16:48:40 GMT">
								<outline text="title: &quot;Some random snarky slogans&quot;," created="Tue, 29 Aug 2023 16:49:19 GMT"/>
								<outline text="content: getRandomContent ()," created="Tue, 29 Aug 2023 16:49:28 GMT"/>
								<outline text="status: &quot;publish&quot;," created="Tue, 29 Aug 2023 16:49:42 GMT"/>
								<outline text="date: new Date ().toGMTString ()," created="Tue, 29 Aug 2023 16:49:59 GMT"/>
								<outline text="format: &quot;standard&quot;," created="Tue, 29 Aug 2023 16:50:27 GMT"/>
								<outline text="categories: [&quot;Testing&quot;, &quot;Nonsense&quot;, &quot;Snark&quot;, &quot;Slogans&quot;]," created="Tue, 29 Aug 2023 16:50:37 GMT"/>
								<outline text="comment_status: &quot;open&quot;" created="Tue, 29 Aug 2023 16:51:09 GMT"/>
								<outline text="};" created="Tue, 29 Aug 2023 16:48:44 GMT"/>
								</outline>
							<outline text="addPost (idsite, thePost, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testUpdatePost = function (idsite, idpost) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="const thePost = {" created="Tue, 29 Aug 2023 16:48:40 GMT">
								<outline text="title: &quot;So you'd like a test post?&quot;," isComment="true" created="Tue, 29 Aug 2023 16:49:19 GMT"/>
								<outline text="content: getRandomContent ()," created="Tue, 29 Aug 2023 16:49:28 GMT"/>
								<outline text="status: &quot;publish&quot;," created="Tue, 29 Aug 2023 16:49:42 GMT"/>
								<outline text="date: new Date ().toGMTString ()," isComment="true" created="Tue, 29 Aug 2023 16:49:59 GMT"/>
								<outline text="format: &quot;standard&quot;," isComment="true" created="Tue, 29 Aug 2023 16:50:27 GMT"/>
								<outline text="categories: [&quot;Testing&quot;, &quot;Nonsense&quot;]," isComment="true" created="Tue, 29 Aug 2023 16:50:37 GMT"/>
								<outline text="comment_status: &quot;open&quot;" isComment="true" created="Tue, 29 Aug 2023 16:51:09 GMT"/>
								<outline text="};" created="Tue, 29 Aug 2023 16:48:44 GMT"/>
								</outline>
							<outline text="updatePost (idsite, idpost, thePost, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testDeletePost = function (idsite, idpost) {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="deletePost (idsite, idpost, function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						<outline text="this.testGetSubscriptions = function () {" isComment="true" created="Thu, 06 Oct 2022 17:45:27 GMT">
							<outline text="getSubscriptions (function (err, data) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
								<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
									<outline text="console.log (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
									<outline text="console.log (jsonStringify (data));" created="Fri, 23 Dec 2022 20:06:52 GMT"/>
									<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:04 GMT"/>
							</outline>
						</outline>
					<outline text="" created="Sat, 06 Apr 2024 20:07:43 GMT"/>
					<outline text="this.userIsSignedIn = userIsSignedIn;" created="Wed, 23 Aug 2023 12:35:03 GMT"/>
					<outline text="this.connectWithWordpress = function () {" created="Tue, 22 Aug 2023 22:07:54 GMT">
						<outline text="const url = getServerAddress () + &quot;connect?urlapphomepage=&quot; + encodeURIComponent (location.href); //9/4/23 by DW" created="Mon, 04 Sep 2023 20:35:03 GMT"/>
						<outline text="console.log (&quot;connectWithWordpress: url == &quot; + url);" created="Mon, 04 Sep 2023 20:35:36 GMT"/>
						<outline text="location.href = url;" created="Sat, 26 Aug 2023 16:44:18 GMT"/>
						<outline text="" isComment="true" created="Mon, 04 Sep 2023 20:35:03 GMT"/>
						<outline text="location.href = &quot;https://wpidentity.scripting.com/connect&quot;;" isComment="true" created="Tue, 22 Aug 2023 22:08:27 GMT"/>
						<outline text="location.href = &quot;http://localhost:1408/connect&quot;;" isComment="true" created="Tue, 22 Aug 2023 22:08:27 GMT"/>
						<outline text="}" created="Tue, 22 Aug 2023 22:07:57 GMT"/>
						</outline>
					<outline text="this.logOffWordpress = function () {" created="Wed, 23 Aug 2023 12:41:35 GMT">
						<outline text="delete localStorage.wordpressMemory;" created="Sat, 02 Sep 2023 16:40:25 GMT"/>
						<outline text="location.reload ();" created="Mon, 04 Sep 2023 15:11:31 GMT"/>
						<outline text="}" created="Wed, 23 Aug 2023 12:41:39 GMT"/>
						</outline>
					<outline text="this.startup = function (callback) {" created="Sun, 07 Apr 2024 14:39:08 GMT">
						<outline text="if (userIsSignedIn ()) {" created="Sun, 07 Apr 2024 14:16:59 GMT">
							<outline text="initSitelist (function (err) {" created="Mon, 08 Apr 2024 15:56:18 GMT">
								<outline text="initUserInfo (function (err) {" created="Mon, 08 Apr 2024 15:58:08 GMT">
									<outline text="wsConnectUserToServer (); //5/24/24 by DW" created="Fri, 24 May 2024 16:59:51 GMT"/>
									<outline text="callback ();" created="Mon, 08 Apr 2024 16:01:11 GMT"/>
									<outline text="});" created="Mon, 08 Apr 2024 15:58:18 GMT"/>
									</outline>
								<outline text="});" created="Mon, 08 Apr 2024 15:57:07 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 Apr 2024 14:17:12 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 07 Apr 2024 14:22:43 GMT">
							<outline text="callback (undefined);" created="Sun, 07 Apr 2024 14:22:45 GMT"/>
							<outline text="}" created="Sun, 07 Apr 2024 14:22:50 GMT"/>
							</outline>
						<outline text="}" created="Sun, 07 Apr 2024 14:39:15 GMT"/>
						</outline>
					<outline text="}" created="Sat, 06 Apr 2024 19:55:14 GMT"/>
					</outline>
				</outline>
			<outline text="client/styles.css" created="Wed, 23 Aug 2023 12:30:33 GMT">
				<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald:400,700');"/>
				<outline text="" created="Fri, 01 Sep 2023 21:24:01 GMT"/>
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 60%;"/>
					<outline text="margin-top: 90px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;" created="Fri, 11 Jun 2021 12:29:37 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text=" #idMenuProductName {" created="Sat, 02 Sep 2023 16:12:12 GMT">
					<outline text="font-family: Oswald;"/>
					<outline text="font-style: italic;"/>
					<outline text="font-size: 28px;"/>
					<outline text="}" created="Sat, 02 Sep 2023 16:12:14 GMT"/>
					</outline>
				<outline text="" created="Sat, 02 Sep 2023 16:33:57 GMT"/>
				<outline text=".divSignedOff {" created="Sat, 02 Sep 2023 16:33:32 GMT">
					<outline text="margin-top: 200px;" created="Mon, 28 Aug 2023 15:41:43 GMT"/>
					<outline text="line-height: 200%;" created="Sat, 02 Sep 2023 16:36:10 GMT"/>
					<outline text="text-align: center;" created="Sat, 02 Sep 2023 16:34:23 GMT"/>
					<outline text="}" created="Sat, 02 Sep 2023 16:33:40 GMT"/>
					</outline>
				<outline text=".divLogonButton {" created="Wed, 23 Aug 2023 12:38:42 GMT">
					<outline text="display: none;" created="Wed, 23 Aug 2023 12:38:55 GMT"/>
					<outline text="}" created="Wed, 23 Aug 2023 12:38:44 GMT"/>
					</outline>
				<outline text=".divLoggedInMessage {" created="Wed, 23 Aug 2023 12:38:42 GMT">
					<outline text="margin-top: 50px;" created="Mon, 28 Aug 2023 15:41:43 GMT"/>
					<outline text="border-top: 1px solid silver;" created="Mon, 28 Aug 2023 15:41:48 GMT"/>
					<outline text="font-size: 14px;" created="Mon, 28 Aug 2023 15:41:59 GMT"/>
					<outline text="padding-top: 10px;" created="Mon, 28 Aug 2023 15:42:24 GMT"/>
					<outline text="}" created="Wed, 23 Aug 2023 12:38:44 GMT"/>
					</outline>
				<outline text="" created="Mon, 28 Aug 2023 15:40:36 GMT"/>
				<outline text=".divSitelistContainer {" created="Sun, 03 Sep 2023 14:27:49 GMT">
					<outline text="min-height: 400px;" created="Sun, 03 Sep 2023 14:52:03 GMT"/>
					<outline text="}" created="Sun, 03 Sep 2023 14:27:58 GMT"/>
					</outline>
				<outline text=".divSitelist {" created="Mon, 28 Aug 2023 15:40:37 GMT">
					<outline text="font-size: 15px;" created="Mon, 28 Aug 2023 15:40:40 GMT"/>
					<outline text="width: 300px;" created="Sun, 03 Sep 2023 14:26:47 GMT"/>
					<outline text="margin-left: auto;" created="Sun, 03 Sep 2023 14:28:29 GMT"/>
					<outline text="margin-right: auto;" created="Sun, 03 Sep 2023 14:28:34 GMT"/>
					<outline text="border: 1px solid silver;" created="Sun, 03 Sep 2023 14:28:39 GMT"/>
					<outline text="background-color: white;" created="Sun, 03 Sep 2023 14:28:49 GMT"/>
					<outline text="padding: 3px;" created="Sun, 03 Sep 2023 14:29:08 GMT"/>
					<outline text="}" created="Mon, 28 Aug 2023 15:40:39 GMT"/>
					</outline>
				<outline text=".divSitelist td {" created="Mon, 28 Aug 2023 15:40:37 GMT">
					<outline text="min-width: 100px;" created="Sun, 03 Sep 2023 14:26:47 GMT"/>
					<outline text="}" created="Mon, 28 Aug 2023 15:40:39 GMT"/>
					</outline>
				<outline text=".spSitename {" created="Mon, 28 Aug 2023 16:16:20 GMT">
					<outline text="cursor: pointer;" created="Mon, 28 Aug 2023 16:16:22 GMT"/>
					<outline text="margin-right: 1em;" created="Mon, 28 Aug 2023 16:34:55 GMT"/>
					<outline text="}" created="Mon, 28 Aug 2023 16:16:27 GMT"/>
					</outline>
				<outline text=".spSitedate {" created="Mon, 28 Aug 2023 16:36:08 GMT">
					<outline text="margin-right: 1em;" created="Mon, 28 Aug 2023 16:34:55 GMT"/>
					<outline text="}" created="Mon, 28 Aug 2023 16:36:10 GMT"/>
					</outline>
				</outline>
			<outline text="client/code.js" created="Wed, 23 Aug 2023 12:21:15 GMT">
				<outline text="const flUseLocalServer = false;" created="Sat, 26 Aug 2023 22:13:03 GMT"/>
				<outline text="" created="Tue, 29 Aug 2023 17:40:05 GMT"/>
				<outline text="const myServerAddress = (flUseLocalServer) ? &quot;http://localhost:1408/&quot; : &quot;https://wpidentity.scripting.com/&quot;;" isComment="true" created="Fri, 12 Apr 2024 16:13:13 GMT"/>
				<outline text="" isComment="true" created="Fri, 12 Apr 2024 15:42:47 GMT"/>
				<outline text="var myWordpress;" created="Thu, 11 Apr 2024 15:45:19 GMT"/>
				<outline text="" created="Fri, 12 Apr 2024 15:43:54 GMT"/>
				<outline text="var appPrefs = {" created="Fri, 12 Apr 2024 15:43:54 GMT">
					<outline text="ctMinutesRunning: 0," created="Fri, 12 Apr 2024 15:44:11 GMT"/>
					<outline text="whenLastMinute: new Date (0), " created="Fri, 12 Apr 2024 15:44:28 GMT"/>
					<outline text="localTime: &quot;&quot;," created="Sat, 13 Apr 2024 16:54:08 GMT"/>
					<outline text="currentSlogan: &quot;&quot;" created="Fri, 12 Apr 2024 16:02:19 GMT"/>
					<outline text="};" created="Fri, 12 Apr 2024 15:43:58 GMT"/>
					</outline>
				<outline text="const fnamePrefs = &quot;demo/prefs.json&quot;;" created="Fri, 12 Apr 2024 15:47:56 GMT"/>
				<outline text="var flPrefsChanged = false;" created="Fri, 12 Apr 2024 15:42:48 GMT"/>
				<outline text="" created="Mon, 23 Dec 2024 17:12:03 GMT"/>
				<outline text="function logOffWordpress () {" created="Wed, 23 Aug 2023 12:41:35 GMT">
					<outline text="confirmDialog (&quot;Log off WordPress.com?&quot;, function () {" created="Sat, 02 Sep 2023 16:24:18 GMT">
						<outline text="myWordpress.logOffWordpress ();" created="Sun, 07 Apr 2024 14:08:59 GMT"/>
						<outline text="});" created="Sat, 02 Sep 2023 16:24:35 GMT"/>
						</outline>
					<outline text="}" created="Wed, 23 Aug 2023 12:41:39 GMT"/>
					</outline>
				<outline text="" created="Thu, 31 Aug 2023 12:57:42 GMT"/>
				<outline text="function addToolTip (theObject, tipText, placement=&quot;right&quot;) { //8/24/22 by DW" created="Wed, 24 Aug 2022 12:58:59 GMT">
					<outline text="Changes" isComment="true" created="Sun, 23 Oct 2022 16:41:23 GMT">
						<outline text="11/1/22; 9:55:02 AM by DW" created="Tue, 01 Nov 2022 13:55:01 GMT">
							<outline text="In some circumstances, when you click on an item with a tooltip, the tooltip lingers around after the click. I added code that looks for the click and hides the tooltip." created="Tue, 01 Nov 2022 13:55:02 GMT"/>
							</outline>
						<outline text="10/23/22; 12:41:25 PM by DW" created="Sun, 23 Oct 2022 16:41:24 GMT">
							<outline text="Some tooltips I link to menu items are cut off at the boundary of something related to menus. The recommended way to deal with it is to add a data-container value of body." created="Sun, 23 Oct 2022 16:41:26 GMT">
								<outline text="https://getbootstrap.com/docs/4.0/components/popovers/#example-using-the-container-option"/>
								</outline>
							</outline>
						</outline>
					<outline text="$(theObject).attr (&quot;data-container&quot;, &quot;body&quot;); //10/23/22 by DW" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).attr (&quot;data-toggle&quot;, &quot;tooltip&quot;);" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).attr (&quot;data-placement&quot;, placement);" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).attr (&quot;title&quot;, tipText);" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).click (function () { //11/1/22 by DW" created="Sat, 07 May 2022 15:24:22 GMT">
						<outline text="$(theObject).tooltip (&quot;hide&quot;);"/>
						<outline text="});" created="Tue, 01 Nov 2022 13:52:12 GMT"/>
						</outline>
					<outline text="return (theObject);" created="Wed, 24 Aug 2022 13:14:21 GMT"/>
					<outline text="}" created="Wed, 24 Aug 2022 12:59:36 GMT"/>
					</outline>
				<outline text="function activateToolTips () { //8/28/22 by DW" created="Sun, 28 Aug 2022 17:36:16 GMT">
					<outline text="$(&quot;[data-toggle=\&quot;tooltip\&quot;]&quot;).tooltip ();"/>
					<outline text="}" created="Sun, 28 Aug 2022 17:36:20 GMT"/>
					</outline>
				<outline text="function getFeedlandTimeString (when, flLongStrings=false) {" created="Fri, 08 Jul 2022 15:26:21 GMT">
					<outline text="const options = {" created="Fri, 17 Mar 2023 15:10:46 GMT">
						<outline text="flBriefYearDates: true," created="Fri, 17 Mar 2023 14:28:31 GMT"/>
						<outline text="nowString: &quot;now&quot;" created="Fri, 17 Mar 2023 14:28:52 GMT"/>
						<outline text="};" created="Fri, 17 Mar 2023 15:10:51 GMT"/>
						</outline>
					<outline text="var s = getFacebookTimeString (when, flLongStrings, options);" created="Fri, 08 Jul 2022 15:26:35 GMT"/>
					<outline text="s = replaceAll (s, &quot;Just now&quot;, &quot;now&quot;);" isComment="true" created="Fri, 08 Jul 2022 15:26:38 GMT"/>
					<outline text="return (s);" created="Fri, 08 Jul 2022 15:27:05 GMT"/>
					<outline text="}" created="Fri, 08 Jul 2022 15:26:28 GMT"/>
					</outline>
				<outline text="function userInteracted () { //5/17/21 by DW" created="Mon, 17 May 2021 14:01:12 GMT">
					<outline text="console.log (&quot;userInteracted&quot;);" isComment="true" created="Mon, 17 May 2021 14:15:39 GMT"/>
					<outline text="whenLastUserAction = new Date ();" isComment="true" created="Mon, 17 May 2021 14:01:35 GMT"/>
					<outline text="}" created="Mon, 17 May 2021 14:01:22 GMT"/>
					</outline>
				<outline text="function decodeHtmlEntities (htmltext) {" isComment="true">
					<outline text="var textarea = document.createElement (&quot;textarea&quot;);"/>
					<outline text="textarea.innerHTML = htmltext;"/>
					<outline text="return (textarea.value);"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Fri, 12 Apr 2024 15:41:30 GMT"/>
				<outline text="function prefsChanged () {" created="Fri, 29 Mar 2024 13:37:39 GMT">
					<outline text="flPrefsChanged = true;" created="Fri, 29 Mar 2024 13:37:45 GMT"/>
					<outline text="}" created="Fri, 29 Mar 2024 13:37:48 GMT"/>
					</outline>
				<outline text="function readPrefs (callback) {" created="Fri, 29 Mar 2024 13:40:08 GMT">
					<outline text="const whenstart = new Date ();" created="Thu, 28 Mar 2024 14:41:12 GMT"/>
					<outline text="myWordpress.readUserDataFile (fnamePrefs, true, function (err, theSavedPrefs) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
						<outline text="if (err) {" created="Fri, 29 Mar 2024 13:41:43 GMT">
							<outline text="console.log (&quot;readPrefs: err.message == &quot; + err.message);" isComment="true" created="Fri, 29 Mar 2024 13:41:46 GMT"/>
							<outline text="}" created="Fri, 29 Mar 2024 13:41:56 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 21 Mar 2024 14:10:22 GMT">
							<outline text="var thePrefs = new Object (), flJsonError = false;" created="Fri, 29 Mar 2024 14:49:41 GMT"/>
							<outline text="try {" created="Fri, 29 Mar 2024 14:48:23 GMT">
								<outline text="thePrefs = JSON.parse (theSavedPrefs.filecontents);" created="Fri, 29 Mar 2024 14:47:44 GMT"/>
								<outline text="}" created="Fri, 29 Mar 2024 14:48:25 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Fri, 29 Mar 2024 14:48:25 GMT">
								<outline text="console.log (&quot;readPrefs: err.message == &quot; + err.message);" created="Fri, 29 Mar 2024 14:48:40 GMT"/>
								<outline text="flJsonError = true;" created="Fri, 29 Mar 2024 14:49:33 GMT"/>
								<outline text="}" created="Fri, 29 Mar 2024 14:48:29 GMT"/>
								</outline>
							<outline text="if (!flJsonError) {" created="Fri, 29 Mar 2024 14:47:45 GMT">
								<outline text="for (var x in thePrefs) {" created="Fri, 29 Mar 2024 13:42:32 GMT">
									<outline text="appPrefs [x] = thePrefs [x];" created="Fri, 29 Mar 2024 13:42:38 GMT"/>
									<outline text="}" created="Fri, 29 Mar 2024 13:42:36 GMT"/>
									</outline>
								<outline text="}" created="Fri, 29 Mar 2024 14:49:52 GMT"/>
								</outline>
							<outline text="cleanAppPrefs ();" isComment="true"/>
							<outline text="console.log (&quot;readPrefs: &quot; + secondsSince (whenstart) + &quot; secs&quot;);" created="Thu, 28 Mar 2024 14:39:01 GMT"/>
							<outline text="}" created="Thu, 21 Mar 2024 14:10:23 GMT"/>
							</outline>
						<outline text="if (callback !== undefined) {" created="Fri, 29 Mar 2024 13:46:31 GMT">
							<outline text="callback (err, theSavedPrefs);" created="Fri, 29 Mar 2024 13:46:37 GMT"/>
							<outline text="}" created="Fri, 29 Mar 2024 13:46:40 GMT"/>
							</outline>
						<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
						</outline>
					<outline text="}" created="Fri, 29 Mar 2024 13:40:19 GMT"/>
					</outline>
				<outline text="function savePrefs (callback) {" created="Fri, 29 Mar 2024 13:38:27 GMT">
					<outline text="const jsontext = jsonStringify (appPrefs), whenstart = new Date ();" created="Thu, 28 Mar 2024 14:41:12 GMT"/>
					<outline text="myWordpress.writeUniqueFile (fnamePrefs, jsontext, &quot;application/json&quot;, true, function (err, data) {" created="Sun, 12 May 2024 13:27:49 GMT">
						<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
							<outline text="console.log (&quot;savePrefs: err.message == &quot; +  err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
							<outline text="console.log (&quot;savePrefs: &quot; + secondsSince (whenstart) + &quot; secs&quot;);" created="Thu, 28 Mar 2024 14:39:01 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
							</outline>
						<outline text="if (callback !== undefined) {" created="Fri, 29 Mar 2024 13:40:27 GMT">
							<outline text="callback (err, data);" created="Fri, 29 Mar 2024 13:40:34 GMT"/>
							<outline text="}" created="Fri, 29 Mar 2024 13:40:38 GMT"/>
							</outline>
						<outline text="});" created="Sun, 12 May 2024 13:27:52 GMT"/>
						</outline>
					<outline text="myWordpress.writeUserDataFile (fnamePrefs, jsontext, &quot;application/json&quot;, true, function (err, data) {" isComment="true" created="Fri, 23 Dec 2022 20:06:07 GMT">
						<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
							<outline text="console.log (&quot;savePrefs: err.message == &quot; +  err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
							<outline text="console.log (&quot;savePrefs: &quot; + secondsSince (whenstart) + &quot; secs&quot;);" isComment="true" created="Thu, 28 Mar 2024 14:39:01 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
							</outline>
						<outline text="if (callback !== undefined) {" created="Fri, 29 Mar 2024 13:40:27 GMT">
							<outline text="callback (err, data);" created="Fri, 29 Mar 2024 13:40:34 GMT"/>
							<outline text="}" created="Fri, 29 Mar 2024 13:40:38 GMT"/>
							</outline>
						<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
						</outline>
					<outline text="}" created="Fri, 29 Mar 2024 13:38:32 GMT"/>
					</outline>
				<outline text="" created="Mon, 28 Aug 2023 15:03:10 GMT"/>
				<outline text="function sortSiteList (theSites, sortBy=&quot;name&quot;, flReverseSort=false) {" created="Mon, 04 Jul 2022 16:47:46 GMT">
					<outline text="theSites.sort (function (a, b) {">
						<outline text="cribsheet" isComment="true">
							<outline text="if a &gt; b return 1"/>
							<outline text="if a &lt; b return -1"/>
							</outline>
						<outline text="switch (sortBy) {" created="Mon, 04 Jul 2022 16:32:05 GMT">
							<outline text="case &quot;name&quot;:" created="Mon, 04 Jul 2022 16:32:21 GMT">
								<outline text="var alower = a.name.toLowerCase (), val;"/>
								<outline text="var blower = b.name.toLowerCase ();"/>
								<outline text="if (flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:22:55 GMT">
									<outline text="let tmp = alower;" created="Mon, 11 Jul 2022 13:23:16 GMT"/>
									<outline text="alower = blower;" created="Mon, 11 Jul 2022 13:23:19 GMT"/>
									<outline text="blower = tmp;" created="Mon, 11 Jul 2022 13:23:23 GMT"/>
									<outline text="}" created="Mon, 11 Jul 2022 13:23:08 GMT"/>
									</outline>
								<outline text="if (alower.length == 0) {">
									<outline text="return (1);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (blower.length == 0) {">
									<outline text="return (-1);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (alower == blower) {">
									<outline text="val = 0;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (blower &gt; alower) {">
										<outline text="val = -1;"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="val = 1;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="return (val);"/>
								</outline>
							<outline text="case &quot;whenUpdated&quot;:" isComment="true" created="Mon, 04 Jul 2022 16:32:32 GMT">
								<outline text="var adate = getDateForSorting (a.whenUpdated), bdate = getDateForSorting (b.whenUpdated);"/>
								<outline text="if (flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:22:55 GMT">
									<outline text="let tmp = adate;" created="Mon, 11 Jul 2022 13:23:16 GMT"/>
									<outline text="adate = bdate;" created="Mon, 11 Jul 2022 13:23:19 GMT"/>
									<outline text="bdate = tmp;" created="Mon, 11 Jul 2022 13:23:23 GMT"/>
									<outline text="}" created="Mon, 11 Jul 2022 13:23:08 GMT"/>
									</outline>
								<outline text="return (bdate - adate);"/>
								</outline>
							<outline text="case &quot;ctSubs&quot;:" isComment="true" created="Mon, 04 Jul 2022 16:32:48 GMT">
								<outline text="const acount = getCountForSorting (a.ctSubs), bcount = getCountForSorting (b.ctSubs);" created="Sat, 03 Jun 2023 14:26:15 GMT"/>
								<outline text="if (flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:24:36 GMT">
									<outline text="return (acount - bcount);"/>
									<outline text="}" created="Mon, 11 Jul 2022 13:24:40 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 11 Jul 2022 13:24:45 GMT">
									<outline text="return (bcount - acount);"/>
									<outline text="}" created="Mon, 11 Jul 2022 13:24:47 GMT"/>
									</outline>
								</outline>
							<outline text="}" created="Mon, 04 Jul 2022 16:32:19 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 04 Jul 2022 16:47:54 GMT"/>
					</outline>
				<outline text="function viewSitelist (whereToAppend) {" created="Mon, 28 Aug 2023 15:03:11 GMT">
					<outline text="console.log (&quot;viewSitelist&quot;);" created="Mon, 28 Aug 2023 16:05:53 GMT"/>
					<outline text="var options = {" created="Mon, 28 Aug 2023 16:00:23 GMT">
						<outline text="sortBy: &quot;name&quot;," created="Mon, 28 Aug 2023 16:00:29 GMT"/>
						<outline text="flReverseSort: false" created="Mon, 28 Aug 2023 16:01:37 GMT"/>
						<outline text="}" created="Mon, 28 Aug 2023 16:00:36 GMT"/>
						</outline>
					<outline text="function getRow (item) {" created="Mon, 28 Aug 2023 16:08:30 GMT">
						<outline text="console.log (&quot;getRow: item == &quot; + jsonStringify (item));" isComment="true" created="Mon, 28 Aug 2023 16:25:27 GMT"/>
						<outline text="const theRow = $(&quot;&lt;tr&gt;&lt;/tr&gt;&quot;);" created="Mon, 28 Aug 2023 15:24:08 GMT"/>
						<outline text="function getSiteName () {" created="Mon, 28 Aug 2023 16:09:32 GMT">
							<outline text="const theCell = $(&quot;&lt;td&gt;&lt;/td&gt;&quot;);" created="Mon, 28 Aug 2023 16:09:56 GMT"/>
							<outline text="const shortenedname = maxStringLength (item.name, 25, true, true);" created="Mon, 28 Aug 2023 16:33:39 GMT"/>
							<outline text="const theName = $(&quot;&lt;span class=\&quot;spSitename\&quot;&gt;&quot; + shortenedname + &quot;&lt;/span&gt;&quot;);" created="Mon, 28 Aug 2023 16:10:30 GMT"/>
							<outline text="addToolTip (theName, item.description);" created="Mon, 28 Aug 2023 16:11:29 GMT"/>
							<outline text="theCell.append (theName);" created="Mon, 28 Aug 2023 16:11:55 GMT"/>
							<outline text="return (theCell);" created="Mon, 28 Aug 2023 16:10:15 GMT"/>
							<outline text="}" created="Mon, 28 Aug 2023 16:09:48 GMT"/>
							</outline>
						<outline text="function getDateValue (when, meaning) {" created="Mon, 28 Aug 2023 16:09:32 GMT">
							<outline text="const theCell = $(&quot;&lt;td&gt;&lt;/td&gt;&quot;);" created="Mon, 28 Aug 2023 16:09:56 GMT"/>
							<outline text="const whenstring = getFeedlandTimeString (when);" created="Mon, 28 Aug 2023 16:28:37 GMT"/>
							<outline text="const whenstring = new Date (when).toLocaleString ();" isComment="true" created="Mon, 28 Aug 2023 16:28:37 GMT"/>
							<outline text="const theDate = $(&quot;&lt;span class=\&quot;spSitedate\&quot;&gt;&quot; + whenstring + &quot;&lt;/span&gt;&quot;);" created="Mon, 28 Aug 2023 16:10:30 GMT"/>
							<outline text="addToolTip (theDate, &quot;When the site was &quot; + meaning + &quot;.&quot;);" created="Mon, 28 Aug 2023 16:11:29 GMT"/>
							<outline text="theCell.append (theDate);" created="Mon, 28 Aug 2023 16:11:55 GMT"/>
							<outline text="return (theCell);" created="Mon, 28 Aug 2023 16:10:15 GMT"/>
							<outline text="}" created="Mon, 28 Aug 2023 16:09:48 GMT"/>
							</outline>
						<outline text="theRow.append (getSiteName ());" created="Mon, 28 Aug 2023 15:24:29 GMT"/>
						<outline text="theRow.append (getDateValue (item.whenCreated, &quot;created&quot;));" created="Mon, 28 Aug 2023 15:24:29 GMT"/>
						<outline text="theRow.append (getDateValue (item.options.updated_at, &quot;last updated&quot;));" isComment="true" created="Mon, 28 Aug 2023 15:24:29 GMT"/>
						<outline text="return (theRow);" created="Mon, 28 Aug 2023 16:14:07 GMT"/>
						<outline text="}" created="Mon, 28 Aug 2023 16:08:56 GMT"/>
						</outline>
					<outline text="if (whereToAppend === undefined) {" created="Mon, 28 Aug 2023 15:28:53 GMT">
						<outline text="whereToAppend = $(&quot;.divSitelistContainer&quot;);" created="Mon, 28 Aug 2023 15:28:59 GMT"/>
						<outline text="}" created="Mon, 28 Aug 2023 15:29:37 GMT"/>
						</outline>
					<outline text="" created="Thu, 11 Apr 2024 16:14:43 GMT"/>
					<outline text="const theList = myWordpress.getSiteList ();" isComment="true" created="Thu, 11 Apr 2024 16:14:43 GMT"/>
					<outline text="" created="Mon, 23 Dec 2024 17:20:28 GMT"/>
					<outline text="myWordpress.getUserSites (function (err, theList) {" created="Mon, 28 Aug 2023 15:34:09 GMT">
						<outline text="if (err) {" created="Mon, 23 Dec 2024 17:20:42 GMT">
							<outline text="alertDialog (err.message);" created="Mon, 23 Dec 2024 17:20:45 GMT"/>
							<outline text="}" created="Mon, 23 Dec 2024 17:20:53 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 23 Dec 2024 17:20:54 GMT">
							<outline text="function sortTheList () {" created="Mon, 04 Jul 2022 16:47:46 GMT">
								<outline text="theList.sites.sort (function (a, b) {">
									<outline text="cribsheet" isComment="true">
										<outline text="if a &gt; b return 1"/>
										<outline text="if a &lt; b return -1"/>
										</outline>
									<outline text="switch (options.sortBy) {" created="Mon, 04 Jul 2022 16:32:05 GMT">
										<outline text="case &quot;name&quot;:" created="Mon, 04 Jul 2022 16:32:21 GMT">
											<outline text="var alower = a.name.toLowerCase (), val;"/>
											<outline text="var blower = b.name.toLowerCase ();"/>
											<outline text="if (options.flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:22:55 GMT">
												<outline text="let tmp = alower;" created="Mon, 11 Jul 2022 13:23:16 GMT"/>
												<outline text="alower = blower;" created="Mon, 11 Jul 2022 13:23:19 GMT"/>
												<outline text="blower = tmp;" created="Mon, 11 Jul 2022 13:23:23 GMT"/>
												<outline text="}" created="Mon, 11 Jul 2022 13:23:08 GMT"/>
												</outline>
											<outline text="if (alower.length == 0) {">
												<outline text="return (1);"/>
												<outline text="}"/>
												</outline>
											<outline text="if (blower.length == 0) {">
												<outline text="return (-1);"/>
												<outline text="}"/>
												</outline>
											<outline text="if (alower == blower) {">
												<outline text="val = 0;"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="if (blower &gt; alower) {">
													<outline text="val = -1;"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="val = 1;"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="return (val);"/>
											</outline>
										<outline text="case &quot;whenUpdated&quot;:" isComment="true" created="Mon, 04 Jul 2022 16:32:32 GMT">
											<outline text="var adate = getDateForSorting (a.whenUpdated), bdate = getDateForSorting (b.whenUpdated);"/>
											<outline text="if (options.flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:22:55 GMT">
												<outline text="let tmp = adate;" created="Mon, 11 Jul 2022 13:23:16 GMT"/>
												<outline text="adate = bdate;" created="Mon, 11 Jul 2022 13:23:19 GMT"/>
												<outline text="bdate = tmp;" created="Mon, 11 Jul 2022 13:23:23 GMT"/>
												<outline text="}" created="Mon, 11 Jul 2022 13:23:08 GMT"/>
												</outline>
											<outline text="return (bdate - adate);"/>
											</outline>
										<outline text="case &quot;ctSubs&quot;:" isComment="true" created="Mon, 04 Jul 2022 16:32:48 GMT">
											<outline text="const acount = getCountForSorting (a.ctSubs), bcount = getCountForSorting (b.ctSubs);" created="Sat, 03 Jun 2023 14:26:15 GMT"/>
											<outline text="if (options.flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:24:36 GMT">
												<outline text="return (acount - bcount);"/>
												<outline text="}" created="Mon, 11 Jul 2022 13:24:40 GMT"/>
												</outline>
											<outline text="else {" created="Mon, 11 Jul 2022 13:24:45 GMT">
												<outline text="return (bcount - acount);"/>
												<outline text="}" created="Mon, 11 Jul 2022 13:24:47 GMT"/>
												</outline>
											</outline>
										<outline text="}" created="Mon, 04 Jul 2022 16:32:19 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Mon, 04 Jul 2022 16:47:54 GMT"/>
								</outline>
							<outline text="const divSitelist = $(&quot;&lt;div class=\&quot;divSitelist\&quot;&gt;&lt;/div&gt;&quot;);" created="Fri, 20 May 2022 14:38:24 GMT"/>
							<outline text="sortSiteList (theList, options.sortBy, options.flReverseSort);" created="Mon, 28 Aug 2023 16:02:11 GMT"/>
							<outline text="theList.forEach (function (item) {" created="Mon, 28 Aug 2023 15:05:25 GMT">
								<outline text="divSitelist.append (getRow (item));" created="Mon, 28 Aug 2023 15:28:35 GMT"/>
								<outline text="});" created="Mon, 28 Aug 2023 15:23:55 GMT"/>
								</outline>
							<outline text="whereToAppend.append (divSitelist);" created="Mon, 28 Aug 2023 15:27:40 GMT"/>
							<outline text="activateToolTips ();"/>
							<outline text="}" created="Mon, 23 Dec 2024 17:20:56 GMT"/>
							</outline>
						<outline text="});" created="Mon, 28 Aug 2023 15:34:36 GMT"/>
						</outline>
					<outline text="" created="Thu, 11 Apr 2024 16:14:43 GMT"/>
					<outline text="" created="Thu, 11 Apr 2024 16:14:44 GMT"/>
					<outline text="myWordpress.getSiteList (function (err, theList) {" isComment="true" created="Mon, 28 Aug 2023 15:04:53 GMT">
						<outline text="function sortTheList () {" created="Mon, 04 Jul 2022 16:47:46 GMT">
							<outline text="theList.sites.sort (function (a, b) {">
								<outline text="cribsheet" isComment="true">
									<outline text="if a &gt; b return 1"/>
									<outline text="if a &lt; b return -1"/>
									</outline>
								<outline text="switch (options.sortBy) {" created="Mon, 04 Jul 2022 16:32:05 GMT">
									<outline text="case &quot;name&quot;:" created="Mon, 04 Jul 2022 16:32:21 GMT">
										<outline text="var alower = a.name.toLowerCase (), val;"/>
										<outline text="var blower = b.name.toLowerCase ();"/>
										<outline text="if (options.flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:22:55 GMT">
											<outline text="let tmp = alower;" created="Mon, 11 Jul 2022 13:23:16 GMT"/>
											<outline text="alower = blower;" created="Mon, 11 Jul 2022 13:23:19 GMT"/>
											<outline text="blower = tmp;" created="Mon, 11 Jul 2022 13:23:23 GMT"/>
											<outline text="}" created="Mon, 11 Jul 2022 13:23:08 GMT"/>
											</outline>
										<outline text="if (alower.length == 0) {">
											<outline text="return (1);"/>
											<outline text="}"/>
											</outline>
										<outline text="if (blower.length == 0) {">
											<outline text="return (-1);"/>
											<outline text="}"/>
											</outline>
										<outline text="if (alower == blower) {">
											<outline text="val = 0;"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="if (blower &gt; alower) {">
												<outline text="val = -1;"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="val = 1;"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="return (val);"/>
										</outline>
									<outline text="case &quot;whenUpdated&quot;:" isComment="true" created="Mon, 04 Jul 2022 16:32:32 GMT">
										<outline text="var adate = getDateForSorting (a.whenUpdated), bdate = getDateForSorting (b.whenUpdated);"/>
										<outline text="if (options.flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:22:55 GMT">
											<outline text="let tmp = adate;" created="Mon, 11 Jul 2022 13:23:16 GMT"/>
											<outline text="adate = bdate;" created="Mon, 11 Jul 2022 13:23:19 GMT"/>
											<outline text="bdate = tmp;" created="Mon, 11 Jul 2022 13:23:23 GMT"/>
											<outline text="}" created="Mon, 11 Jul 2022 13:23:08 GMT"/>
											</outline>
										<outline text="return (bdate - adate);"/>
										</outline>
									<outline text="case &quot;ctSubs&quot;:" isComment="true" created="Mon, 04 Jul 2022 16:32:48 GMT">
										<outline text="const acount = getCountForSorting (a.ctSubs), bcount = getCountForSorting (b.ctSubs);" created="Sat, 03 Jun 2023 14:26:15 GMT"/>
										<outline text="if (options.flReverseSort) { //7/11/22 by DW" created="Mon, 11 Jul 2022 13:24:36 GMT">
											<outline text="return (acount - bcount);"/>
											<outline text="}" created="Mon, 11 Jul 2022 13:24:40 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 11 Jul 2022 13:24:45 GMT">
											<outline text="return (bcount - acount);"/>
											<outline text="}" created="Mon, 11 Jul 2022 13:24:47 GMT"/>
											</outline>
										</outline>
									<outline text="}" created="Mon, 04 Jul 2022 16:32:19 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 04 Jul 2022 16:47:54 GMT"/>
							</outline>
						<outline text="if (err) {" created="Mon, 28 Aug 2023 15:05:01 GMT">
							<outline text="alertDialog (err.message);" created="Mon, 28 Aug 2023 15:05:04 GMT"/>
							<outline text="}" created="Mon, 28 Aug 2023 15:05:11 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 28 Aug 2023 15:05:12 GMT">
							<outline text="const divSitelist = $(&quot;&lt;div class=\&quot;divSitelist\&quot;&gt;&lt;/div&gt;&quot;);" created="Fri, 20 May 2022 14:38:24 GMT"/>
							<outline text="sortSiteList (theList, options.sortBy, options.flReverseSort);" created="Mon, 28 Aug 2023 16:02:11 GMT"/>
							<outline text="theList.forEach (function (item) {" created="Mon, 28 Aug 2023 15:05:25 GMT">
								<outline text="divSitelist.append (getRow (item));" created="Mon, 28 Aug 2023 15:28:35 GMT"/>
								<outline text="});" created="Mon, 28 Aug 2023 15:23:55 GMT"/>
								</outline>
							<outline text="whereToAppend.append (divSitelist);" created="Mon, 28 Aug 2023 15:27:40 GMT"/>
							<outline text="}" created="Mon, 28 Aug 2023 15:05:13 GMT"/>
							</outline>
						<outline text="});" created="Mon, 28 Aug 2023 15:04:59 GMT"/>
						</outline>
					<outline text="}" created="Mon, 28 Aug 2023 15:03:19 GMT"/>
					</outline>
				<outline text="function reloadSitelist (callback) { //9/3/23 by DW" created="Sun, 03 Sep 2023 14:49:04 GMT">
					<outline text="$(&quot;.divSitelistContainer&quot;).empty ();" created="Sun, 03 Sep 2023 14:50:44 GMT"/>
					<outline text="wordpressMemory.sitelist = undefined;" isComment="true" created="Sun, 03 Sep 2023 14:51:00 GMT"/>
					<outline text="viewSitelist ();" created="Sun, 03 Sep 2023 14:49:57 GMT"/>
					<outline text="}" created="Sun, 03 Sep 2023 14:49:11 GMT"/>
					</outline>
				<outline text="" created="Sun, 03 Sep 2023 14:49:02 GMT"/>
				<outline text="function viewUserInfo (callback) { //9/3/23 by DW" created="Sun, 03 Sep 2023 14:37:30 GMT">
					<outline text="myWordpress.getUserInfo (function (err, theUserInfo) {" created="Fri, 23 Dec 2022 20:06:07 GMT">
						<outline text="if (err) {" created="Fri, 23 Dec 2022 20:06:30 GMT">
							<outline text="alertDialog (err.message);" created="Fri, 23 Dec 2022 20:06:45 GMT"/>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:33 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 23 Dec 2022 20:06:33 GMT">
							<outline text="console.log (&quot;viewUserInfo: theUserInfo == &quot; + jsonStringify (theUserInfo));" created="Wed, 04 Oct 2023 02:15:26 GMT"/>
							<outline text="var htmltext = &quot;&quot;;" created="Sun, 03 Sep 2023 14:38:21 GMT"/>
							<outline text="function addLine (label, value) {" created="Sun, 03 Sep 2023 14:38:08 GMT">
								<outline text="htmltext += &quot;&lt;p&gt;&quot; + label + &quot; = &quot; + value + &quot;.&lt;/p&gt;&quot;;" created="Sun, 03 Sep 2023 14:38:33 GMT"/>
								<outline text="}" created="Sun, 03 Sep 2023 14:38:20 GMT"/>
								</outline>
							<outline text="addLine (&quot;Username&quot;, theUserInfo.username);" created="Fri, 01 Sep 2023 18:41:05 GMT"/>
							<outline text="addLine (&quot;Human name&quot;, theUserInfo.name);" created="Fri, 01 Sep 2023 18:41:05 GMT"/>
							<outline text="addLine (&quot;User since&quot;, new Date (theUserInfo.whenStarted).toLocaleString ());" created="Fri, 01 Sep 2023 18:41:05 GMT"/>
							<outline text="alertDialog (htmltext);" created="Sun, 03 Sep 2023 14:40:30 GMT"/>
							<outline text="if (callback !== undefined) {" created="Fri, 01 Sep 2023 18:36:23 GMT">
								<outline text="callback ();" created="Fri, 01 Sep 2023 18:36:33 GMT"/>
								<outline text="}" created="Fri, 01 Sep 2023 18:36:30 GMT"/>
								</outline>
							<outline text="}" created="Fri, 23 Dec 2022 20:06:35 GMT"/>
							</outline>
						<outline text="});" created="Fri, 23 Dec 2022 20:06:24 GMT"/>
						</outline>
					<outline text="}" created="Sun, 03 Sep 2023 14:37:39 GMT"/>
					</outline>
				<outline text="function userIsSignedIn () {" created="Wed, 23 Aug 2023 12:35:03 GMT">
					<outline text="return (myWordpress.userIsSignedIn ());" created="Sat, 06 Apr 2024 21:00:52 GMT"/>
					<outline text="" isComment="true" created="Sat, 06 Apr 2024 21:00:52 GMT"/>
					<outline text="" isComment="true" created="Sat, 06 Apr 2024 21:00:52 GMT"/>
					<outline text="return (wordpressMemory.accessToken !== undefined);" isComment="true" created="Wed, 23 Aug 2023 12:35:14 GMT"/>
					<outline text="}" created="Wed, 23 Aug 2023 12:35:12 GMT"/>
					</outline>
				<outline text="function updateForLogin (flConnected=userIsSignedIn ()) {">
					<outline text="var idActive, idOther;" created="Mon, 16 May 2022 14:54:58 GMT"/>
					<outline text="if (flConnected) {" created="Mon, 16 May 2022 14:50:50 GMT">
						<outline text="idActive = &quot;#idSignedOn&quot;;" created="Mon, 16 May 2022 14:54:04 GMT"/>
						<outline text="idOther = &quot;#idSignedOff&quot;;" created="Mon, 16 May 2022 14:54:04 GMT"/>
						<outline text="}" created="Mon, 16 May 2022 14:50:55 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 16 May 2022 14:50:55 GMT">
						<outline text="idActive = &quot;#idSignedOff&quot;;" created="Mon, 16 May 2022 14:54:04 GMT"/>
						<outline text="idOther = &quot;#idSignedOn&quot;;" created="Mon, 16 May 2022 14:54:04 GMT"/>
						<outline text="}" created="Mon, 16 May 2022 14:50:57 GMT"/>
						</outline>
					<outline text="if ($(idActive).css (&quot;display&quot;) != &quot;block&quot;) {" created="Mon, 16 May 2022 14:56:00 GMT">
						<outline text="$(idActive).css (&quot;display&quot;, &quot;block&quot;)" created="Mon, 16 May 2022 14:50:50 GMT"/>
						<outline text="}" created="Mon, 16 May 2022 14:56:14 GMT"/>
						</outline>
					<outline text="if ($(idOther).css (&quot;display&quot;) != &quot;none&quot;) {" created="Mon, 16 May 2022 14:56:00 GMT">
						<outline text="$(idOther).css (&quot;display&quot;, &quot;none&quot;)" created="Mon, 16 May 2022 14:50:50 GMT"/>
						<outline text="}" created="Mon, 16 May 2022 14:56:14 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 13 Apr 2024 16:56:48 GMT"/>
				<outline text="function startTestPrefs () { //4/13/24 by DW" created="Sat, 13 Apr 2024 16:56:49 GMT">
					<outline text="var ct = 0, maxMinutes = 5;" created="Sun, 14 Apr 2024 01:42:39 GMT"/>
					<outline text="function testOnce () {" created="Mon, 23 Dec 2024 17:29:42 GMT">
						<outline text="appPrefs.ctMinutesRunning++;" created="Fri, 12 Apr 2024 15:45:05 GMT"/>
						<outline text="appPrefs.whenLastMinute = new Date ();" created="Fri, 12 Apr 2024 15:45:05 GMT"/>
						<outline text="appPrefs.currentSlogan = getRandomSnarkySlogan ();" created="Fri, 12 Apr 2024 16:02:30 GMT"/>
						<outline text="appPrefs.localTime= new Date ().toLocaleString ();" created="Fri, 12 Apr 2024 16:02:30 GMT"/>
						<outline text="prefsChanged ();" created="Fri, 12 Apr 2024 15:45:32 GMT"/>
						<outline text="console.log (&quot;testPrefs: appPrefs == &quot; + jsonStringify (appPrefs));" created="Fri, 12 Apr 2024 15:53:02 GMT"/>
						<outline text="}" created="Mon, 23 Dec 2024 17:29:47 GMT"/>
						</outline>
					<outline text="function everyMinute () {" created="Sun, 14 Apr 2024 01:41:54 GMT">
						<outline text="if (ct++ &lt; maxMinutes) {" created="Sun, 14 Apr 2024 01:43:03 GMT">
							<outline text="testOnce ();" created="Mon, 23 Dec 2024 17:30:06 GMT"/>
							<outline text="}" created="Sun, 14 Apr 2024 01:43:19 GMT"/>
							</outline>
						<outline text="}" created="Sun, 14 Apr 2024 01:42:00 GMT"/>
						</outline>
					<outline text="testOnce (); "/>
					<outline text="runEveryMinute (everyMinute);" created="Wed, 05 May 2021 02:42:28 GMT"/>
					<outline text="}" created="Sat, 13 Apr 2024 16:56:56 GMT"/>
					</outline>
				<outline text="" created="Sat, 13 Apr 2024 16:56:49 GMT"/>
				<outline text="function everySecond () {" created="Mon, 28 Aug 2023 15:18:03 GMT">
					<outline text="updateForLogin ();" created="Mon, 28 Aug 2023 15:18:10 GMT"/>
					<outline text="if (flPrefsChanged) { //4/12/24 by DW" created="Sat, 30 Mar 2024 18:04:32 GMT">
						<outline text="flPrefsChanged = false;" created="Fri, 29 Mar 2024 13:38:14 GMT"/>
						<outline text="savePrefs ();" created="Fri, 29 Mar 2024 13:38:07 GMT"/>
						<outline text="}" created="Sat, 30 Mar 2024 18:04:36 GMT"/>
						</outline>
					<outline text="}" created="Thu, 31 Aug 2023 15:09:11 GMT"/>
					</outline>
				<outline text="function startup () {" created="Tue, 22 Aug 2023 22:21:34 GMT">
					<outline text="console.log (&quot;startup&quot;);" created="Tue, 22 Aug 2023 22:22:11 GMT"/>
					<outline text="const wpOptions = {" created="Sun, 07 Apr 2024 14:25:01 GMT">
						<outline text="serverAddress: (flUseLocalServer) ? &quot;http://localhost:1408/&quot; : &quot;https://wpidentity.scripting.com/&quot;," created="Sat, 06 Apr 2024 20:55:09 GMT"/>
						<outline text="urlChatLogSocket: (flUseLocalServer) ? &quot;ws://localhost:1408/&quot; : &quot;wss://wpidentity.scripting.com/&quot;," created="Mon, 23 Dec 2024 17:06:36 GMT"/>
						<outline text="flWebsocketEnabled: true" created="Mon, 23 Dec 2024 17:08:51 GMT"/>
						<outline text="}" created="Sun, 07 Apr 2024 14:25:07 GMT"/>
						</outline>
					<outline text="myWordpress = new wordpress (wpOptions);" created="Sun, 07 Apr 2024 14:37:55 GMT"/>
					<outline text="myWordpress.startup (function (err) {" created="Sat, 06 Apr 2024 20:54:37 GMT">
						<outline text="if (err) {" created="Sun, 07 Apr 2024 14:26:23 GMT">
							<outline text="alertDialog (&quot;Can't run the app because there was an error starting up.&quot;);" created="Sun, 07 Apr 2024 14:26:27 GMT"/>
							<outline text="}" created="Sun, 07 Apr 2024 14:26:42 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 07 Apr 2024 14:26:43 GMT">
							<outline text="updateForLogin (); "/>
							<outline text="if (userIsSignedIn ()) {" created="Wed, 03 Jan 2024 16:04:21 GMT">
								<outline text="readPrefs (function () { //4/12/24 by DW" created="Fri, 12 Apr 2024 15:42:02 GMT">
									<outline text="viewSitelist ();" created="Mon, 28 Aug 2023 15:22:58 GMT"/>
									<outline text="self.setInterval (everySecond, 1000); "/>
									<outline text="startTestPrefs (); //12/23/24 by DW" created="Sat, 13 Apr 2024 16:57:10 GMT"/>
									<outline text="});" created="Fri, 12 Apr 2024 15:42:03 GMT"/>
									</outline>
								<outline text="}" created="Wed, 03 Jan 2024 16:04:25 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 Apr 2024 14:26:45 GMT"/>
							</outline>
						<outline text="});" created="Sun, 07 Apr 2024 14:25:24 GMT"/>
						</outline>
					<outline text="}" created="Tue, 22 Aug 2023 22:21:40 GMT"/>
					</outline>
				</outline>
			<outline text="client/index.html" created="Tue, 22 Aug 2023 22:01:38 GMT">
				<outline text="&lt;html&gt;" created="Tue, 22 Aug 2023 22:01:47 GMT">
					<outline text="&lt;head&gt;" created="Tue, 22 Aug 2023 22:05:38 GMT">
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;%basicoutliner%&gt;" isComment="true" created="Wed, 30 Aug 2023 16:34:27 GMT"/>
						<outline text="&lt;%basicMediumEditor%&gt;" isComment="true" created="Wed, 30 Aug 2023 16:34:27 GMT"/>
						<outline text="&lt;script src=&quot;api2.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;/head&gt;" created="Tue, 22 Aug 2023 22:05:45 GMT"/>
						</outline>
					<outline text="&lt;body&gt;" created="Tue, 22 Aug 2023 22:01:56 GMT">
						<outline text="&lt;div class=&quot;divMenubar&quot; id=&quot;idMenubar&quot;&gt;" created="Thu, 28 Mar 2013 21:39:05 GMT" pgfnum="21615">
							<outline text="&lt;div class=&quot;topbar-wrapper&quot; style=&quot;z-index: 5;&quot;&gt;">
								<outline text="&lt;div class=&quot;navbar navbar-fixed-top&quot; data-dropdown=&quot;dropdown&quot;&gt;">
									<outline text="&lt;div class=&quot;navbar-inner&quot;&gt;">
										<outline text="&lt;div class=&quot;container&quot;&gt;">
											<outline text="&lt;a class=&quot;brand&quot; href=&quot;/&quot; title=&quot;This is a list of your WordPress.com sites.&quot;&gt;&lt;span id=&quot;idMenuProductName&quot;&gt;Your site list&lt;/span&gt;&lt;/a&gt;"/>
											<outline text="&lt;ul class=&quot;nav&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idMainMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Menu&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;viewUserInfo ();&quot;&gt;View user info&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;reloadSitelist ();&quot;&gt;Reload site list&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;https://github.com/scripting/wpIdentity&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;logOffWordpress ();&quot;&gt;Log off WordPress.com&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Thu, 28 Mar 2013 21:39:17 GMT" pgfnum="21616"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;" created="Tue, 22 Aug 2023 22:04:59 GMT">
							<outline text="&lt;div class=&quot;divSignedOn&quot; id=&quot;idSignedOn&quot; style=&quot;display: none;&quot;&gt;" created="Mon, 16 May 2022 14:35:36 GMT">
								<outline text="&lt;div class=&quot;divSitelistContainer&quot;&gt;" created="Mon, 14 Mar 2022 16:22:35 GMT">
									<outline text="&lt;/div&gt;" created="Mon, 14 Mar 2022 16:22:41 GMT"/>
									</outline>
								<outline text="&lt;div class=&quot;divLoggedInMessage&quot;&gt;" created="Wed, 23 Aug 2023 12:36:50 GMT">
									<outline text="&lt;center&gt;" created="Tue, 22 Aug 2023 22:06:48 GMT">
										<outline text="&lt;p&gt;You are now logged on to wordpress.com.&lt;/p&gt;" created="Wed, 23 Aug 2023 12:42:39 GMT"/>
										<outline text="&lt;p&gt;Click &lt;a onclick=&quot;logOffWordpress ()&quot; style=&quot;cursor: pointer&quot;&gt;here&lt;/a&gt; to log off wordpress.com.&lt;/p&gt;" created="Wed, 23 Aug 2023 12:37:06 GMT"/>
										<outline text="&lt;/center&gt;" created="Tue, 22 Aug 2023 22:06:50 GMT"/>
										</outline>
									<outline text="&lt;/div&gt;" created="Wed, 23 Aug 2023 12:37:10 GMT"/>
									</outline>
								<outline text="&lt;/div&gt;" created="Mon, 16 May 2022 14:36:01 GMT"/>
								</outline>
							<outline text="&lt;div class=&quot;divSignedOff&quot; id=&quot;idSignedOff&quot; style=&quot;display: none;&quot;&gt;" created="Mon, 16 May 2022 14:35:36 GMT">
								<outline text="" created="Sat, 02 Sep 2023 16:30:51 GMT"/>
								<outline text="&lt;p&gt;Click the button to log on to WordPress.com.&lt;/p&gt;" created="Sat, 02 Sep 2023 16:30:52 GMT"/>
								<outline text="&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;//s0.wp.com/i/wpcc-button.png&quot; width=&quot;231&quot; onclick=&quot;myWordpress.connectWithWordpress ()&quot;&gt;&lt;/p&gt;"/>
								<outline text="" created="Sat, 02 Sep 2023 16:30:52 GMT"/>
								<outline text="&lt;div class=&quot;divLogonButton&quot;&gt;" created="Wed, 23 Aug 2023 12:29:57 GMT">
									<outline text="&lt;center&gt;" created="Tue, 22 Aug 2023 22:06:48 GMT">
										<outline text="&lt;img alt=&quot;&quot; src=&quot;//s0.wp.com/i/wpcc-button.png&quot; width=&quot;231&quot; scale=&quot;0&quot; onclick=&quot;connectWithWordpress ()&quot;&gt;"/>
										<outline text="&lt;/center&gt;" created="Tue, 22 Aug 2023 22:06:50 GMT"/>
										</outline>
									<outline text="&lt;/div&gt;" created="Wed, 23 Aug 2023 12:30:05 GMT"/>
									</outline>
								<outline text="&lt;div class=&quot;divSignonDialog&quot;&gt;" isComment="true" created="Fri, 21 Jan 2022 22:28:21 GMT">
									<outline text="&lt;div class=&quot;divSignonDialogPrompt&quot;&gt;" created="Fri, 21 Jan 2022 22:28:21 GMT">
										<outline text="&lt;span class=&quot;spSignonDialogPromptText&quot;&gt;" created="Fri, 21 Jan 2022 22:51:46 GMT">
											<outline text="&lt;span class=&quot;spMembershipClosed&quot;&gt;Sorry! Membership is closed.&lt;/span&gt;" created="Fri, 21 Jan 2022 22:28:34 GMT"/>
											<outline text="&lt;span class=&quot;spMembershipOpen&quot;&gt;Welcome to FeedLand!&lt;/span&gt;" created="Fri, 21 Jan 2022 22:28:34 GMT"/>
											<outline text="&lt;span class=&quot;spMembershipOpen&quot;&gt;Please sign on to enter FeedLand.&lt;/span&gt;" isComment="true" created="Fri, 21 Jan 2022 22:28:34 GMT"/>
											<outline text="&lt;/span&gt;" created="Fri, 21 Jan 2022 22:51:52 GMT"/>
											</outline>
										<outline text="&lt;/div&gt;" created="Fri, 21 Jan 2022 22:28:32 GMT"/>
										</outline>
									<outline text="&lt;div class=&quot;divSignonExplanation&quot;&gt;" created="Fri, 21 Jan 2022 22:29:16 GMT">
										<outline text="&lt;span class=&quot;spSignonExplanationText&quot;&gt;" created="Sat, 22 Jan 2022 15:14:53 GMT">
											<outline text="&lt;span class=&quot;spMembershipClosed&quot;&gt;In order to provide good service to current users we can't accept new members at this time. Hopefully this is just a temporary situation. &lt;/span&gt;" created="Mon, 12 Dec 2022 15:08:04 GMT"/>
											<outline text="&lt;span class=&quot;spMembershipOpen&quot;&gt;FeedLand is a place to share and discover feeds. &lt;i&gt;Sign up&lt;/i&gt; to create a new account, or &lt;i&gt;Sign on&lt;/i&gt; to access a previously created account.&lt;/span&gt;" created="Mon, 12 Dec 2022 15:10:37 GMT"/>
											<outline text="" isComment="true" created="Mon, 12 Dec 2022 15:08:05 GMT"/>
											<outline text="FeedLand is a place to share and discover feeds. " isComment="true" created="Thu, 21 Jul 2022 15:16:39 GMT"/>
											<outline text="We use Twitter to &lt;a href=&quot;http://scripting.com/2022/06/08/144243.html?title=whatIsIdentity&quot; target=&quot;_blank&quot;&gt;identify&lt;/a&gt; each user. " isComment="true" created="Sat, 09 Jul 2022 14:26:10 GMT"/>
											<outline text="Sign on here to access the community of feeds and readers. " isComment="true" created="Sat, 09 Jul 2022 14:24:13 GMT"/>
											<outline text="" isComment="true" created="Sat, 09 Jul 2022 14:25:12 GMT"/>
											<outline text="It's a magic place where everyone is happy all day. We all pitch in and report bugs carefully with exactly the right information. We add feeds that make everyone smarter. We are happy, fun-loving, smart and generous people! :-)" isComment="true" created="Mon, 16 May 2022 15:05:12 GMT"/>
											<outline text="" isComment="true" created="Sat, 09 Jul 2022 14:25:02 GMT"/>
											<outline text="Sign on to record your tweets in OPML, in a public place where all kinds of apps can access them, including outliners, readers, renderers and databases. " isComment="true"/>
											<outline text="We will periodically update your public outline, that can be shared, with items you post on Twitter. You can use your tweets in your writing, to manage your work, or update others. Twitter becomes your mobile &quot;Tools For Thought&quot; notepad. " isComment="true" created="Fri, 21 Jan 2022 22:29:52 GMT"/>
											<outline text="&lt;/span&gt;" created="Sat, 22 Jan 2022 15:15:02 GMT"/>
											</outline>
										<outline text="&lt;/div&gt;" created="Fri, 21 Jan 2022 22:29:26 GMT"/>
										</outline>
									<outline text="&lt;div class=&quot;divSignonButtons&quot;&gt;" created="Fri, 21 Jan 2022 22:29:38 GMT">
										<outline text="&lt;div class=&quot;divSignonButton&quot;&gt;" created="Sat, 22 Jan 2022 15:28:05 GMT">
											<outline text="&lt;span class=&quot;spMembershipOpen&quot;&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161">
												<outline text="&lt;span class=&quot;spTwitterForIdentity&quot;&gt;" created="Tue, 10 Jan 2023 17:08:49 GMT">
													<outline text="&lt;button id=&quot;idNotLoggedOnTwitterButton&quot;  class=&quot;btn&quot; type=&quot;button&quot; onclick=&quot;signOnButtonClick ();&quot;&gt;" created="Tue, 10 Jan 2023 16:55:03 GMT">
														<outline text="&lt;i class=&quot;fab fa-twitter&quot; style=&quot;color: #4099FF; font-weight: bold;&quot;&gt;&lt;/i&gt;&amp;nbsp;Sign on Twitter" created="Sat, 22 Jan 2022 15:39:28 GMT"/>
														<outline text="&lt;/button&gt;" created="Sat, 22 Jan 2022 15:39:45 GMT"/>
														</outline>
													<outline text="&lt;/span&gt;" created="Tue, 10 Jan 2023 17:09:04 GMT"/>
													</outline>
												<outline text="&lt;span class=&quot;spNotTwitterForIdentity&quot;&gt;" created="Tue, 10 Jan 2023 17:08:49 GMT">
													<outline text="&lt;table&gt;" created="Tue, 10 Jan 2023 17:22:34 GMT">
														<outline text="&lt;tr&gt;" created="Tue, 10 Jan 2023 17:22:37 GMT">
															<outline text="&lt;td style=&quot;padding-left: 5px; padding-right: 5px;&quot;&gt;" created="Tue, 10 Jan 2023 17:22:39 GMT">
																<outline text="&lt;span class=&quot;spMembershipOpen&quot;&gt;&lt;button  class=&quot;btn&quot; onclick=&quot;signUpCommand ();&quot;&gt;Sign up&lt;/button&gt;&lt;/span&gt;" created="Tue, 10 Jan 2023 17:09:30 GMT"/>
																<outline text="&lt;/td&gt;" created="Tue, 10 Jan 2023 17:22:41 GMT"/>
																</outline>
															<outline text="&lt;td style=&quot;padding-left: 5px; padding-right: 5px;&quot;&gt;" created="Tue, 10 Jan 2023 17:22:39 GMT">
																<outline text="&lt;button  class=&quot;btn btn-primary&quot; onclick=&quot;signOnCommand ();&quot;&gt;Sign on&lt;/button&gt;" created="Tue, 10 Jan 2023 17:09:30 GMT"/>
																<outline text="&lt;/td&gt;" created="Tue, 10 Jan 2023 17:22:41 GMT"/>
																</outline>
															<outline text="&lt;/tr&gt;" created="Tue, 10 Jan 2023 17:22:44 GMT"/>
															</outline>
														<outline text="&lt;/table&gt;" created="Tue, 10 Jan 2023 17:22:48 GMT"/>
														</outline>
													<outline text="&lt;/span&gt;" created="Tue, 10 Jan 2023 17:09:27 GMT"/>
													</outline>
												<outline text="&lt;/span&gt;" created="Tue, 10 Jan 2023 16:55:14 GMT"/>
												</outline>
											<outline text="&lt;/div&gt;" created="Sat, 22 Jan 2022 15:28:20 GMT"/>
											</outline>
										<outline text="&lt;/div&gt;" created="Fri, 21 Jan 2022 22:29:50 GMT"/>
										</outline>
									<outline text="&lt;div class=&quot;divSignonButtons&quot;&gt;" isComment="true" created="Fri, 21 Jan 2022 22:29:38 GMT">
										<outline text="&lt;div class=&quot;divSignonButton&quot;&gt;" created="Sat, 22 Jan 2022 15:28:05 GMT">
											<outline text="&lt;span class=&quot;spMembershipOpen&quot;&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161">
												<outline text="&lt;button id=&quot;idNotLoggedOnTwitterButton&quot;  class=&quot;btn&quot; type=&quot;button&quot; onclick=&quot;signOnButtonClick ();&quot;&gt;" created="Tue, 10 Jan 2023 16:55:03 GMT">
													<outline text="&lt;i class=&quot;fab fa-twitter&quot; style=&quot;color: #4099FF; font-weight: bold;&quot;&gt;&lt;/i&gt;&amp;nbsp;Sign on Twitter" created="Sat, 22 Jan 2022 15:39:28 GMT"/>
													<outline text="&lt;/button&gt;" created="Sat, 22 Jan 2022 15:39:45 GMT"/>
													</outline>
												<outline text="&lt;/span&gt;" created="Tue, 10 Jan 2023 16:55:14 GMT"/>
												</outline>
											<outline text="&lt;/div&gt;" created="Sat, 22 Jan 2022 15:28:20 GMT"/>
											</outline>
										<outline text="&lt;/div&gt;" created="Fri, 21 Jan 2022 22:29:50 GMT"/>
										</outline>
									<outline text="&lt;/div&gt;" created="Fri, 21 Jan 2022 22:28:32 GMT"/>
									</outline>
								<outline text="&lt;/div&gt;" created="Mon, 16 May 2022 14:36:01 GMT"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Tue, 22 Aug 2023 22:06:06 GMT"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;" created="Tue, 22 Aug 2023 22:01:59 GMT"/>
						</outline>
					<outline text="&lt;/html&gt;" created="Tue, 22 Aug 2023 22:01:51 GMT"/>
					</outline>
				</outline>
			<outline text="docs/storage.md" created="Fri, 12 Apr 2024 16:23:19 GMT">
				<outline text="# Storage" created="Fri, 12 Apr 2024 16:23:50 GMT">
					<outline text="Every wpidentity installation has the option of providing user-level storage." created="Sun, 24 Mar 2024 14:55:17 GMT"/>
					</outline>
				<outline text="#### How to" created="Sun, 24 Mar 2024 14:56:06 GMT">
					<outline text="1. Provide an object named &lt;i&gt;database&lt;/i&gt; in config.json. There's an example in &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/config.json&quot;&gt;config.json&lt;/a&gt; in this repo." created="Sun, 24 Mar 2024 14:56:11 GMT"/>
					<outline text="2. In your MySQL database, create tables wpstorage and users with these commands. " created="Sun, 24 Mar 2024 14:56:42 GMT">
						<outline text="```SQL" created="Sun, 24 Mar 2024 14:57:44 GMT"/>
						<outline text="&lt;%includeExample (&quot;createTable&quot;)%&gt;"/>
						<outline text="```" created="Sun, 24 Mar 2024 14:58:16 GMT"/>
						</outline>
					<outline text="3. If you put this table in its own database you should create the database with:" created="Sun, 24 Mar 2024 14:29:16 GMT">
						<outline text="`create database wpidentity character set utf8mb4 collate utf8mb4_unicode_ci;`"/>
						</outline>
					</outline>
				<outline text="#### How it works" created="Fri, 12 Apr 2024 16:35:52 GMT">
					<outline text="We use WordPress for identity." created="Fri, 12 Apr 2024 16:36:22 GMT"/>
					<outline text="Each user has their own set of files. For example, you could keep a prefs.json file for each user, or a bookmarks.opml file. " created="Fri, 12 Apr 2024 16:35:58 GMT"/>
					<outline text="A file can be attached to a specific WP post, identified by site and post id's. This can be used for per-post prefs, or using a different kind of editor to write a post. It basically allows you to store data alongside a post. It could also be that the post is sort of a home page for a data set that's attached to the page. It's basically viewing WordPress as a database that has publishing built-in. " created="Fri, 12 Apr 2024 16:36:23 GMT"/>
					<outline text="Files can be public or private. At this point there's no functionality for public files." created="Fri, 12 Apr 2024 16:37:47 GMT"/>
					<outline text="The relpath field is meant to be a relative path to the &quot;home&quot; of the user's storage, but it's really just a string. You can use slashes to create structure, so for example there could be prefs files for different apps, with the first part of the path being the name of the app. The demo app stores its prefs file in demo/prefs.json. " created="Fri, 12 Apr 2024 16:42:11 GMT"/>
					</outline>
				<outline text="#### Queries that work" created="Thu, 10 Oct 2024 13:47:37 GMT">
					<outline text="select id, username, relpath, type, idSite, idPost, whenCreated, whenUpdated, ctSaves from wpstorage order by whenUpdated desc;"/>
					<outline text="select filecontents from wpstorage where id = 65; "/>
					<outline text="select filecontents from wpstorage where relpath = 'bingeworthy/profile.json';" created="Thu, 09 Jan 2025 16:59:39 GMT"/>
					<outline text="select id, username, whenCreated, whenUpdated, ctSaves from wpstorage where relpath = 'wordland/prefs.json' order by ctSaves desc limit 25;" created="Mon, 23 Dec 2024 18:07:38 GMT"/>
					<outline text="select * from log order by id desc limit 100;"/>
					<outline text="select id, eventName, whenCreated from log order by id desc limit 100;"/>
					<outline text="select id, eventData from log order by id desc limit 100;"/>
					</outline>
				</outline>
			<outline text="docs/history.md" created="Tue, 08 Oct 2024 11:38:45 GMT">
				<outline text="# wpIdentity history" created="Tue, 08 Oct 2024 11:38:49 GMT">
					<outline text="How it came to be, to whom do we owe credit, and how to explore." created="Tue, 08 Oct 2024 11:39:08 GMT"/>
					</outline>
				<outline text="### What is wpIdentity?" created="Tue, 08 Oct 2024 11:52:00 GMT">
					<outline text="&lt;a href=&quot;https://github.com/scripting/wpIdentity/tree/main&quot;&gt;wpIdentity&lt;/a&gt; simplifies the &lt;a href=&quot;https://github.com/Automattic/wp-calypso/tree/trunk/packages/wpcom.js&quot;&gt;WordPress REST API&lt;/a&gt;, making it easier to incorporate into JavaScript apps running in the browser. " created="Tue, 08 Oct 2024 11:41:00 GMT"/>
					<outline text="It has grown beyond its initial function to serve as a foundation for a simple browser-based writing app I'm working on, that works primarily with WordPress." created="Tue, 08 Oct 2024 11:56:16 GMT"/>
					</outline>
				<outline text="### FeedLand needed it, quickly" created="Tue, 08 Oct 2024 11:52:12 GMT">
					<outline text="It's called &lt;a href=&quot;https://github.com/scripting/wpIdentity&quot;&gt;wpidentity&lt;/a&gt;, because that's initially what its purpose was, to provide an easy way for a browser-based app use WordPress as an identity system. That functionality is used in &lt;a href=&quot;https://feedland.org/&quot;&gt;FeedLand&lt;/a&gt;. It was kind of an emergency project because Twitter, which we had previously used for identity was going through its own identity crisis. As a result FeedLand uses WP identity by default, in addition to email-based identity which serves as a backup against any future problems." created="Tue, 08 Oct 2024 11:41:14 GMT"/>
					</outline>
				<outline text="### Foundation for browser-based apps" created="Tue, 08 Oct 2024 11:53:06 GMT">
					<outline text="It does much more than identity. The thing I'm most proud of is the simplicity of the API. WordPress already has a very nice REST API but it's possible to further factor the API by creating an object called wordPress which is defined in a file called &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/client/api2.js&quot;&gt;api2.js&lt;/a&gt; in the &lt;a href=&quot;https://github.com/scripting/wpIdentity/tree/main/client&quot;&gt;client folder&lt;/a&gt; of the wpidentity project, which is a very simple demo app. "/>
					<outline text="This API is patterned after the approach Facebook took in their browser interface, which I first used about ten years go when I was working on Fargo. I was very impressed with how much easier it was to use than the Twitter API which works more or less like the WordPress API does. They all get the job done, but the FB approach factors out a lot of the code you'd have to write if you were using the &quot;naked&quot; WordPress API. (It's possible others have done this previously, not claiming to have invented this, I want to be sure people get that.)" created="Tue, 08 Oct 2024 12:02:42 GMT"/>
					</outline>
				<outline text="### WordLand (November 2024)" created="Mon, 25 Nov 2024 15:44:40 GMT">
					<outline text="With &lt;a href=&quot;https://this.how/wordland/&quot;&gt;WordLand&lt;/a&gt; it also gets a &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/wpidentity.js#L423&quot;&gt;storage&lt;/a&gt; component, because WordLand needs to store drafts. " created="Mon, 25 Nov 2024 15:44:43 GMT"/>
					<outline text="Also the wpcom interface is a lot slower, since we save the draft as the user types, it needs to be pretty fast. " created="Mon, 25 Nov 2024 15:46:47 GMT"/>
					</outline>
				<outline text="### Missing functionality" created="Tue, 08 Oct 2024 11:53:38 GMT">
					<outline text="I still have some more functionality to cover, notably uploads of media objects and the ability to edit categories without having to go the wordpress.com editor." created="Tue, 08 Oct 2024 11:53:44 GMT"/>
					</outline>
				<outline text="### License" created="Tue, 08 Oct 2024 11:57:50 GMT">
					<outline text="&lt;a href=&quot;https://github.com/scripting/wpIdentity&quot;&gt;wpIdentity&lt;/a&gt; is licensed under the most liberal MIT license. So if Automattic or the foundation or whoever (I'm confused about who's who in this world) wants to adopt it, they can -- or any developer is free to use it however they like. As a personal favor, I would like to be credited personally as the initial author if you choose to use it, and please point back to my GitHub project. But you are not &lt;i&gt;required&lt;/i&gt; to do all this. "/>
					</outline>
				<outline text="### Why now?" created="Tue, 08 Oct 2024 11:53:29 GMT">
					<outline text="Anyway, I find myself wanting to explain this to a few people now, in Oct 2024, so I thought it would be best to write it up, and answer any questions people might have, to improve the docs. "/>
					</outline>
				</outline>
			<outline text="readme.md" created="Tue, 22 Aug 2023 21:40:09 GMT">
				<outline text="# wpIdentity">
					<outline text="A &lt;a href=&quot;https://www.npmjs.com/package/wpidentity&quot;&gt;package&lt;/a&gt; that implements &lt;a href=&quot;https://developer.wordpress.com/docs/wpcc/&quot;&gt;OAuth identity&lt;/a&gt; and a simple verb set with wordpress.com for Node.js apps."/>
					<outline text="It's used in FeedLand for WordPress identity and it's the complete backend for WordLand."/>
					</outline>
				<outline text="### It works" created="Wed, 23 Aug 2023 12:53:46 GMT">
					<outline text="You can try it out &lt;a href=&quot;http://scripting.com/code/wpidentity/client/&quot;&gt;here&lt;/a&gt;." created="Wed, 23 Aug 2023 12:53:51 GMT"/>
					<outline text="You can log on, and see a list of your sites, when each was created and modified. " created="Wed, 23 Aug 2023 12:53:55 GMT"/>
					<outline text="Here's a &lt;a href=&quot;https://imgs.scripting.com/2023/09/05/wpsitelist.png&quot;&gt;screen shot&lt;/a&gt;. " created="Tue, 05 Sep 2023 15:31:36 GMT"/>
					</outline>
				<outline text="### How to set up a server" created="Tue, 05 Sep 2023 15:34:03 GMT">
					<outline text="1. Download the folder." created="Tue, 05 Sep 2023 15:34:12 GMT"/>
					<outline text="2. Throw away everything but the shell folder. In the shell folder you can throw away source.opml." created="Tue, 05 Sep 2023 15:34:20 GMT"/>
					<outline text="3. Move the shell folder to your server." created="Tue, 05 Sep 2023 15:34:28 GMT"/>
					<outline text="4. Edit the &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/shell/config.json&quot;&gt;config.json&lt;/a&gt; file with the credentials you got from WordPress.com. " created="Tue, 05 Sep 2023 15:38:36 GMT"/>
					<outline text="4. npm install" created="Tue, 05 Sep 2023 15:34:35 GMT"/>
					<outline text="5. node wpidentity.js" created="Tue, 05 Sep 2023 15:34:40 GMT"/>
					<outline text="6. If you want to use the storage feature, you'll need to &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/docs/storage.md&quot;&gt;set up the database&lt;/a&gt;. " created="Fri, 31 May 2024 14:27:47 GMT"/>
					</outline>
				<outline text="### History" created="Tue, 08 Oct 2024 11:47:59 GMT">
					<outline text="In October 2024, I wrote a brief doc about the &lt;a href=&quot;https://github.com/scripting/wpIdentity/blob/main/docs/history.md&quot;&gt;history of wpIdentity&lt;/a&gt;, its purpose, where it came from , how to explore. " created="Tue, 08 Oct 2024 11:48:03 GMT"/>
					</outline>
				<outline text="### Check out worknotes" created="Tue, 29 Aug 2023 17:45:48 GMT">
					<outline text="I've been narrating my work in the &lt;a href=&quot;https://github.com/scripting/wordpressIdentity/blob/main/worknotes.md&quot;&gt;worknotes&lt;/a&gt;. " created="Tue, 29 Aug 2023 17:45:53 GMT"/>
					</outline>
				<outline text="### Automattic docs" created="Wed, 30 Aug 2023 13:53:31 GMT">
					<outline text="These docs proved useful at different points in this project." created="Wed, 30 Aug 2023 13:53:36 GMT">
						<outline text="* https://github.com/Automattic/wpcom.js/tree/master/docs -- docs for the routines we call " created="Thu, 23 May 2024 19:48:02 GMT"/>
						<outline text="* https://developer.wordpress.com/apps/" created="Sun, 07 Apr 2024 13:44:34 GMT"/>
						<outline text="* https://developer.wordpress.com/docs/oauth2/" created="Sun, 27 Aug 2023 14:15:56 GMT"/>
						<outline text="* https://github.com/Automattic/node-wpcom-oauth" created="Wed, 30 Aug 2023 13:53:48 GMT"/>
						<outline text="* https://github.com/Automattic/wp-calypso"/>
						<outline text="* https://github.com/Automattic/wp-calypso/tree/trunk/packages/wpcom.js" created="Sun, 27 Aug 2023 14:15:36 GMT"/>
						<outline text="* https://github.com/Automattic/wp-calypso/tree/trunk/packages/wpcom.js/docs" created="Sun, 27 Aug 2023 15:41:19 GMT"/>
						<outline text="* https://github.com/Automattic/wpcom-connect-examples" created="Sat, 26 Aug 2023 16:18:22 GMT"/>
						</outline>
					</outline>
				<outline text="### Other pointers" created="Wed, 30 Aug 2023 13:58:06 GMT">
					<outline text="I am using this site for testing. https://scripting4.wordpress.com/" created="Wed, 30 Aug 2023 13:58:11 GMT"/>
					</outline>
				</outline>
			<outline text="config.json" isComment="true" created="Tue, 22 Aug 2023 14:23:58 GMT">
				<outline text="{" created="Tue, 22 Aug 2023 14:24:01 GMT">
					<outline text="{">
						<outline text="&quot;urlServer&quot;: &quot;https://myserver.org/&quot;,"/>
						<outline text="" created="Fri, 12 Apr 2024 16:31:40 GMT"/>
						<outline text="&quot;clientId&quot;: 12345,"/>
						<outline text="&quot;clientSecret&quot;: &quot;xxx&quot;,"/>
						<outline text="&quot;urlRedirect&quot;: &quot;https://myserver.org/callbackFromWordpress&quot;,"/>
						<outline text="&quot;scope&quot;: &quot;global&quot;,"/>
						<outline text="" created="Fri, 12 Apr 2024 16:31:42 GMT"/>
						<outline text="&quot;database&quot;: {">
							<outline text="&quot;host&quot;: &quot;databaseserver.org&quot;,"/>
							<outline text="&quot;port&quot;: 12345,"/>
							<outline text="&quot;user&quot;: &quot;dbadmin&quot;,"/>
							<outline text="&quot;password&quot;: &quot;xxx&quot;,"/>
							<outline text="&quot;charset&quot;: &quot;utf8mb4&quot;,"/>
							<outline text="&quot;connectionLimit&quot;: 15,"/>
							<outline text="&quot;database&quot;: &quot;wpidentity&quot;,"/>
							<outline text="&quot;debug&quot;: false,"/>
							<outline text="&quot;flLogQueries&quot;: false,"/>
							<outline text="&quot;flQueueAllRequests&quot;: false"/>
							<outline text=" }"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Tue, 22 Aug 2023 14:28:04 GMT">
			<outline text="nodeEditorSuite.utilities.buildWpIdentity ()" created="Wed, 26 Jul 2023 16:00:18 GMT"/>
			</outline>
		</body>
	</opml>
